// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="circ_buff_write_many128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=0,HLS_SYN_FF=1621,HLS_SYN_LUT=2871,HLS_VERSION=2018_3}" *)

module circ_buff_write_many128 (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY,
        m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID,
        m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA,
        m_axi_gmem_out_RLAST,
        m_axi_gmem_out_RID,
        m_axi_gmem_out_RUSER,
        m_axi_gmem_out_RRESP,
        m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER,
        fifo_in_0_V_TDATA,
        fifo_in_0_V_TVALID,
        fifo_in_0_V_TREADY,
        fifo_in_1_V_TDATA,
        fifo_in_1_V_TVALID,
        fifo_in_1_V_TREADY,
        fifo_in_2_V_TDATA,
        fifo_in_2_V_TVALID,
        fifo_in_2_V_TREADY,
        fifo_in_3_V_TDATA,
        fifo_in_3_V_TVALID,
        fifo_in_3_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_pp1_stage0 = 27'd65536;
parameter    ap_ST_fsm_state25 = 27'd131072;
parameter    ap_ST_fsm_state26 = 27'd262144;
parameter    ap_ST_fsm_state27 = 27'd524288;
parameter    ap_ST_fsm_state28 = 27'd1048576;
parameter    ap_ST_fsm_state29 = 27'd2097152;
parameter    ap_ST_fsm_state30 = 27'd4194304;
parameter    ap_ST_fsm_state31 = 27'd8388608;
parameter    ap_ST_fsm_state32 = 27'd16777216;
parameter    ap_ST_fsm_state33 = 27'd33554432;
parameter    ap_ST_fsm_state34 = 27'd67108864;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_OUT_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_OUT_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM_OUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_OUT_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_OUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_OUT_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_out_AWVALID;
input   m_axi_gmem_out_AWREADY;
output  [C_M_AXI_GMEM_OUT_ADDR_WIDTH - 1:0] m_axi_gmem_out_AWADDR;
output  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_AWID;
output  [7:0] m_axi_gmem_out_AWLEN;
output  [2:0] m_axi_gmem_out_AWSIZE;
output  [1:0] m_axi_gmem_out_AWBURST;
output  [1:0] m_axi_gmem_out_AWLOCK;
output  [3:0] m_axi_gmem_out_AWCACHE;
output  [2:0] m_axi_gmem_out_AWPROT;
output  [3:0] m_axi_gmem_out_AWQOS;
output  [3:0] m_axi_gmem_out_AWREGION;
output  [C_M_AXI_GMEM_OUT_AWUSER_WIDTH - 1:0] m_axi_gmem_out_AWUSER;
output   m_axi_gmem_out_WVALID;
input   m_axi_gmem_out_WREADY;
output  [C_M_AXI_GMEM_OUT_DATA_WIDTH - 1:0] m_axi_gmem_out_WDATA;
output  [C_M_AXI_GMEM_OUT_WSTRB_WIDTH - 1:0] m_axi_gmem_out_WSTRB;
output   m_axi_gmem_out_WLAST;
output  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_WID;
output  [C_M_AXI_GMEM_OUT_WUSER_WIDTH - 1:0] m_axi_gmem_out_WUSER;
output   m_axi_gmem_out_ARVALID;
input   m_axi_gmem_out_ARREADY;
output  [C_M_AXI_GMEM_OUT_ADDR_WIDTH - 1:0] m_axi_gmem_out_ARADDR;
output  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_ARID;
output  [7:0] m_axi_gmem_out_ARLEN;
output  [2:0] m_axi_gmem_out_ARSIZE;
output  [1:0] m_axi_gmem_out_ARBURST;
output  [1:0] m_axi_gmem_out_ARLOCK;
output  [3:0] m_axi_gmem_out_ARCACHE;
output  [2:0] m_axi_gmem_out_ARPROT;
output  [3:0] m_axi_gmem_out_ARQOS;
output  [3:0] m_axi_gmem_out_ARREGION;
output  [C_M_AXI_GMEM_OUT_ARUSER_WIDTH - 1:0] m_axi_gmem_out_ARUSER;
input   m_axi_gmem_out_RVALID;
output   m_axi_gmem_out_RREADY;
input  [C_M_AXI_GMEM_OUT_DATA_WIDTH - 1:0] m_axi_gmem_out_RDATA;
input   m_axi_gmem_out_RLAST;
input  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_RID;
input  [C_M_AXI_GMEM_OUT_RUSER_WIDTH - 1:0] m_axi_gmem_out_RUSER;
input  [1:0] m_axi_gmem_out_RRESP;
input   m_axi_gmem_out_BVALID;
output   m_axi_gmem_out_BREADY;
input  [1:0] m_axi_gmem_out_BRESP;
input  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_BID;
input  [C_M_AXI_GMEM_OUT_BUSER_WIDTH - 1:0] m_axi_gmem_out_BUSER;
input  [63:0] fifo_in_0_V_TDATA;
input   fifo_in_0_V_TVALID;
output   fifo_in_0_V_TREADY;
input  [63:0] fifo_in_1_V_TDATA;
input   fifo_in_1_V_TVALID;
output   fifo_in_1_V_TREADY;
input  [63:0] fifo_in_2_V_TDATA;
input   fifo_in_2_V_TVALID;
output   fifo_in_2_V_TREADY;
input  [63:0] fifo_in_3_V_TDATA;
input   fifo_in_3_V_TVALID;
output   fifo_in_3_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg fifo_in_0_V_TREADY;
reg fifo_in_1_V_TREADY;
reg fifo_in_2_V_TREADY;
reg fifo_in_3_V_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] output_V;
wire   [7:0] reset;
wire   [63:0] debug_register;
wire   [1:0] useable_words_address0;
reg    useable_words_ce0;
wire   [7:0] useable_words_q0;
reg   [0:0] first;
reg   [15:0] head_3;
reg   [15:0] head_0;
reg   [15:0] head_1;
reg   [15:0] head_2;
reg   [7:0] local_words_0;
reg   [7:0] local_words_1;
reg   [7:0] local_words_2;
reg   [7:0] local_words_3;
reg    gmem_out_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_out_blk_n_R;
wire    ap_CS_fsm_state12;
reg    gmem_out_blk_n_AW;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] tmp_16_reg_1215;
reg    gmem_out_blk_n_W;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] tmp_16_reg_1215_pp1_iter1_reg;
reg    gmem_out_blk_n_B;
reg    ap_enable_reg_pp1_iter7;
reg   [0:0] tmp_16_reg_1215_pp1_iter6_reg;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state32;
reg   [0:0] or_cond_reg_1178;
reg    fifo_in_0_V_TDATA_blk_n;
wire    ap_CS_fsm_state15;
reg   [1:0] tmp_13_reg_1117;
wire   [0:0] tmp_14_fu_858_p2;
reg    fifo_in_1_V_TDATA_blk_n;
reg    fifo_in_2_V_TDATA_blk_n;
reg    fifo_in_3_V_TDATA_blk_n;
reg    gmem_out_AWVALID;
wire    gmem_out_AWREADY;
reg   [31:0] gmem_out_AWADDR;
reg    gmem_out_WVALID;
wire    gmem_out_WREADY;
reg   [127:0] gmem_out_WDATA;
reg    gmem_out_ARVALID;
wire    gmem_out_ARREADY;
wire   [31:0] gmem_out_ARADDR;
wire    gmem_out_RVALID;
reg    gmem_out_RREADY;
wire   [127:0] gmem_out_RDATA;
wire    gmem_out_RLAST;
wire   [0:0] gmem_out_RID;
wire   [0:0] gmem_out_RUSER;
wire   [1:0] gmem_out_RRESP;
wire    gmem_out_BVALID;
reg    gmem_out_BREADY;
wire   [1:0] gmem_out_BRESP;
wire   [0:0] gmem_out_BID;
wire   [0:0] gmem_out_BUSER;
reg   [15:0] val_assign_1_reg_439;
reg   [14:0] h2_reg_449;
wire   [28:0] tmp_27_cast_fu_506_p1;
reg   [28:0] tmp_27_cast_reg_1078;
wire   [0:0] first_load_load_fu_510_p1;
reg   [0:0] first_load_reg_1085;
wire   [2:0] i_1_fu_520_p2;
reg   [2:0] i_1_reg_1092;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_514_p2;
wire   [1:0] tmp_3_fu_531_p1;
reg   [1:0] tmp_3_reg_1102;
wire   [2:0] stride_1_fu_571_p2;
reg   [2:0] stride_1_reg_1112;
wire    ap_CS_fsm_state4;
wire   [1:0] tmp_13_fu_577_p1;
wire   [0:0] exitcond1_fu_565_p2;
wire   [10:0] idx_fu_581_p5;
reg   [10:0] idx_reg_1125;
wire   [11:0] idx_cast_fu_593_p1;
reg   [11:0] idx_cast_reg_1130;
wire   [28:0] output_V2_sum_fu_607_p2;
reg   [28:0] output_V2_sum_reg_1135;
reg    ap_sig_ioackin_gmem_out_ARREADY;
wire   [15:0] sel_tmp3_i_fu_652_p3;
reg   [15:0] sel_tmp3_i_reg_1146;
wire   [0:0] sel_tmp4_i_fu_660_p2;
reg   [0:0] sel_tmp4_i_reg_1151;
wire   [15:0] stream_tail_fu_665_p1;
reg   [15:0] stream_tail_reg_1156;
wire   [16:0] idx_cast5_fu_669_p1;
reg   [16:0] idx_cast5_reg_1163;
wire    ap_CS_fsm_state13;
wire   [15:0] stream_head_fu_676_p3;
reg   [15:0] stream_head_reg_1168;
wire   [7:0] words_fu_698_p6;
reg   [7:0] words_reg_1173;
wire   [0:0] or_cond_fu_757_p2;
wire   [15:0] bytes_to_write_fu_789_p2;
reg   [15:0] bytes_to_write_reg_1182;
wire   [0:0] tmp_11_fu_799_p2;
wire    ap_CS_fsm_state14;
wire   [14:0] h_1_fu_804_p2;
reg   [14:0] h_1_reg_1192;
wire   [127:0] part_V_fu_850_p1;
reg   [0:0] ap_phi_mux_empty_n_phi_fu_379_p8;
wire   [127:0] part_V_1_fu_899_p2;
reg    ap_predicate_op186_read_state15;
reg    ap_predicate_op188_read_state15;
reg    ap_predicate_op190_read_state15;
reg    ap_predicate_op192_read_state15;
reg    ap_block_state15;
wire   [3:0] word_V_fu_905_p2;
wire   [0:0] tmp_16_fu_920_p2;
wire    ap_block_state17_pp1_stage0_iter0;
wire    ap_block_state18_pp1_stage0_iter1;
reg    ap_sig_ioackin_gmem_out_AWREADY;
reg    ap_block_state18_io;
wire    ap_block_state19_pp1_stage0_iter2;
reg    ap_sig_ioackin_gmem_out_WREADY;
reg    ap_block_state19_io;
wire    ap_block_state20_pp1_stage0_iter3;
wire    ap_block_state21_pp1_stage0_iter4;
wire    ap_block_state22_pp1_stage0_iter5;
wire    ap_block_state23_pp1_stage0_iter6;
reg    ap_block_state24_pp1_stage0_iter7;
reg    ap_block_pp1_stage0_11001;
reg   [0:0] tmp_16_reg_1215_pp1_iter2_reg;
reg   [0:0] tmp_16_reg_1215_pp1_iter3_reg;
reg   [0:0] tmp_16_reg_1215_pp1_iter4_reg;
reg   [0:0] tmp_16_reg_1215_pp1_iter5_reg;
wire   [14:0] h_2_fu_926_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [28:0] output_V2_sum4_fu_950_p2;
reg   [28:0] output_V2_sum4_reg_1229;
wire   [15:0] stream_head_2_cast_fu_965_p1;
reg   [15:0] stream_head_2_cast_reg_1234;
wire   [127:0] data_V_q0;
reg   [127:0] data_V_load_reg_1239;
wire   [28:0] output_V2_sum3_fu_988_p2;
reg   [28:0] output_V2_sum3_reg_1250;
wire    ap_CS_fsm_state25;
wire   [2:0] i_2_fu_1038_p2;
wire    ap_CS_fsm_state33;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state17;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter5;
reg    ap_enable_reg_pp1_iter6;
reg   [8:0] data_V_address0;
reg    data_V_ce0;
reg    data_V_we0;
reg   [2:0] i_reg_316;
wire    ap_CS_fsm_state3;
reg   [0:0] first_flag_reg_327;
reg   [2:0] stride_reg_340;
reg    ap_block_state32;
wire   [0:0] tmp_4_fu_535_p2;
reg   [14:0] h_reg_351;
wire    ap_CS_fsm_state16;
reg   [63:0] ap_phi_mux_low_phi_fu_366_p8;
wire   [15:0] bytes_to_write_2_fu_794_p1;
reg   [15:0] bytes_to_write_1_reg_390;
reg   [127:0] p_s_reg_400;
reg   [3:0] t_V_reg_411;
reg   [63:0] ap_phi_mux_tmp_161_phi_fu_425_p8;
reg   [15:0] ap_phi_mux_val_assign_1_phi_fu_442_p4;
reg   [2:0] i1_reg_460;
wire   [0:0] exitcond_fu_1032_p2;
wire   [0:0] ap_phi_mux_first_flag_1_phi_fu_475_p4;
reg   [0:0] first_flag_1_reg_471;
reg   [0:0] first_new_1_reg_483;
wire   [63:0] tmp_2_fu_526_p1;
wire   [63:0] tmp_17_fu_911_p1;
wire   [63:0] tmp_20_fu_945_p1;
wire   [63:0] output_V2_sum_cast_fu_612_p1;
wire   [63:0] output_V2_sum4_cast_fu_969_p1;
wire   [63:0] output_V2_sum3_cast_fu_993_p1;
reg    ap_reg_ioackin_gmem_out_ARREADY;
reg    ap_reg_ioackin_gmem_out_AWREADY;
reg    ap_block_pp1_stage0_01001;
reg    ap_reg_ioackin_gmem_out_WREADY;
wire   [127:0] p_1_fu_1003_p1;
wire    ap_CS_fsm_state34;
wire   [1:0] tmp_6_fu_1044_p1;
wire   [27:0] tmp_fu_496_p4;
wire   [11:0] tmp_s_fu_597_p2;
wire   [28:0] tmp_3_cast_fu_603_p1;
wire   [0:0] sel_tmp_i_fu_634_p2;
wire   [0:0] sel_tmp2_i_fu_647_p2;
wire   [15:0] sel_tmp1_i_fu_639_p3;
wire   [16:0] tmp_6_cast_fu_711_p1;
wire   [8:0] tmp_21_fu_715_p1;
wire   [16:0] tmp_8_fu_719_p2;
wire   [17:0] tmp_8_cast_fu_731_p1;
wire   [17:0] tmp_5_cast_fu_738_p1;
wire   [8:0] tmp_8_cast4_fu_725_p2;
wire   [16:0] tmp_10_cast_fu_747_p1;
wire   [16:0] tmp_5_cast3_fu_735_p1;
wire   [0:0] tmp_9_fu_741_p2;
wire   [0:0] tmp_5_fu_751_p2;
wire   [0:0] tmp_7_fu_763_p2;
wire   [15:0] p_neg_fu_769_p2;
wire   [15:0] tmp_10_fu_775_p2;
wire   [15:0] p_neg150_pn_fu_781_p3;
wire   [7:0] tmp_19_cast_fu_854_p1;
wire   [31:0] hi_fu_863_p1;
wire   [1:0] op2_assign_fu_875_p5;
wire   [7:0] op2_assign_fu_875_p6;
wire   [127:0] hi_p_V_fu_867_p1;
wire   [127:0] tmp_24_fu_889_p1;
wire   [127:0] r_V_fu_893_p2;
wire   [15:0] h2_cast_fu_916_p1;
wire   [16:0] tmp_28_cast_fu_932_p1;
wire   [16:0] tmp_19_fu_936_p2;
wire   [28:0] tmp_21_cast_fu_941_p1;
wire   [8:0] tmp_29_fu_955_p1;
wire   [8:0] stream_head_1_fu_959_p2;
wire   [11:0] tmp_22_fu_979_p2;
wire   [28:0] tmp_25_cast_fu_984_p1;
reg   [26:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_685;
reg    ap_condition_695;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
#0 first = 1'd0;
#0 head_3 = 16'd0;
#0 head_0 = 16'd0;
#0 head_1 = 16'd0;
#0 head_2 = 16'd0;
#0 local_words_0 = 8'd0;
#0 local_words_1 = 8'd0;
#0 local_words_2 = 8'd0;
#0 local_words_3 = 8'd0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_reg_ioackin_gmem_out_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_out_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_out_WREADY = 1'b0;
end

circ_buff_write_many128_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
circ_buff_write_many128_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .output_V(output_V),
    .reset(reset),
    .debug_register(debug_register),
    .useable_words_address0(useable_words_address0),
    .useable_words_ce0(useable_words_ce0),
    .useable_words_q0(useable_words_q0)
);

circ_buff_write_many128_gmem_out_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_OUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_OUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_OUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_OUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_OUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_OUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_OUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_OUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_OUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_OUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_OUT_CACHE_VALUE ))
circ_buff_write_many128_gmem_out_m_axi_U(
    .AWVALID(m_axi_gmem_out_AWVALID),
    .AWREADY(m_axi_gmem_out_AWREADY),
    .AWADDR(m_axi_gmem_out_AWADDR),
    .AWID(m_axi_gmem_out_AWID),
    .AWLEN(m_axi_gmem_out_AWLEN),
    .AWSIZE(m_axi_gmem_out_AWSIZE),
    .AWBURST(m_axi_gmem_out_AWBURST),
    .AWLOCK(m_axi_gmem_out_AWLOCK),
    .AWCACHE(m_axi_gmem_out_AWCACHE),
    .AWPROT(m_axi_gmem_out_AWPROT),
    .AWQOS(m_axi_gmem_out_AWQOS),
    .AWREGION(m_axi_gmem_out_AWREGION),
    .AWUSER(m_axi_gmem_out_AWUSER),
    .WVALID(m_axi_gmem_out_WVALID),
    .WREADY(m_axi_gmem_out_WREADY),
    .WDATA(m_axi_gmem_out_WDATA),
    .WSTRB(m_axi_gmem_out_WSTRB),
    .WLAST(m_axi_gmem_out_WLAST),
    .WID(m_axi_gmem_out_WID),
    .WUSER(m_axi_gmem_out_WUSER),
    .ARVALID(m_axi_gmem_out_ARVALID),
    .ARREADY(m_axi_gmem_out_ARREADY),
    .ARADDR(m_axi_gmem_out_ARADDR),
    .ARID(m_axi_gmem_out_ARID),
    .ARLEN(m_axi_gmem_out_ARLEN),
    .ARSIZE(m_axi_gmem_out_ARSIZE),
    .ARBURST(m_axi_gmem_out_ARBURST),
    .ARLOCK(m_axi_gmem_out_ARLOCK),
    .ARCACHE(m_axi_gmem_out_ARCACHE),
    .ARPROT(m_axi_gmem_out_ARPROT),
    .ARQOS(m_axi_gmem_out_ARQOS),
    .ARREGION(m_axi_gmem_out_ARREGION),
    .ARUSER(m_axi_gmem_out_ARUSER),
    .RVALID(m_axi_gmem_out_RVALID),
    .RREADY(m_axi_gmem_out_RREADY),
    .RDATA(m_axi_gmem_out_RDATA),
    .RLAST(m_axi_gmem_out_RLAST),
    .RID(m_axi_gmem_out_RID),
    .RUSER(m_axi_gmem_out_RUSER),
    .RRESP(m_axi_gmem_out_RRESP),
    .BVALID(m_axi_gmem_out_BVALID),
    .BREADY(m_axi_gmem_out_BREADY),
    .BRESP(m_axi_gmem_out_BRESP),
    .BID(m_axi_gmem_out_BID),
    .BUSER(m_axi_gmem_out_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_out_ARVALID),
    .I_ARREADY(gmem_out_ARREADY),
    .I_ARADDR(gmem_out_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_out_RVALID),
    .I_RREADY(gmem_out_RREADY),
    .I_RDATA(gmem_out_RDATA),
    .I_RID(gmem_out_RID),
    .I_RUSER(gmem_out_RUSER),
    .I_RRESP(gmem_out_RRESP),
    .I_RLAST(gmem_out_RLAST),
    .I_AWVALID(gmem_out_AWVALID),
    .I_AWREADY(gmem_out_AWREADY),
    .I_AWADDR(gmem_out_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_out_WVALID),
    .I_WREADY(gmem_out_WREADY),
    .I_WDATA(gmem_out_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd65535),
    .I_BVALID(gmem_out_BVALID),
    .I_BREADY(gmem_out_BREADY),
    .I_BRESP(gmem_out_BRESP),
    .I_BID(gmem_out_BID),
    .I_BUSER(gmem_out_BUSER)
);

circ_buff_write_many128_data_V #(
    .DataWidth( 128 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_V_address0),
    .ce0(data_V_ce0),
    .we0(data_V_we0),
    .d0(p_s_reg_400),
    .q0(data_V_q0)
);

circ_buff_write_many128_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
circ_buff_write_many128_mux_42_8_1_1_U1(
    .din0(local_words_0),
    .din1(local_words_1),
    .din2(local_words_2),
    .din3(local_words_3),
    .din4(tmp_13_reg_1117),
    .dout(words_fu_698_p6)
);

circ_buff_write_many128_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
circ_buff_write_many128_mux_42_8_1_1_U2(
    .din0(8'd0),
    .din1(8'd32),
    .din2(8'd64),
    .din3(8'd96),
    .din4(op2_assign_fu_875_p5),
    .dout(op2_assign_fu_875_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state14) & ((ap_phi_mux_empty_n_phi_fu_379_p8 == 1'd0) | (tmp_11_fu_799_p2 == 1'd0)))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state17)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state17);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end else if (((1'b1 == ap_CS_fsm_state14) & ((ap_phi_mux_empty_n_phi_fu_379_p8 == 1'd0) | (tmp_11_fu_799_p2 == 1'd0)))) begin
            ap_enable_reg_pp1_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_out_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            if ((ap_sig_ioackin_gmem_out_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_out_ARREADY <= 1'b0;
            end else if ((gmem_out_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_out_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_out_AWREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1215 == 1'd1)))) begin
            ap_reg_ioackin_gmem_out_AWREADY <= 1'b0;
        end else if ((((gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b0 == ap_block_pp1_stage0_01001) & (gmem_out_AWREADY == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1215 == 1'd1)))) begin
            ap_reg_ioackin_gmem_out_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_out_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_16_reg_1215_pp1_iter1_reg == 1'd1)))) begin
            ap_reg_ioackin_gmem_out_WREADY <= 1'b0;
        end else if ((((gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27)) | ((1'b0 == ap_block_pp1_stage0_01001) & (gmem_out_WREADY == 1'b1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_16_reg_1215_pp1_iter1_reg == 1'd1)))) begin
            ap_reg_ioackin_gmem_out_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        if ((tmp_11_fu_799_p2 == 1'd0)) begin
            bytes_to_write_1_reg_390 <= bytes_to_write_reg_1182;
        end else if (((tmp_11_fu_799_p2 == 1'd1) & (ap_phi_mux_empty_n_phi_fu_379_p8 == 1'd0))) begin
            bytes_to_write_1_reg_390 <= bytes_to_write_2_fu_794_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (exitcond_fu_1032_p2 == 1'd1))) begin
        first_flag_1_reg_471 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_565_p2 == 1'd1))) begin
        first_flag_1_reg_471 <= first_flag_reg_327;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_514_p2 == 1'd1) & (first_load_reg_1085 == 1'd0))) begin
        first_flag_reg_327 <= 1'd1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (first_load_load_fu_510_p1 == 1'd1))) begin
        first_flag_reg_327 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) & (exitcond_fu_1032_p2 == 1'd1))) begin
        first_new_1_reg_483 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_565_p2 == 1'd1))) begin
        first_new_1_reg_483 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_fu_920_p2 == 1'd1))) begin
        h2_reg_449 <= h_2_fu_926_p2;
    end else if (((1'b1 == ap_CS_fsm_state14) & ((ap_phi_mux_empty_n_phi_fu_379_p8 == 1'd0) | (tmp_11_fu_799_p2 == 1'd0)))) begin
        h2_reg_449 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        h_reg_351 <= h_1_reg_1192;
    end else if (((1'b1 == ap_CS_fsm_state13) & (or_cond_fu_757_p2 == 1'd0))) begin
        h_reg_351 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_1044_p1 == 2'd0) & (1'b1 == ap_CS_fsm_state33) & (exitcond_fu_1032_p2 == 1'd0))) begin
        head_0 <= 16'd0;
    end else if ((~((gmem_out_BVALID == 1'b0) & (or_cond_reg_1178 == 1'd0)) & (tmp_13_reg_1117 == 2'd0) & (1'b1 == ap_CS_fsm_state32) & (or_cond_reg_1178 == 1'd0))) begin
        head_0 <= val_assign_1_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_1044_p1 == 2'd1) & (1'b1 == ap_CS_fsm_state33) & (exitcond_fu_1032_p2 == 1'd0))) begin
        head_1 <= 16'd0;
    end else if ((~((gmem_out_BVALID == 1'b0) & (or_cond_reg_1178 == 1'd0)) & (tmp_13_reg_1117 == 2'd1) & (1'b1 == ap_CS_fsm_state32) & (or_cond_reg_1178 == 1'd0))) begin
        head_1 <= val_assign_1_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_1044_p1 == 2'd2) & (1'b1 == ap_CS_fsm_state33) & (exitcond_fu_1032_p2 == 1'd0))) begin
        head_2 <= 16'd0;
    end else if ((~((gmem_out_BVALID == 1'b0) & (or_cond_reg_1178 == 1'd0)) & (tmp_13_reg_1117 == 2'd2) & (1'b1 == ap_CS_fsm_state32) & (or_cond_reg_1178 == 1'd0))) begin
        head_2 <= val_assign_1_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_1044_p1 == 2'd3) & (1'b1 == ap_CS_fsm_state33) & (exitcond_fu_1032_p2 == 1'd0))) begin
        head_3 <= 16'd0;
    end else if ((~((gmem_out_BVALID == 1'b0) & (or_cond_reg_1178 == 1'd0)) & (tmp_13_reg_1117 == 2'd3) & (1'b1 == ap_CS_fsm_state32) & (or_cond_reg_1178 == 1'd0))) begin
        head_3 <= val_assign_1_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((tmp_4_fu_535_p2 == 1'd1) & (first_load_reg_1085 == 1'd1)) | ((tmp_4_fu_535_p2 == 1'd1) & (tmp_1_fu_514_p2 == 1'd1))))) begin
        i1_reg_460 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state33) & (exitcond_fu_1032_p2 == 1'd0))) begin
        i1_reg_460 <= i_2_fu_1038_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (first_load_load_fu_510_p1 == 1'd0))) begin
        i_reg_316 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_316 <= i_1_reg_1092;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd1))) begin
        p_s_reg_400 <= part_V_1_fu_899_p2;
    end else if (((1'b1 == ap_CS_fsm_state14) & (ap_phi_mux_empty_n_phi_fu_379_p8 == 1'd1) & (tmp_11_fu_799_p2 == 1'd1))) begin
        p_s_reg_400 <= part_V_fu_850_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((first_load_reg_1085 == 1'd1) & (tmp_4_fu_535_p2 == 1'd0)) | ((tmp_1_fu_514_p2 == 1'd1) & (tmp_4_fu_535_p2 == 1'd0))))) begin
        stride_reg_340 <= 3'd0;
    end else if ((~((gmem_out_BVALID == 1'b0) & (or_cond_reg_1178 == 1'd0)) & (1'b1 == ap_CS_fsm_state32))) begin
        stride_reg_340 <= stride_1_reg_1112;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd1))) begin
        t_V_reg_411 <= word_V_fu_905_p2;
    end else if (((1'b1 == ap_CS_fsm_state14) & (ap_phi_mux_empty_n_phi_fu_379_p8 == 1'd1) & (tmp_11_fu_799_p2 == 1'd1))) begin
        t_V_reg_411 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1215 == 1'd1))) begin
        val_assign_1_reg_439 <= stream_head_2_cast_reg_1234;
    end else if (((1'b1 == ap_CS_fsm_state14) & ((ap_phi_mux_empty_n_phi_fu_379_p8 == 1'd0) | (tmp_11_fu_799_p2 == 1'd0)))) begin
        val_assign_1_reg_439 <= stream_head_reg_1168;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (or_cond_fu_757_p2 == 1'd0))) begin
        bytes_to_write_reg_1182 <= bytes_to_write_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1215 == 1'd1))) begin
        data_V_load_reg_1239 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) & (ap_phi_mux_first_flag_1_phi_fu_475_p4 == 1'd1))) begin
        first <= first_new_1_reg_483;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        first_load_reg_1085 <= first;
        tmp_27_cast_reg_1078[27 : 0] <= tmp_27_cast_fu_506_p1[27 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        h_1_reg_1192 <= h_1_fu_804_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (first_load_reg_1085 == 1'd0))) begin
        i_1_reg_1092 <= i_1_fu_520_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        idx_cast5_reg_1163[2 : 1] <= idx_cast5_fu_669_p1[2 : 1];
idx_cast5_reg_1163[10 : 9] <= idx_cast5_fu_669_p1[10 : 9];
        or_cond_reg_1178 <= or_cond_fu_757_p2;
        stream_head_reg_1168 <= stream_head_fu_676_p3;
        words_reg_1173 <= words_fu_698_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_565_p2 == 1'd0))) begin
        idx_cast_reg_1130[2 : 1] <= idx_cast_fu_593_p1[2 : 1];
idx_cast_reg_1130[10 : 9] <= idx_cast_fu_593_p1[10 : 9];
        idx_reg_1125[2 : 1] <= idx_fu_581_p5[2 : 1];
idx_reg_1125[10 : 9] <= idx_fu_581_p5[10 : 9];
        output_V2_sum_reg_1135 <= output_V2_sum_fu_607_p2;
        tmp_13_reg_1117 <= tmp_13_fu_577_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_1102 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        local_words_0 <= useable_words_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_1102 == 2'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        local_words_1 <= useable_words_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_1102 == 2'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        local_words_2 <= useable_words_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_1102 == 2'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        local_words_3 <= useable_words_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        output_V2_sum3_reg_1250 <= output_V2_sum3_fu_988_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_fu_920_p2 == 1'd1))) begin
        output_V2_sum4_reg_1229 <= output_V2_sum4_fu_950_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_out_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        sel_tmp3_i_reg_1146 <= sel_tmp3_i_fu_652_p3;
        sel_tmp4_i_reg_1151 <= sel_tmp4_i_fu_660_p2;
        stream_tail_reg_1156 <= stream_tail_fu_665_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_fu_920_p2 == 1'd1))) begin
        stream_head_2_cast_reg_1234[8 : 0] <= stream_head_2_cast_fu_965_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stride_1_reg_1112 <= stride_1_fu_571_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_16_reg_1215 <= tmp_16_fu_920_p2;
        tmp_16_reg_1215_pp1_iter1_reg <= tmp_16_reg_1215;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        tmp_16_reg_1215_pp1_iter2_reg <= tmp_16_reg_1215_pp1_iter1_reg;
        tmp_16_reg_1215_pp1_iter3_reg <= tmp_16_reg_1215_pp1_iter2_reg;
        tmp_16_reg_1215_pp1_iter4_reg <= tmp_16_reg_1215_pp1_iter3_reg;
        tmp_16_reg_1215_pp1_iter5_reg <= tmp_16_reg_1215_pp1_iter4_reg;
        tmp_16_reg_1215_pp1_iter6_reg <= tmp_16_reg_1215_pp1_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_514_p2 == 1'd0) & (first_load_reg_1085 == 1'd0))) begin
        tmp_3_reg_1102 <= tmp_3_fu_531_p1;
    end
end

always @ (*) begin
    if ((tmp_16_fu_920_p2 == 1'd0)) begin
        ap_condition_pp1_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_11_fu_799_p2 == 1'd1))) begin
        if ((tmp_13_reg_1117 == 2'd0)) begin
            ap_phi_mux_empty_n_phi_fu_379_p8 = fifo_in_0_V_TVALID;
        end else if ((tmp_13_reg_1117 == 2'd1)) begin
            ap_phi_mux_empty_n_phi_fu_379_p8 = fifo_in_1_V_TVALID;
        end else if ((tmp_13_reg_1117 == 2'd2)) begin
            ap_phi_mux_empty_n_phi_fu_379_p8 = fifo_in_2_V_TVALID;
        end else if ((tmp_13_reg_1117 == 2'd3)) begin
            ap_phi_mux_empty_n_phi_fu_379_p8 = fifo_in_3_V_TVALID;
        end else begin
            ap_phi_mux_empty_n_phi_fu_379_p8 = 'bx;
        end
    end else begin
        ap_phi_mux_empty_n_phi_fu_379_p8 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) & (tmp_11_fu_799_p2 == 1'd1))) begin
        if ((tmp_13_reg_1117 == 2'd0)) begin
            ap_phi_mux_low_phi_fu_366_p8 = fifo_in_0_V_TDATA;
        end else if ((tmp_13_reg_1117 == 2'd1)) begin
            ap_phi_mux_low_phi_fu_366_p8 = fifo_in_1_V_TDATA;
        end else if ((tmp_13_reg_1117 == 2'd2)) begin
            ap_phi_mux_low_phi_fu_366_p8 = fifo_in_2_V_TDATA;
        end else if ((tmp_13_reg_1117 == 2'd3)) begin
            ap_phi_mux_low_phi_fu_366_p8 = fifo_in_3_V_TDATA;
        end else begin
            ap_phi_mux_low_phi_fu_366_p8 = 'bx;
        end
    end else begin
        ap_phi_mux_low_phi_fu_366_p8 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd1))) begin
        if ((tmp_13_reg_1117 == 2'd0)) begin
            ap_phi_mux_tmp_161_phi_fu_425_p8 = fifo_in_0_V_TDATA;
        end else if ((tmp_13_reg_1117 == 2'd1)) begin
            ap_phi_mux_tmp_161_phi_fu_425_p8 = fifo_in_1_V_TDATA;
        end else if ((tmp_13_reg_1117 == 2'd2)) begin
            ap_phi_mux_tmp_161_phi_fu_425_p8 = fifo_in_2_V_TDATA;
        end else if ((tmp_13_reg_1117 == 2'd3)) begin
            ap_phi_mux_tmp_161_phi_fu_425_p8 = fifo_in_3_V_TDATA;
        end else begin
            ap_phi_mux_tmp_161_phi_fu_425_p8 = 'bx;
        end
    end else begin
        ap_phi_mux_tmp_161_phi_fu_425_p8 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1215 == 1'd1) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_val_assign_1_phi_fu_442_p4 = stream_head_2_cast_reg_1234;
    end else begin
        ap_phi_mux_val_assign_1_phi_fu_442_p4 = val_assign_1_reg_439;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_out_ARREADY = gmem_out_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_out_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_out_AWREADY = gmem_out_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_out_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_out_WREADY = gmem_out_WREADY;
    end else begin
        ap_sig_ioackin_gmem_out_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        data_V_address0 = tmp_20_fu_945_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        data_V_address0 = tmp_17_fu_911_p1;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_1117 == 2'd0) & (1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd1))) begin
        fifo_in_0_V_TDATA_blk_n = fifo_in_0_V_TVALID;
    end else begin
        fifo_in_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_13_reg_1117 == 2'd0) & (1'b1 == ap_CS_fsm_state14) & (tmp_11_fu_799_p2 == 1'd1)) | (~(((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0))) & (ap_predicate_op190_read_state15 == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        fifo_in_0_V_TREADY = 1'b1;
    end else begin
        fifo_in_0_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_1117 == 2'd1) & (1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd1))) begin
        fifo_in_1_V_TDATA_blk_n = fifo_in_1_V_TVALID;
    end else begin
        fifo_in_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_13_reg_1117 == 2'd1) & (1'b1 == ap_CS_fsm_state14) & (tmp_11_fu_799_p2 == 1'd1)) | (~(((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0))) & (ap_predicate_op188_read_state15 == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        fifo_in_1_V_TREADY = 1'b1;
    end else begin
        fifo_in_1_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_1117 == 2'd2) & (1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd1))) begin
        fifo_in_2_V_TDATA_blk_n = fifo_in_2_V_TVALID;
    end else begin
        fifo_in_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_13_reg_1117 == 2'd2) & (1'b1 == ap_CS_fsm_state14) & (tmp_11_fu_799_p2 == 1'd1)) | (~(((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0))) & (ap_predicate_op186_read_state15 == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        fifo_in_2_V_TREADY = 1'b1;
    end else begin
        fifo_in_2_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_13_reg_1117 == 2'd3) & (1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd1))) begin
        fifo_in_3_V_TDATA_blk_n = fifo_in_3_V_TVALID;
    end else begin
        fifo_in_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp_13_reg_1117 == 2'd3) & (1'b1 == ap_CS_fsm_state14) & (tmp_11_fu_799_p2 == 1'd1)) | (~(((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0))) & (ap_predicate_op192_read_state15 == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        fifo_in_3_V_TREADY = 1'b1;
    end else begin
        fifo_in_3_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_out_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        gmem_out_ARVALID = 1'b1;
    end else begin
        gmem_out_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state26)) begin
            gmem_out_AWADDR = output_V2_sum3_cast_fu_993_p1;
        end else if ((1'b1 == ap_condition_685)) begin
            gmem_out_AWADDR = output_V2_sum4_cast_fu_969_p1;
        end else begin
            gmem_out_AWADDR = 'bx;
        end
    end else begin
        gmem_out_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_out_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state26)) | ((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_gmem_out_AWREADY == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1215 == 1'd1)))) begin
        gmem_out_AWVALID = 1'b1;
    end else begin
        gmem_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((gmem_out_BVALID == 1'b0) & (or_cond_reg_1178 == 1'd0)) & (1'b1 == ap_CS_fsm_state32) & (or_cond_reg_1178 == 1'd0)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter7 == 1'b1) & (tmp_16_reg_1215_pp1_iter6_reg == 1'd1)))) begin
        gmem_out_BREADY = 1'b1;
    end else begin
        gmem_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_out_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        gmem_out_RREADY = 1'b1;
    end else begin
        gmem_out_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            gmem_out_WDATA = p_1_fu_1003_p1;
        end else if ((1'b1 == ap_condition_695)) begin
            gmem_out_WDATA = data_V_load_reg_1239;
        end else begin
            gmem_out_WDATA = 'bx;
        end
    end else begin
        gmem_out_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_out_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27)) | ((1'b0 == ap_block_pp1_stage0_01001) & (ap_reg_ioackin_gmem_out_WREADY == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_16_reg_1215_pp1_iter1_reg == 1'd1)))) begin
        gmem_out_WVALID = 1'b1;
    end else begin
        gmem_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gmem_out_blk_n_AR = m_axi_gmem_out_ARREADY;
    end else begin
        gmem_out_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1215 == 1'd1) & (1'b0 == ap_block_pp1_stage0)))) begin
        gmem_out_blk_n_AW = m_axi_gmem_out_AWREADY;
    end else begin
        gmem_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state32) & (or_cond_reg_1178 == 1'd0)) | ((ap_enable_reg_pp1_iter7 == 1'b1) & (tmp_16_reg_1215_pp1_iter6_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)))) begin
        gmem_out_blk_n_B = m_axi_gmem_out_BVALID;
    end else begin
        gmem_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        gmem_out_blk_n_R = m_axi_gmem_out_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_16_reg_1215_pp1_iter1_reg == 1'd1) & (1'b0 == ap_block_pp1_stage0)))) begin
        gmem_out_blk_n_W = m_axi_gmem_out_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        useable_words_ce0 = 1'b1;
    end else begin
        useable_words_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (((tmp_4_fu_535_p2 == 1'd1) & (first_load_reg_1085 == 1'd1)) | ((tmp_4_fu_535_p2 == 1'd1) & (tmp_1_fu_514_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if (((1'b1 == ap_CS_fsm_state2) & (((first_load_reg_1085 == 1'd1) & (tmp_4_fu_535_p2 == 1'd0)) | ((tmp_1_fu_514_p2 == 1'd1) & (tmp_4_fu_535_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_565_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_gmem_out_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_out_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (or_cond_fu_757_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & ((ap_phi_mux_empty_n_phi_fu_379_p8 == 1'd0) | (tmp_11_fu_799_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if ((~(((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if ((~(((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state15) & (tmp_14_fu_858_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_16_fu_920_p2 == 1'd0)) & ~((ap_enable_reg_pp1_iter6 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_16_fu_920_p2 == 1'd0)) | ((ap_enable_reg_pp1_iter6 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((ap_sig_ioackin_gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((ap_sig_ioackin_gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if ((~((gmem_out_BVALID == 1'b0) & (or_cond_reg_1178 == 1'd0)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (exitcond_fu_1032_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = ((gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b1) & (tmp_16_reg_1215_pp1_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b1) & (tmp_16_reg_1215_pp1_iter6_reg == 1'd1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b1) & (tmp_16_reg_1215_pp1_iter6_reg == 1'd1)) | ((1'b1 == ap_block_state19_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state18_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state15 = (((ap_predicate_op192_read_state15 == 1'b1) & (fifo_in_3_V_TVALID == 1'b0)) | ((ap_predicate_op190_read_state15 == 1'b1) & (fifo_in_0_V_TVALID == 1'b0)) | ((ap_predicate_op188_read_state15 == 1'b1) & (fifo_in_1_V_TVALID == 1'b0)) | ((ap_predicate_op186_read_state15 == 1'b1) & (fifo_in_2_V_TVALID == 1'b0)));
end

assign ap_block_state17_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state18_io = ((ap_sig_ioackin_gmem_out_AWREADY == 1'b0) & (tmp_16_reg_1215 == 1'd1));
end

assign ap_block_state18_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = ((ap_sig_ioackin_gmem_out_WREADY == 1'b0) & (tmp_16_reg_1215_pp1_iter1_reg == 1'd1));
end

assign ap_block_state19_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp1_stage0_iter7 = ((gmem_out_BVALID == 1'b0) & (tmp_16_reg_1215_pp1_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_block_state32 = ((gmem_out_BVALID == 1'b0) & (or_cond_reg_1178 == 1'd0));
end

always @ (*) begin
    ap_condition_685 = ((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_16_reg_1215 == 1'd1));
end

always @ (*) begin
    ap_condition_695 = ((1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_16_reg_1215_pp1_iter1_reg == 1'd1));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_first_flag_1_phi_fu_475_p4 = first_flag_1_reg_471;

always @ (*) begin
    ap_predicate_op186_read_state15 = ((tmp_13_reg_1117 == 2'd2) & (tmp_14_fu_858_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op188_read_state15 = ((tmp_13_reg_1117 == 2'd1) & (tmp_14_fu_858_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op190_read_state15 = ((tmp_13_reg_1117 == 2'd0) & (tmp_14_fu_858_p2 == 1'd1));
end

always @ (*) begin
    ap_predicate_op192_read_state15 = ((tmp_13_reg_1117 == 2'd3) & (tmp_14_fu_858_p2 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bytes_to_write_2_fu_794_p1 = h_reg_351;

assign bytes_to_write_fu_789_p2 = (p_neg150_pn_fu_781_p3 + stream_tail_reg_1156);

assign exitcond1_fu_565_p2 = ((stride_reg_340 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_1032_p2 = ((i1_reg_460 == 3'd4) ? 1'b1 : 1'b0);

assign first_load_load_fu_510_p1 = first;

assign gmem_out_ARADDR = output_V2_sum_cast_fu_612_p1;

assign h2_cast_fu_916_p1 = h2_reg_449;

assign h_1_fu_804_p2 = (h_reg_351 + 15'd1);

assign h_2_fu_926_p2 = (h2_reg_449 + 15'd1);

assign hi_fu_863_p1 = ap_phi_mux_tmp_161_phi_fu_425_p8[31:0];

assign hi_p_V_fu_867_p1 = hi_fu_863_p1;

assign i_1_fu_520_p2 = (i_reg_316 + 3'd1);

assign i_2_fu_1038_p2 = (i1_reg_460 + 3'd1);

assign idx_cast5_fu_669_p1 = idx_reg_1125;

assign idx_cast_fu_593_p1 = idx_fu_581_p5;

assign idx_fu_581_p5 = {{{{tmp_13_fu_577_p1}, {6'd0}}, {tmp_13_fu_577_p1}}, {1'd0}};

assign op2_assign_fu_875_p5 = t_V_reg_411[1:0];

assign or_cond_fu_757_p2 = (tmp_9_fu_741_p2 | tmp_5_fu_751_p2);

assign output_V2_sum3_cast_fu_993_p1 = output_V2_sum3_reg_1250;

assign output_V2_sum3_fu_988_p2 = (tmp_25_cast_fu_984_p1 + tmp_27_cast_reg_1078);

assign output_V2_sum4_cast_fu_969_p1 = output_V2_sum4_reg_1229;

assign output_V2_sum4_fu_950_p2 = (tmp_27_cast_reg_1078 + tmp_21_cast_fu_941_p1);

assign output_V2_sum_cast_fu_612_p1 = output_V2_sum_reg_1135;

assign output_V2_sum_fu_607_p2 = (tmp_27_cast_reg_1078 + tmp_3_cast_fu_603_p1);

assign p_1_fu_1003_p1 = val_assign_1_reg_439;

assign p_neg150_pn_fu_781_p3 = ((tmp_7_fu_763_p2[0:0] === 1'b1) ? p_neg_fu_769_p2 : tmp_10_fu_775_p2);

assign p_neg_fu_769_p2 = (stream_head_fu_676_p3 ^ 16'd65535);

assign part_V_1_fu_899_p2 = (r_V_fu_893_p2 | p_s_reg_400);

assign part_V_fu_850_p1 = ap_phi_mux_low_phi_fu_366_p8;

assign r_V_fu_893_p2 = hi_p_V_fu_867_p1 << tmp_24_fu_889_p1;

assign sel_tmp1_i_fu_639_p3 = ((sel_tmp_i_fu_634_p2[0:0] === 1'b1) ? head_0 : head_3);

assign sel_tmp2_i_fu_647_p2 = ((tmp_13_reg_1117 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp3_i_fu_652_p3 = ((sel_tmp2_i_fu_647_p2[0:0] === 1'b1) ? head_1 : sel_tmp1_i_fu_639_p3);

assign sel_tmp4_i_fu_660_p2 = ((tmp_13_reg_1117 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp_i_fu_634_p2 = ((tmp_13_reg_1117 == 2'd0) ? 1'b1 : 1'b0);

assign stream_head_1_fu_959_p2 = (9'd1 + tmp_29_fu_955_p1);

assign stream_head_2_cast_fu_965_p1 = stream_head_1_fu_959_p2;

assign stream_head_fu_676_p3 = ((sel_tmp4_i_reg_1151[0:0] === 1'b1) ? head_2 : sel_tmp3_i_reg_1146);

assign stream_tail_fu_665_p1 = gmem_out_RDATA[15:0];

assign stride_1_fu_571_p2 = (stride_reg_340 + 3'd1);

assign tmp_10_cast_fu_747_p1 = tmp_8_cast4_fu_725_p2;

assign tmp_10_fu_775_p2 = (16'd511 - stream_head_fu_676_p3);

assign tmp_11_fu_799_p2 = (($signed(bytes_to_write_2_fu_794_p1) < $signed(bytes_to_write_reg_1182)) ? 1'b1 : 1'b0);

assign tmp_13_fu_577_p1 = stride_reg_340[1:0];

assign tmp_14_fu_858_p2 = ((tmp_19_cast_fu_854_p1 < words_reg_1173) ? 1'b1 : 1'b0);

assign tmp_16_fu_920_p2 = (($signed(h2_cast_fu_916_p1) < $signed(bytes_to_write_1_reg_390)) ? 1'b1 : 1'b0);

assign tmp_17_fu_911_p1 = h_reg_351;

assign tmp_19_cast_fu_854_p1 = t_V_reg_411;

assign tmp_19_fu_936_p2 = (tmp_28_cast_fu_932_p1 + idx_cast5_reg_1163);

assign tmp_1_fu_514_p2 = ((i_reg_316 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_20_fu_945_p1 = h2_reg_449;

assign tmp_21_cast_fu_941_p1 = tmp_19_fu_936_p2;

assign tmp_21_fu_715_p1 = stream_head_fu_676_p3[8:0];

assign tmp_22_fu_979_p2 = (idx_cast_reg_1130 + 12'd513);

assign tmp_24_fu_889_p1 = op2_assign_fu_875_p6;

assign tmp_25_cast_fu_984_p1 = tmp_22_fu_979_p2;

assign tmp_27_cast_fu_506_p1 = tmp_fu_496_p4;

assign tmp_28_cast_fu_932_p1 = ap_phi_mux_val_assign_1_phi_fu_442_p4;

assign tmp_29_fu_955_p1 = ap_phi_mux_val_assign_1_phi_fu_442_p4[8:0];

assign tmp_2_fu_526_p1 = i_reg_316;

assign tmp_3_cast_fu_603_p1 = tmp_s_fu_597_p2;

assign tmp_3_fu_531_p1 = i_reg_316[1:0];

assign tmp_4_fu_535_p2 = ((reset == 8'd1) ? 1'b1 : 1'b0);

assign tmp_5_cast3_fu_735_p1 = stream_tail_reg_1156;

assign tmp_5_cast_fu_738_p1 = stream_tail_reg_1156;

assign tmp_5_fu_751_p2 = ((tmp_10_cast_fu_747_p1 == tmp_5_cast3_fu_735_p1) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_711_p1 = stream_head_fu_676_p3;

assign tmp_6_fu_1044_p1 = i1_reg_460[1:0];

assign tmp_7_fu_763_p2 = ((tmp_8_fu_719_p2 < tmp_5_cast3_fu_735_p1) ? 1'b1 : 1'b0);

assign tmp_8_cast4_fu_725_p2 = (9'd1 + tmp_21_fu_715_p1);

assign tmp_8_cast_fu_731_p1 = tmp_8_fu_719_p2;

assign tmp_8_fu_719_p2 = (17'd1 + tmp_6_cast_fu_711_p1);

assign tmp_9_fu_741_p2 = ((tmp_8_cast_fu_731_p1 == tmp_5_cast_fu_738_p1) ? 1'b1 : 1'b0);

assign tmp_fu_496_p4 = {{output_V[31:4]}};

assign tmp_s_fu_597_p2 = (12'd512 + idx_cast_fu_593_p1);

assign useable_words_address0 = tmp_2_fu_526_p1;

assign word_V_fu_905_p2 = (4'd1 + t_V_reg_411);

always @ (posedge ap_clk) begin
    tmp_27_cast_reg_1078[28] <= 1'b0;
    idx_reg_1125[0] <= 1'b0;
    idx_reg_1125[8:3] <= 6'b000000;
    idx_cast_reg_1130[0] <= 1'b0;
    idx_cast_reg_1130[8:3] <= 6'b000000;
    idx_cast_reg_1130[11] <= 1'b0;
    idx_cast5_reg_1163[0] <= 1'b0;
    idx_cast5_reg_1163[8:3] <= 6'b000000;
    idx_cast5_reg_1163[16:11] <= 6'b000000;
    stream_head_2_cast_reg_1234[15:9] <= 7'b0000000;
end

endmodule //circ_buff_write_many128
