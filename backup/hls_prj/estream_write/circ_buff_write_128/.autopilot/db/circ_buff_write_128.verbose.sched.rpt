

================================================================
== Vivado HLS Report for 'circ_buff_write_128'
================================================================
* Date:           Sat Apr  3 20:05:42 2021

* Version:        2018.3 (Build 2405991 on Thu Dec 06 23:56:15 MST 2018)
* Project:        estream_write
* Solution:       circ_buff_write_128
* Product family: zynquplus
* Target device:  xczu3eg-sbva484-1-e


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   3.33|     3.154|        0.42|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |    ?|    ?|    ?|    ?|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +--------------+-----+-------+----------+-----------+-----------+-----------+----------+
        |              |   Latency   | Iteration|  Initiation Interval  |    Trip   |          |
        |   Loop Name  | min |  max  |  Latency |  achieved |   target  |   Count   | Pipelined|
        +--------------+-----+-------+----------+-----------+-----------+-----------+----------+
        |- fifo_read   |    ?|      ?|         2|          -|          -|          ?|    no    |
        |- gmem_write  |    0|  32773|         8|          1|          1| 0 ~ 32767 |    yes   |
        +--------------+-----+-------+----------+-----------+-----------+-----------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 8


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 29
* Pipeline : 1
  Pipeline-0 : II = 1, D = 8, States = { 14 15 16 17 18 19 20 21 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / (!tmp)
	29  / (tmp)
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	29  / (or_cond)
	11  / (!or_cond)
11 --> 
	13  / (!empty_n) | (!tmp_s)
	12  / (tmp_s & empty_n)
12 --> 
	11  / true
13 --> 
	14  / true
14 --> 
	22  / (!tmp_12)
	15  / (tmp_12)
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	14  / true
22 --> 
	23  / true
23 --> 
	24  / true
24 --> 
	25  / true
25 --> 
	26  / true
26 --> 
	27  / true
27 --> 
	28  / true
28 --> 
	29  / true
29 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 2.29>
ST_1 : Operation 30 [1/1] (1.00ns)   --->   "%output_V_read = call i32 @_ssdm_op_Read.s_axilite.i32(i32 %output_V)"   --->   Operation 30 'read' 'output_V_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 31 [1/1] (0.00ns)   --->   "%tmp_1 = call i28 @_ssdm_op_PartSelect.i28.i32.i32.i32(i32 %output_V_read, i32 4, i32 31)"   --->   Operation 31 'partselect' 'tmp_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 32 [1/1] (0.00ns)   --->   "%tmp_17_cast = zext i28 %tmp_1 to i29"   --->   Operation 32 'zext' 'tmp_17_cast' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i128* %gmem_out), !map !107"   --->   Operation 33 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %stream_in_V), !map !113"   --->   Operation 34 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %reset), !map !117"   --->   Operation 35 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([20 x i8]* @circ_buff_write_128_s) nounwind"   --->   Operation 36 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%data_V = alloca [512 x i96], align 8" [estream_write/c_src/circ_buff_write_128.cpp:36]   --->   Operation 37 'alloca' 'data_V' <Predicate = true> <Delay = 0.00> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.35> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 96> <Depth = 512> <RAM>
ST_1 : Operation 38 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i128* %gmem_out, [6 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [9 x i8]* @p_str2, [6 x i8]* @p_str3, [1 x i8]* @p_str1, i32 16, i32 16, i32 16, i32 16, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [estream_write/c_src/circ_buff_write_128.cpp:20]   --->   Operation 38 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 39 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 %output_V, [10 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [8 x i8]* @p_str5, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [estream_write/c_src/circ_buff_write_128.cpp:22]   --->   Operation 39 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 40 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i8* %reset, [10 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [8 x i8]* @p_str5, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [estream_write/c_src/circ_buff_write_128.cpp:23]   --->   Operation 40 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 41 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [8 x i8]* @p_str5, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [estream_write/c_src/circ_buff_write_128.cpp:24]   --->   Operation 41 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 42 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %stream_in_V, [5 x i8]* @p_str6, i32 1, i32 1, [5 x i8]* @p_str7, i32 0, i32 0, [10 x i8]* @p_str8, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [estream_write/c_src/circ_buff_write_128.cpp:28]   --->   Operation 42 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 43 [1/1] (1.00ns)   --->   "%reset_read = call i8 @_ssdm_op_Read.s_axilite.volatile.i8P(i8* %reset)" [estream_write/c_src/circ_buff_write_128.cpp:47]   --->   Operation 43 'read' 'reset_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 44 [1/1] (0.85ns)   --->   "%tmp = icmp eq i8 %reset_read, 1" [estream_write/c_src/circ_buff_write_128.cpp:47]   --->   Operation 44 'icmp' 'tmp' <Predicate = true> <Delay = 0.85> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 45 [1/1] (0.00ns)   --->   "br i1 %tmp, label %._crit_edge533, label %0" [estream_write/c_src/circ_buff_write_128.cpp:47]   --->   Operation 45 'br' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 46 [1/1] (1.15ns)   --->   "%output_V2_sum = add i29 %tmp_17_cast, 512" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 46 'add' 'output_V2_sum' <Predicate = (!tmp)> <Delay = 1.15> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 2 <SV = 1> <Delay = 2.91>
ST_2 : Operation 47 [1/1] (0.00ns)   --->   "%output_V2_sum_cast = zext i29 %output_V2_sum to i64" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 47 'zext' 'output_V2_sum_cast' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 48 [1/1] (0.00ns)   --->   "%gmem_out_addr = getelementptr i128* %gmem_out, i64 %output_V2_sum_cast" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 48 'getelementptr' 'gmem_out_addr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 49 [7/7] (2.91ns)   --->   "%stream_tail_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i128P(i128* %gmem_out_addr, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 49 'readreq' 'stream_tail_V_req' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 3 <SV = 2> <Delay = 2.91>
ST_3 : Operation 50 [6/7] (2.91ns)   --->   "%stream_tail_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i128P(i128* %gmem_out_addr, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 50 'readreq' 'stream_tail_V_req' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 4 <SV = 3> <Delay = 2.91>
ST_4 : Operation 51 [5/7] (2.91ns)   --->   "%stream_tail_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i128P(i128* %gmem_out_addr, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 51 'readreq' 'stream_tail_V_req' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 5 <SV = 4> <Delay = 2.91>
ST_5 : Operation 52 [4/7] (2.91ns)   --->   "%stream_tail_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i128P(i128* %gmem_out_addr, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 52 'readreq' 'stream_tail_V_req' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 6 <SV = 5> <Delay = 2.91>
ST_6 : Operation 53 [3/7] (2.91ns)   --->   "%stream_tail_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i128P(i128* %gmem_out_addr, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 53 'readreq' 'stream_tail_V_req' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 7 <SV = 6> <Delay = 2.91>
ST_7 : Operation 54 [2/7] (2.91ns)   --->   "%stream_tail_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i128P(i128* %gmem_out_addr, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 54 'readreq' 'stream_tail_V_req' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 8 <SV = 7> <Delay = 2.91>
ST_8 : Operation 55 [1/7] (2.91ns)   --->   "%stream_tail_V_req = call i1 @_ssdm_op_ReadReq.m_axi.i128P(i128* %gmem_out_addr, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 55 'readreq' 'stream_tail_V_req' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 9 <SV = 8> <Delay = 2.91>
ST_9 : Operation 56 [1/1] (2.91ns)   --->   "%stream_tail_V = call i128 @_ssdm_op_Read.m_axi.volatile.i128P(i128* %gmem_out_addr)" [estream_write/c_src/circ_buff_write_128.cpp:54]   --->   Operation 56 'read' 'stream_tail_V' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_9 : Operation 57 [1/1] (0.00ns)   --->   "%stream_head_V_load = load i9* @stream_head_V, align 2"   --->   Operation 57 'load' 'stream_head_V_load' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 58 [1/1] (0.00ns)   --->   "%lhs_V_cast = zext i9 %stream_head_V_load to i10" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 58 'zext' 'lhs_V_cast' <Predicate = true> <Delay = 0.00>
ST_9 : Operation 59 [1/1] (0.92ns)   --->   "%ret_V = add i10 %lhs_V_cast, 1" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 59 'add' 'ret_V' <Predicate = true> <Delay = 0.92> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 10 <SV = 9> <Delay = 3.15>
ST_10 : Operation 60 [1/1] (0.92ns)   --->   "%ret_V_2_cast6 = add i9 %stream_head_V_load, 1" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 60 'add' 'ret_V_2_cast6' <Predicate = true> <Delay = 0.92> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 61 [1/1] (0.00ns)   --->   "%ret_V_2_cast5 = zext i10 %ret_V to i128" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 61 'zext' 'ret_V_2_cast5' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 62 [1/1] (0.00ns)   --->   "%ret_V_2_cast = zext i10 %ret_V to i129" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 62 'zext' 'ret_V_2_cast' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 63 [1/1] (0.00ns)   --->   "%tmp_3_cast = zext i128 %stream_tail_V to i129" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 63 'zext' 'tmp_3_cast' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 64 [1/1] (1.46ns)   --->   "%tmp_4 = icmp eq i129 %ret_V_2_cast, %tmp_3_cast" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 64 'icmp' 'tmp_4' <Predicate = true> <Delay = 1.46> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 65 [1/1] (0.00ns)   --->   "%ret_V_cast = zext i9 %ret_V_2_cast6 to i129" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 65 'zext' 'ret_V_cast' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 66 [1/1] (1.46ns)   --->   "%tmp_6 = icmp eq i129 %ret_V_cast, %tmp_3_cast" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 66 'icmp' 'tmp_6' <Predicate = true> <Delay = 1.46> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 67 [1/1] (0.33ns)   --->   "%or_cond = or i1 %tmp_4, %tmp_6" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 67 'or' 'or_cond' <Predicate = true> <Delay = 0.33> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 68 [1/1] (0.00ns)   --->   "br i1 %or_cond, label %.loopexit528, label %1" [estream_write/c_src/circ_buff_write_128.cpp:59]   --->   Operation 68 'br' <Predicate = true> <Delay = 0.00>
ST_10 : Operation 69 [1/1] (1.46ns)   --->   "%tmp_7 = icmp ult i128 %ret_V_2_cast5, %stream_tail_V" [estream_write/c_src/circ_buff_write_128.cpp:74]   --->   Operation 69 'icmp' 'tmp_7' <Predicate = (!or_cond)> <Delay = 1.46> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_10 : Operation 70 [1/1] (0.00ns)   --->   "%tmp_8 = zext i9 %stream_head_V_load to i16" [estream_write/c_src/circ_buff_write_128.cpp:76]   --->   Operation 70 'zext' 'tmp_8' <Predicate = (!or_cond)> <Delay = 0.00>
ST_10 : Operation 71 [1/1] (0.00ns)   --->   "%tmp_2 = trunc i128 %stream_tail_V to i16" [estream_write/c_src/circ_buff_write_128.cpp:76]   --->   Operation 71 'trunc' 'tmp_2' <Predicate = (!or_cond)> <Delay = 0.00>
ST_10 : Operation 72 [1/1] (0.47ns)   --->   "%p_neg1_pn_v_cast_cast = select i1 %tmp_7, i16 -1, i16 511" [estream_write/c_src/circ_buff_write_128.cpp:74]   --->   Operation 72 'select' 'p_neg1_pn_v_cast_cast' <Predicate = (!or_cond)> <Delay = 0.47> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_10 : Operation 73 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%p_neg1_pn = add i16 %p_neg1_pn_v_cast_cast, %tmp_2" [estream_write/c_src/circ_buff_write_128.cpp:74]   --->   Operation 73 'add' 'p_neg1_pn' <Predicate = (!or_cond)> <Delay = 0.00> <Core = "TAddSub">   --->   Core 84 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_10 : Operation 74 [1/1] (0.82ns) (root node of TernaryAdder)   --->   "%bytes_to_write = sub i16 %p_neg1_pn, %tmp_8" [estream_write/c_src/circ_buff_write_128.cpp:76]   --->   Operation 74 'sub' 'bytes_to_write' <Predicate = (!or_cond)> <Delay = 0.82> <Core = "TAddSub">   --->   Core 84 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.41> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_10 : Operation 75 [1/1] (0.75ns)   --->   "br label %2" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 75 'br' <Predicate = (!or_cond)> <Delay = 0.75>

State 11 <SV = 10> <Delay = 1.62>
ST_11 : Operation 76 [1/1] (0.00ns)   --->   "%h = phi i15 [ 0, %1 ], [ %h_1, %4 ]"   --->   Operation 76 'phi' 'h' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 77 [1/1] (0.00ns)   --->   "%bytes_to_write_2 = zext i15 %h to i16" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 77 'zext' 'bytes_to_write_2' <Predicate = true> <Delay = 0.00>
ST_11 : Operation 78 [1/1] (0.86ns)   --->   "%tmp_s = icmp slt i16 %bytes_to_write_2, %bytes_to_write" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 78 'icmp' 'tmp_s' <Predicate = true> <Delay = 0.86> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 79 [1/1] (1.00ns)   --->   "%h_1 = add i15 %h, 1" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 79 'add' 'h_1' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_11 : Operation 80 [1/1] (0.75ns)   --->   "br i1 %tmp_s, label %3, label %.loopexit" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 80 'br' <Predicate = true> <Delay = 0.75>
ST_11 : Operation 81 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([10 x i8]* @p_str9) nounwind" [estream_write/c_src/circ_buff_write_128.cpp:86]   --->   Operation 81 'specloopname' <Predicate = (tmp_s)> <Delay = 0.00>
ST_11 : Operation 82 [1/1] (0.00ns)   --->   "%stream_in_V_read = call { i1, i64 } @_ssdm_op_NbRead.axis.volatile.i64P(i64* %stream_in_V)" [estream_write/c_src/circ_buff_write_128.cpp:89]   --->   Operation 82 'nbread' 'stream_in_V_read' <Predicate = (tmp_s)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_11 : Operation 83 [1/1] (0.00ns)   --->   "%empty_n = extractvalue { i1, i64 } %stream_in_V_read, 0" [estream_write/c_src/circ_buff_write_128.cpp:89]   --->   Operation 83 'extractvalue' 'empty_n' <Predicate = (tmp_s)> <Delay = 0.00>
ST_11 : Operation 84 [1/1] (0.00ns)   --->   "%tmp_22 = extractvalue { i1, i64 } %stream_in_V_read, 1" [estream_write/c_src/circ_buff_write_128.cpp:89]   --->   Operation 84 'extractvalue' 'tmp_22' <Predicate = (tmp_s)> <Delay = 0.00>
ST_11 : Operation 85 [1/1] (0.75ns)   --->   "br i1 %empty_n, label %4, label %.loopexit" [estream_write/c_src/circ_buff_write_128.cpp:89]   --->   Operation 85 'br' <Predicate = (tmp_s)> <Delay = 0.75>

State 12 <SV = 11> <Delay = 1.79>
ST_12 : Operation 86 [1/1] (0.00ns)   --->   "%tmp_20 = call i64 @_ssdm_op_Read.axis.volatile.i64P(i64* %stream_in_V)" [estream_write/c_src/circ_buff_write_128.cpp:95]   --->   Operation 86 'read' 'tmp_20' <Predicate = true> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_12 : Operation 87 [1/1] (0.00ns) (grouped into LUT with out node tmp_3)   --->   "%tmp_21 = shl i64 %tmp_20, 32" [estream_write/c_src/circ_buff_write_128.cpp:95]   --->   Operation 87 'shl' 'tmp_21' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 88 [1/1] (0.44ns) (out node of the LUT)   --->   "%tmp_3 = or i64 %tmp_22, %tmp_21" [estream_write/c_src/circ_buff_write_128.cpp:89]   --->   Operation 88 'or' 'tmp_3' <Predicate = true> <Delay = 0.44> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.44> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_12 : Operation 89 [1/1] (0.00ns)   --->   "%tmp_5 = call i32 @_ssdm_op_PartSelect.i32.i64.i32.i32(i64 %tmp_20, i32 32, i32 63)" [estream_write/c_src/circ_buff_write_128.cpp:95]   --->   Operation 89 'partselect' 'tmp_5' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 90 [1/1] (0.00ns)   --->   "%tmp_10 = call i96 @_ssdm_op_BitConcatenate.i96.i32.i64(i32 %tmp_5, i64 %tmp_3)" [estream_write/c_src/circ_buff_write_128.cpp:95]   --->   Operation 90 'bitconcatenate' 'tmp_10' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 91 [1/1] (0.00ns)   --->   "%tmp_11 = zext i15 %h to i64" [estream_write/c_src/circ_buff_write_128.cpp:105]   --->   Operation 91 'zext' 'tmp_11' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 92 [1/1] (0.00ns)   --->   "%data_V_addr = getelementptr [512 x i96]* %data_V, i64 0, i64 %tmp_11" [estream_write/c_src/circ_buff_write_128.cpp:105]   --->   Operation 92 'getelementptr' 'data_V_addr' <Predicate = true> <Delay = 0.00>
ST_12 : Operation 93 [1/1] (1.35ns)   --->   "store i96 %tmp_10, i96* %data_V_addr, align 8" [estream_write/c_src/circ_buff_write_128.cpp:105]   --->   Operation 93 'store' <Predicate = true> <Delay = 1.35> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.35> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 96> <Depth = 512> <RAM>
ST_12 : Operation 94 [1/1] (0.00ns)   --->   "br label %2" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 94 'br' <Predicate = true> <Delay = 0.00>

State 13 <SV = 11> <Delay = 1.78>
ST_13 : Operation 95 [1/1] (0.00ns)   --->   "%bytes_to_write_1 = phi i16 [ %bytes_to_write_2, %3 ], [ %bytes_to_write, %2 ]"   --->   Operation 95 'phi' 'bytes_to_write_1' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 96 [1/1] (0.86ns)   --->   "%tmp_9 = icmp sgt i16 %bytes_to_write_1, 0" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 96 'icmp' 'tmp_9' <Predicate = true> <Delay = 0.86> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 97 [1/1] (0.00ns) (grouped into LUT with out node tmp_18)   --->   "%tmp_14 = trunc i16 %bytes_to_write_1 to i9" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 97 'trunc' 'tmp_14' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 98 [1/1] (0.00ns) (grouped into LUT with out node tmp_18)   --->   "%tmp_17 = select i1 %tmp_9, i9 %tmp_14, i9 0" [estream_write/c_src/circ_buff_write_128.cpp:85]   --->   Operation 98 'select' 'tmp_17' <Predicate = true> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.45> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_13 : Operation 99 [1/1] (0.92ns) (out node of the LUT)   --->   "%tmp_18 = add i9 %tmp_17, %stream_head_V_load" [estream_write/c_src/circ_buff_write_128.cpp:109]   --->   Operation 99 'add' 'tmp_18' <Predicate = true> <Delay = 0.92> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_13 : Operation 100 [1/1] (0.00ns)   --->   "%tmp_19 = zext i9 %tmp_18 to i128" [estream_write/c_src/circ_buff_write_128.cpp:109]   --->   Operation 100 'zext' 'tmp_19' <Predicate = true> <Delay = 0.00>
ST_13 : Operation 101 [1/1] (0.75ns)   --->   "br label %5" [estream_write/c_src/circ_buff_write_128.cpp:109]   --->   Operation 101 'br' <Predicate = true> <Delay = 0.75>

State 14 <SV = 12> <Delay = 1.35>
ST_14 : Operation 102 [1/1] (0.00ns)   --->   "%t_V = phi i9 [ %stream_head_V_load, %.loopexit ], [ %tmp_16, %6 ]" [estream_write/c_src/circ_buff_write_128.cpp:115]   --->   Operation 102 'phi' 't_V' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 103 [1/1] (0.00ns)   --->   "%h1 = phi i15 [ 0, %.loopexit ], [ %h_2, %6 ]"   --->   Operation 103 'phi' 'h1' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 104 [1/1] (0.00ns)   --->   "%h1_cast = zext i15 %h1 to i16" [estream_write/c_src/circ_buff_write_128.cpp:109]   --->   Operation 104 'zext' 'h1_cast' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 105 [1/1] (0.86ns)   --->   "%tmp_12 = icmp slt i16 %h1_cast, %bytes_to_write_1" [estream_write/c_src/circ_buff_write_128.cpp:109]   --->   Operation 105 'icmp' 'tmp_12' <Predicate = true> <Delay = 0.86> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 106 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 0, i64 32767, i64 0)"   --->   Operation 106 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 107 [1/1] (1.00ns)   --->   "%h_2 = add i15 %h1, 1" [estream_write/c_src/circ_buff_write_128.cpp:109]   --->   Operation 107 'add' 'h_2' <Predicate = true> <Delay = 1.00> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 108 [1/1] (0.00ns)   --->   "br i1 %tmp_12, label %6, label %7" [estream_write/c_src/circ_buff_write_128.cpp:109]   --->   Operation 108 'br' <Predicate = true> <Delay = 0.00>
ST_14 : Operation 109 [1/1] (0.00ns)   --->   "%tmp_14_cast = zext i9 %t_V to i29" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 109 'zext' 'tmp_14_cast' <Predicate = (tmp_12)> <Delay = 0.00>
ST_14 : Operation 110 [1/1] (0.00ns)   --->   "%tmp_15 = zext i15 %h1 to i64" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 110 'zext' 'tmp_15' <Predicate = (tmp_12)> <Delay = 0.00>
ST_14 : Operation 111 [1/1] (0.00ns)   --->   "%data_V_addr_1 = getelementptr [512 x i96]* %data_V, i64 0, i64 %tmp_15" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 111 'getelementptr' 'data_V_addr_1' <Predicate = (tmp_12)> <Delay = 0.00>
ST_14 : Operation 112 [2/2] (1.35ns)   --->   "%data_V_load = load i96* %data_V_addr_1, align 8" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 112 'load' 'data_V_load' <Predicate = (tmp_12)> <Delay = 1.35> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.35> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 96> <Depth = 512> <RAM>
ST_14 : Operation 113 [1/1] (1.15ns)   --->   "%output_V2_sum4 = add i29 %tmp_14_cast, %tmp_17_cast" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 113 'add' 'output_V2_sum4' <Predicate = (tmp_12)> <Delay = 1.15> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 114 [1/1] (0.92ns)   --->   "%tmp_16 = add i9 %t_V, 1" [estream_write/c_src/circ_buff_write_128.cpp:115]   --->   Operation 114 'add' 'tmp_16' <Predicate = (tmp_12)> <Delay = 0.92> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_14 : Operation 115 [1/1] (0.00ns)   --->   "store i9 %tmp_16, i9* @stream_head_V, align 2" [estream_write/c_src/circ_buff_write_128.cpp:116]   --->   Operation 115 'store' <Predicate = (tmp_12)> <Delay = 0.00>

State 15 <SV = 13> <Delay = 2.91>
ST_15 : Operation 116 [1/2] (1.35ns)   --->   "%data_V_load = load i96* %data_V_addr_1, align 8" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 116 'load' 'data_V_load' <Predicate = (tmp_12)> <Delay = 1.35> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.35> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 96> <Depth = 512> <RAM>
ST_15 : Operation 117 [1/1] (0.00ns)   --->   "%output_V2_sum4_cast = zext i29 %output_V2_sum4 to i64" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 117 'zext' 'output_V2_sum4_cast' <Predicate = (tmp_12)> <Delay = 0.00>
ST_15 : Operation 118 [1/1] (0.00ns)   --->   "%gmem_out_addr_1 = getelementptr i128* %gmem_out, i64 %output_V2_sum4_cast" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 118 'getelementptr' 'gmem_out_addr_1' <Predicate = (tmp_12)> <Delay = 0.00>
ST_15 : Operation 119 [1/1] (2.91ns)   --->   "%gmem_out_addr_1_req = call i1 @_ssdm_op_WriteReq.m_axi.i128P(i128* %gmem_out_addr_1, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 119 'writereq' 'gmem_out_addr_1_req' <Predicate = (tmp_12)> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 16 <SV = 14> <Delay = 2.91>
ST_16 : Operation 120 [1/1] (0.00ns)   --->   "%extLd = zext i96 %data_V_load to i128" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 120 'zext' 'extLd' <Predicate = (tmp_12)> <Delay = 0.00>
ST_16 : Operation 121 [1/1] (2.91ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i128P(i128* %gmem_out_addr_1, i128 %extLd, i16 -1)" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 121 'write' <Predicate = (tmp_12)> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 17 <SV = 15> <Delay = 2.91>
ST_17 : Operation 122 [5/5] (2.91ns)   --->   "%gmem_out_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_1)" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 122 'writeresp' 'gmem_out_addr_1_resp' <Predicate = (tmp_12)> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 18 <SV = 16> <Delay = 2.91>
ST_18 : Operation 123 [4/5] (2.91ns)   --->   "%gmem_out_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_1)" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 123 'writeresp' 'gmem_out_addr_1_resp' <Predicate = (tmp_12)> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 19 <SV = 17> <Delay = 2.91>
ST_19 : Operation 124 [3/5] (2.91ns)   --->   "%gmem_out_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_1)" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 124 'writeresp' 'gmem_out_addr_1_resp' <Predicate = (tmp_12)> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 20 <SV = 18> <Delay = 2.91>
ST_20 : Operation 125 [2/5] (2.91ns)   --->   "%gmem_out_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_1)" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 125 'writeresp' 'gmem_out_addr_1_resp' <Predicate = (tmp_12)> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 21 <SV = 19> <Delay = 2.91>
ST_21 : Operation 126 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([11 x i8]* @p_str11) nounwind" [estream_write/c_src/circ_buff_write_128.cpp:110]   --->   Operation 126 'specloopname' <Predicate = (tmp_12)> <Delay = 0.00>
ST_21 : Operation 127 [1/1] (0.00ns)   --->   "%tmp_13 = call i32 (...)* @_ssdm_op_SpecRegionBegin([11 x i8]* @p_str11)" [estream_write/c_src/circ_buff_write_128.cpp:110]   --->   Operation 127 'specregionbegin' 'tmp_13' <Predicate = (tmp_12)> <Delay = 0.00>
ST_21 : Operation 128 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind" [estream_write/c_src/circ_buff_write_128.cpp:111]   --->   Operation 128 'specpipeline' <Predicate = (tmp_12)> <Delay = 0.00>
ST_21 : Operation 129 [1/5] (2.91ns)   --->   "%gmem_out_addr_1_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_1)" [estream_write/c_src/circ_buff_write_128.cpp:113]   --->   Operation 129 'writeresp' 'gmem_out_addr_1_resp' <Predicate = (tmp_12)> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_21 : Operation 130 [1/1] (0.00ns)   --->   "%empty_7 = call i32 (...)* @_ssdm_op_SpecRegionEnd([11 x i8]* @p_str11, i32 %tmp_13)" [estream_write/c_src/circ_buff_write_128.cpp:117]   --->   Operation 130 'specregionend' 'empty_7' <Predicate = (tmp_12)> <Delay = 0.00>
ST_21 : Operation 131 [1/1] (0.00ns)   --->   "br label %5" [estream_write/c_src/circ_buff_write_128.cpp:109]   --->   Operation 131 'br' <Predicate = (tmp_12)> <Delay = 0.00>

State 22 <SV = 13> <Delay = 1.15>
ST_22 : Operation 132 [1/1] (1.15ns)   --->   "%output_V2_sum3 = add i29 %tmp_17_cast, 513" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 132 'add' 'output_V2_sum3' <Predicate = true> <Delay = 1.15> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.15> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

State 23 <SV = 14> <Delay = 2.91>
ST_23 : Operation 133 [1/1] (0.00ns)   --->   "%output_V2_sum3_cast = zext i29 %output_V2_sum3 to i64" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 133 'zext' 'output_V2_sum3_cast' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 134 [1/1] (0.00ns)   --->   "%gmem_out_addr_2 = getelementptr i128* %gmem_out, i64 %output_V2_sum3_cast" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 134 'getelementptr' 'gmem_out_addr_2' <Predicate = true> <Delay = 0.00>
ST_23 : Operation 135 [1/1] (2.91ns)   --->   "%gmem_out_addr_2_req = call i1 @_ssdm_op_WriteReq.m_axi.i128P(i128* %gmem_out_addr_2, i32 1)" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 135 'writereq' 'gmem_out_addr_2_req' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 24 <SV = 15> <Delay = 2.91>
ST_24 : Operation 136 [1/1] (2.91ns)   --->   "call void @_ssdm_op_Write.m_axi.volatile.i128P(i128* %gmem_out_addr_2, i128 %tmp_19, i16 -1)" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 136 'write' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 25 <SV = 16> <Delay = 2.91>
ST_25 : Operation 137 [5/5] (2.91ns)   --->   "%gmem_out_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_2)" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 137 'writeresp' 'gmem_out_addr_2_resp' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 26 <SV = 17> <Delay = 2.91>
ST_26 : Operation 138 [4/5] (2.91ns)   --->   "%gmem_out_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_2)" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 138 'writeresp' 'gmem_out_addr_2_resp' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 27 <SV = 18> <Delay = 2.91>
ST_27 : Operation 139 [3/5] (2.91ns)   --->   "%gmem_out_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_2)" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 139 'writeresp' 'gmem_out_addr_2_resp' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 28 <SV = 19> <Delay = 2.91>
ST_28 : Operation 140 [2/5] (2.91ns)   --->   "%gmem_out_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_2)" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 140 'writeresp' 'gmem_out_addr_2_resp' <Predicate = true> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>

State 29 <SV = 20> <Delay = 2.91>
ST_29 : Operation 141 [1/5] (2.91ns)   --->   "%gmem_out_addr_2_resp = call i1 @_ssdm_op_WriteResp.m_axi.i128P(i128* %gmem_out_addr_2)" [estream_write/c_src/circ_buff_write_128.cpp:121]   --->   Operation 141 'writeresp' 'gmem_out_addr_2_resp' <Predicate = (!tmp & !or_cond)> <Delay = 2.91> <Core = "m_axi">   --->   Core 9 'm_axi' <Latency = 6> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write' 'readreq' 'writereq' 'writeresp'>
ST_29 : Operation 142 [1/1] (0.00ns)   --->   "br label %.loopexit528"   --->   Operation 142 'br' <Predicate = (!tmp & !or_cond)> <Delay = 0.00>
ST_29 : Operation 143 [1/1] (0.00ns)   --->   "br label %._crit_edge533"   --->   Operation 143 'br' <Predicate = (!tmp)> <Delay = 0.00>
ST_29 : Operation 144 [1/1] (0.00ns)   --->   "ret void" [estream_write/c_src/circ_buff_write_128.cpp:124]   --->   Operation 144 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 3.33ns, clock uncertainty: 0.417ns.

 <State 1>: 2.3ns
The critical path consists of the following:
	s_axi read on port 'output_V' [6]  (1 ns)
	'add' operation ('output_V2_sum', estream_write/c_src/circ_buff_write_128.cpp:54) [23]  (1.16 ns)
	blocking operation 0.141 ns on control path)

 <State 2>: 2.92ns
The critical path consists of the following:
	'getelementptr' operation ('gmem_out_addr', estream_write/c_src/circ_buff_write_128.cpp:54) [25]  (0 ns)
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:54) [26]  (2.92 ns)

 <State 3>: 2.92ns
The critical path consists of the following:
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:54) [26]  (2.92 ns)

 <State 4>: 2.92ns
The critical path consists of the following:
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:54) [26]  (2.92 ns)

 <State 5>: 2.92ns
The critical path consists of the following:
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:54) [26]  (2.92 ns)

 <State 6>: 2.92ns
The critical path consists of the following:
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:54) [26]  (2.92 ns)

 <State 7>: 2.92ns
The critical path consists of the following:
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:54) [26]  (2.92 ns)

 <State 8>: 2.92ns
The critical path consists of the following:
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:54) [26]  (2.92 ns)

 <State 9>: 2.92ns
The critical path consists of the following:
	bus read on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:54) [27]  (2.92 ns)

 <State 10>: 3.15ns
The critical path consists of the following:
	'icmp' operation ('tmp_7', estream_write/c_src/circ_buff_write_128.cpp:74) [41]  (1.46 ns)
	'select' operation ('p_neg1_pn_v_cast_cast', estream_write/c_src/circ_buff_write_128.cpp:74) [44]  (0.47 ns)
	'add' operation ('p_neg1_pn', estream_write/c_src/circ_buff_write_128.cpp:74) [45]  (0 ns)
	'sub' operation ('bytes_to_write', estream_write/c_src/circ_buff_write_128.cpp:76) [46]  (0.829 ns)
	blocking operation 0.394 ns on control path)

 <State 11>: 1.62ns
The critical path consists of the following:
	'phi' operation ('h') with incoming values : ('h', estream_write/c_src/circ_buff_write_128.cpp:85) [49]  (0 ns)
	'icmp' operation ('tmp_s', estream_write/c_src/circ_buff_write_128.cpp:85) [51]  (0.866 ns)
	multiplexor before 'phi' operation ('bytes_to_write') with incoming values : ('bytes_to_write', estream_write/c_src/circ_buff_write_128.cpp:76) ('bytes_to_write', estream_write/c_src/circ_buff_write_128.cpp:85) [71]  (0.755 ns)

 <State 12>: 1.79ns
The critical path consists of the following:
	axis read on port 'stream_in_V' (estream_write/c_src/circ_buff_write_128.cpp:95) [61]  (0 ns)
	'shl' operation ('tmp_21', estream_write/c_src/circ_buff_write_128.cpp:95) [62]  (0 ns)
	'or' operation ('tmp_3', estream_write/c_src/circ_buff_write_128.cpp:89) [63]  (0.441 ns)
	'store' operation (estream_write/c_src/circ_buff_write_128.cpp:105) of variable 'tmp_10', estream_write/c_src/circ_buff_write_128.cpp:95 on array 'data.V', estream_write/c_src/circ_buff_write_128.cpp:36 [68]  (1.35 ns)

 <State 13>: 1.79ns
The critical path consists of the following:
	'phi' operation ('bytes_to_write') with incoming values : ('bytes_to_write', estream_write/c_src/circ_buff_write_128.cpp:76) ('bytes_to_write', estream_write/c_src/circ_buff_write_128.cpp:85) [71]  (0 ns)
	'icmp' operation ('tmp_9', estream_write/c_src/circ_buff_write_128.cpp:85) [72]  (0.866 ns)
	'select' operation ('tmp_17', estream_write/c_src/circ_buff_write_128.cpp:85) [74]  (0 ns)
	'add' operation ('tmp_18', estream_write/c_src/circ_buff_write_128.cpp:109) [75]  (0.921 ns)

 <State 14>: 1.35ns
The critical path consists of the following:
	'phi' operation ('h') with incoming values : ('h', estream_write/c_src/circ_buff_write_128.cpp:109) [80]  (0 ns)
	'getelementptr' operation ('data_V_addr_1', estream_write/c_src/circ_buff_write_128.cpp:113) [92]  (0 ns)
	'load' operation ('data_V_load', estream_write/c_src/circ_buff_write_128.cpp:113) on array 'data.V', estream_write/c_src/circ_buff_write_128.cpp:36 [93]  (1.35 ns)

 <State 15>: 2.92ns
The critical path consists of the following:
	'getelementptr' operation ('gmem_out_addr_1', estream_write/c_src/circ_buff_write_128.cpp:113) [97]  (0 ns)
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:113) [98]  (2.92 ns)

 <State 16>: 2.92ns
The critical path consists of the following:
	bus write on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:113) [99]  (2.92 ns)

 <State 17>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:113) [100]  (2.92 ns)

 <State 18>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:113) [100]  (2.92 ns)

 <State 19>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:113) [100]  (2.92 ns)

 <State 20>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:113) [100]  (2.92 ns)

 <State 21>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:113) [100]  (2.92 ns)

 <State 22>: 1.16ns
The critical path consists of the following:
	'add' operation ('output_V2_sum3', estream_write/c_src/circ_buff_write_128.cpp:121) [106]  (1.16 ns)

 <State 23>: 2.92ns
The critical path consists of the following:
	'getelementptr' operation ('gmem_out_addr_2', estream_write/c_src/circ_buff_write_128.cpp:121) [108]  (0 ns)
	bus request on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:121) [109]  (2.92 ns)

 <State 24>: 2.92ns
The critical path consists of the following:
	bus write on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:121) [110]  (2.92 ns)

 <State 25>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:121) [111]  (2.92 ns)

 <State 26>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:121) [111]  (2.92 ns)

 <State 27>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:121) [111]  (2.92 ns)

 <State 28>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:121) [111]  (2.92 ns)

 <State 29>: 2.92ns
The critical path consists of the following:
	bus access on port 'gmem_out' (estream_write/c_src/circ_buff_write_128.cpp:121) [111]  (2.92 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23
	State 24
	State 25
	State 26
	State 27
	State 28
	State 29


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
