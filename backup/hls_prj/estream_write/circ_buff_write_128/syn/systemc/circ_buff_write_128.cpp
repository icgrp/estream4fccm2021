// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "circ_buff_write_128.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic circ_buff_write_128::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic circ_buff_write_128::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state1 = "1";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state2 = "10";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state3 = "100";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state4 = "1000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state5 = "10000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state6 = "100000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state7 = "1000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state8 = "10000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state9 = "100000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state10 = "1000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state11 = "10000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state12 = "100000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_pp0_stage0 = "10000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state22 = "100000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state23 = "1000000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state24 = "10000000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state25 = "100000000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state26 = "1000000000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state27 = "10000000000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state28 = "100000000000000000000";
const sc_lv<22> circ_buff_write_128::ap_ST_fsm_state29 = "1000000000000000000000";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool circ_buff_write_128::ap_const_boolean_1 = true;
const sc_lv<9> circ_buff_write_128::ap_const_lv9_0 = "000000000";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_1 = "1";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_8 = "1000";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_D = "1101";
const bool circ_buff_write_128::ap_const_boolean_0 = false;
const sc_lv<1> circ_buff_write_128::ap_const_lv1_1 = "1";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_F = "1111";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_10 = "10000";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_15 = "10101";
const sc_lv<1> circ_buff_write_128::ap_const_lv1_0 = "0";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_B = "1011";
const int circ_buff_write_128::C_S_AXI_DATA_WIDTH = "100000";
const int circ_buff_write_128::C_M_AXI_GMEM_OUT_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int circ_buff_write_128::C_M_AXI_GMEM_OUT_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int circ_buff_write_128::C_M_AXI_GMEM_OUT_CACHE_VALUE = "11";
const int circ_buff_write_128::C_M_AXI_DATA_WIDTH = "100000";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_9 = "1001";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_A = "1010";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_C = "1100";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_E = "1110";
const sc_lv<15> circ_buff_write_128::ap_const_lv15_0 = "000000000000000";
const sc_lv<3> circ_buff_write_128::ap_const_lv3_0 = "000";
const sc_lv<2> circ_buff_write_128::ap_const_lv2_0 = "00";
const sc_lv<4> circ_buff_write_128::ap_const_lv4_0 = "0000";
const sc_lv<16> circ_buff_write_128::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_4 = "100";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_1F = "11111";
const sc_lv<8> circ_buff_write_128::ap_const_lv8_1 = "1";
const sc_lv<29> circ_buff_write_128::ap_const_lv29_200 = "1000000000";
const sc_lv<10> circ_buff_write_128::ap_const_lv10_1 = "1";
const sc_lv<9> circ_buff_write_128::ap_const_lv9_1 = "1";
const sc_lv<16> circ_buff_write_128::ap_const_lv16_1FF = "111111111";
const sc_lv<15> circ_buff_write_128::ap_const_lv15_1 = "1";
const sc_lv<64> circ_buff_write_128::ap_const_lv64_20 = "100000";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_20 = "100000";
const sc_lv<32> circ_buff_write_128::ap_const_lv32_3F = "111111";
const sc_lv<16> circ_buff_write_128::ap_const_lv16_0 = "0000000000000000";
const sc_lv<29> circ_buff_write_128::ap_const_lv29_201 = "1000000001";

circ_buff_write_128::circ_buff_write_128(sc_module_name name) : sc_module(name), mVcdFile(0) {
    circ_buff_write_128_control_s_axi_U = new circ_buff_write_128_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("circ_buff_write_128_control_s_axi_U");
    circ_buff_write_128_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    circ_buff_write_128_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    circ_buff_write_128_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    circ_buff_write_128_control_s_axi_U->WVALID(s_axi_control_WVALID);
    circ_buff_write_128_control_s_axi_U->WREADY(s_axi_control_WREADY);
    circ_buff_write_128_control_s_axi_U->WDATA(s_axi_control_WDATA);
    circ_buff_write_128_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    circ_buff_write_128_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    circ_buff_write_128_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    circ_buff_write_128_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    circ_buff_write_128_control_s_axi_U->RVALID(s_axi_control_RVALID);
    circ_buff_write_128_control_s_axi_U->RREADY(s_axi_control_RREADY);
    circ_buff_write_128_control_s_axi_U->RDATA(s_axi_control_RDATA);
    circ_buff_write_128_control_s_axi_U->RRESP(s_axi_control_RRESP);
    circ_buff_write_128_control_s_axi_U->BVALID(s_axi_control_BVALID);
    circ_buff_write_128_control_s_axi_U->BREADY(s_axi_control_BREADY);
    circ_buff_write_128_control_s_axi_U->BRESP(s_axi_control_BRESP);
    circ_buff_write_128_control_s_axi_U->ACLK(ap_clk);
    circ_buff_write_128_control_s_axi_U->ARESET(ap_rst_n_inv);
    circ_buff_write_128_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    circ_buff_write_128_control_s_axi_U->ap_start(ap_start);
    circ_buff_write_128_control_s_axi_U->interrupt(interrupt);
    circ_buff_write_128_control_s_axi_U->ap_ready(ap_ready);
    circ_buff_write_128_control_s_axi_U->ap_done(ap_done);
    circ_buff_write_128_control_s_axi_U->ap_idle(ap_idle);
    circ_buff_write_128_control_s_axi_U->output_V(output_V);
    circ_buff_write_128_control_s_axi_U->reset(reset);
    circ_buff_write_128_gmem_out_m_axi_U = new circ_buff_write_128_gmem_out_m_axi<0,128,32,5,16,16,16,16,C_M_AXI_GMEM_OUT_ID_WIDTH,C_M_AXI_GMEM_OUT_ADDR_WIDTH,C_M_AXI_GMEM_OUT_DATA_WIDTH,C_M_AXI_GMEM_OUT_AWUSER_WIDTH,C_M_AXI_GMEM_OUT_ARUSER_WIDTH,C_M_AXI_GMEM_OUT_WUSER_WIDTH,C_M_AXI_GMEM_OUT_RUSER_WIDTH,C_M_AXI_GMEM_OUT_BUSER_WIDTH,C_M_AXI_GMEM_OUT_USER_VALUE,C_M_AXI_GMEM_OUT_PROT_VALUE,C_M_AXI_GMEM_OUT_CACHE_VALUE>("circ_buff_write_128_gmem_out_m_axi_U");
    circ_buff_write_128_gmem_out_m_axi_U->AWVALID(m_axi_gmem_out_AWVALID);
    circ_buff_write_128_gmem_out_m_axi_U->AWREADY(m_axi_gmem_out_AWREADY);
    circ_buff_write_128_gmem_out_m_axi_U->AWADDR(m_axi_gmem_out_AWADDR);
    circ_buff_write_128_gmem_out_m_axi_U->AWID(m_axi_gmem_out_AWID);
    circ_buff_write_128_gmem_out_m_axi_U->AWLEN(m_axi_gmem_out_AWLEN);
    circ_buff_write_128_gmem_out_m_axi_U->AWSIZE(m_axi_gmem_out_AWSIZE);
    circ_buff_write_128_gmem_out_m_axi_U->AWBURST(m_axi_gmem_out_AWBURST);
    circ_buff_write_128_gmem_out_m_axi_U->AWLOCK(m_axi_gmem_out_AWLOCK);
    circ_buff_write_128_gmem_out_m_axi_U->AWCACHE(m_axi_gmem_out_AWCACHE);
    circ_buff_write_128_gmem_out_m_axi_U->AWPROT(m_axi_gmem_out_AWPROT);
    circ_buff_write_128_gmem_out_m_axi_U->AWQOS(m_axi_gmem_out_AWQOS);
    circ_buff_write_128_gmem_out_m_axi_U->AWREGION(m_axi_gmem_out_AWREGION);
    circ_buff_write_128_gmem_out_m_axi_U->AWUSER(m_axi_gmem_out_AWUSER);
    circ_buff_write_128_gmem_out_m_axi_U->WVALID(m_axi_gmem_out_WVALID);
    circ_buff_write_128_gmem_out_m_axi_U->WREADY(m_axi_gmem_out_WREADY);
    circ_buff_write_128_gmem_out_m_axi_U->WDATA(m_axi_gmem_out_WDATA);
    circ_buff_write_128_gmem_out_m_axi_U->WSTRB(m_axi_gmem_out_WSTRB);
    circ_buff_write_128_gmem_out_m_axi_U->WLAST(m_axi_gmem_out_WLAST);
    circ_buff_write_128_gmem_out_m_axi_U->WID(m_axi_gmem_out_WID);
    circ_buff_write_128_gmem_out_m_axi_U->WUSER(m_axi_gmem_out_WUSER);
    circ_buff_write_128_gmem_out_m_axi_U->ARVALID(m_axi_gmem_out_ARVALID);
    circ_buff_write_128_gmem_out_m_axi_U->ARREADY(m_axi_gmem_out_ARREADY);
    circ_buff_write_128_gmem_out_m_axi_U->ARADDR(m_axi_gmem_out_ARADDR);
    circ_buff_write_128_gmem_out_m_axi_U->ARID(m_axi_gmem_out_ARID);
    circ_buff_write_128_gmem_out_m_axi_U->ARLEN(m_axi_gmem_out_ARLEN);
    circ_buff_write_128_gmem_out_m_axi_U->ARSIZE(m_axi_gmem_out_ARSIZE);
    circ_buff_write_128_gmem_out_m_axi_U->ARBURST(m_axi_gmem_out_ARBURST);
    circ_buff_write_128_gmem_out_m_axi_U->ARLOCK(m_axi_gmem_out_ARLOCK);
    circ_buff_write_128_gmem_out_m_axi_U->ARCACHE(m_axi_gmem_out_ARCACHE);
    circ_buff_write_128_gmem_out_m_axi_U->ARPROT(m_axi_gmem_out_ARPROT);
    circ_buff_write_128_gmem_out_m_axi_U->ARQOS(m_axi_gmem_out_ARQOS);
    circ_buff_write_128_gmem_out_m_axi_U->ARREGION(m_axi_gmem_out_ARREGION);
    circ_buff_write_128_gmem_out_m_axi_U->ARUSER(m_axi_gmem_out_ARUSER);
    circ_buff_write_128_gmem_out_m_axi_U->RVALID(m_axi_gmem_out_RVALID);
    circ_buff_write_128_gmem_out_m_axi_U->RREADY(m_axi_gmem_out_RREADY);
    circ_buff_write_128_gmem_out_m_axi_U->RDATA(m_axi_gmem_out_RDATA);
    circ_buff_write_128_gmem_out_m_axi_U->RLAST(m_axi_gmem_out_RLAST);
    circ_buff_write_128_gmem_out_m_axi_U->RID(m_axi_gmem_out_RID);
    circ_buff_write_128_gmem_out_m_axi_U->RUSER(m_axi_gmem_out_RUSER);
    circ_buff_write_128_gmem_out_m_axi_U->RRESP(m_axi_gmem_out_RRESP);
    circ_buff_write_128_gmem_out_m_axi_U->BVALID(m_axi_gmem_out_BVALID);
    circ_buff_write_128_gmem_out_m_axi_U->BREADY(m_axi_gmem_out_BREADY);
    circ_buff_write_128_gmem_out_m_axi_U->BRESP(m_axi_gmem_out_BRESP);
    circ_buff_write_128_gmem_out_m_axi_U->BID(m_axi_gmem_out_BID);
    circ_buff_write_128_gmem_out_m_axi_U->BUSER(m_axi_gmem_out_BUSER);
    circ_buff_write_128_gmem_out_m_axi_U->ACLK(ap_clk);
    circ_buff_write_128_gmem_out_m_axi_U->ARESET(ap_rst_n_inv);
    circ_buff_write_128_gmem_out_m_axi_U->ACLK_EN(ap_var_for_const0);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARVALID(gmem_out_ARVALID);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARREADY(gmem_out_ARREADY);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARADDR(gmem_out_ARADDR);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARID(ap_var_for_const1);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARLEN(ap_var_for_const2);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARSIZE(ap_var_for_const3);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARLOCK(ap_var_for_const4);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARCACHE(ap_var_for_const5);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARQOS(ap_var_for_const5);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARPROT(ap_var_for_const3);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARUSER(ap_var_for_const1);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARBURST(ap_var_for_const4);
    circ_buff_write_128_gmem_out_m_axi_U->I_ARREGION(ap_var_for_const5);
    circ_buff_write_128_gmem_out_m_axi_U->I_RVALID(gmem_out_RVALID);
    circ_buff_write_128_gmem_out_m_axi_U->I_RREADY(gmem_out_RREADY);
    circ_buff_write_128_gmem_out_m_axi_U->I_RDATA(gmem_out_RDATA);
    circ_buff_write_128_gmem_out_m_axi_U->I_RID(gmem_out_RID);
    circ_buff_write_128_gmem_out_m_axi_U->I_RUSER(gmem_out_RUSER);
    circ_buff_write_128_gmem_out_m_axi_U->I_RRESP(gmem_out_RRESP);
    circ_buff_write_128_gmem_out_m_axi_U->I_RLAST(gmem_out_RLAST);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWVALID(gmem_out_AWVALID);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWREADY(gmem_out_AWREADY);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWADDR(gmem_out_AWADDR);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWID(ap_var_for_const1);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWLEN(ap_var_for_const2);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWSIZE(ap_var_for_const3);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWLOCK(ap_var_for_const4);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWCACHE(ap_var_for_const5);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWQOS(ap_var_for_const5);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWPROT(ap_var_for_const3);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWUSER(ap_var_for_const1);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWBURST(ap_var_for_const4);
    circ_buff_write_128_gmem_out_m_axi_U->I_AWREGION(ap_var_for_const5);
    circ_buff_write_128_gmem_out_m_axi_U->I_WVALID(gmem_out_WVALID);
    circ_buff_write_128_gmem_out_m_axi_U->I_WREADY(gmem_out_WREADY);
    circ_buff_write_128_gmem_out_m_axi_U->I_WDATA(gmem_out_WDATA);
    circ_buff_write_128_gmem_out_m_axi_U->I_WID(ap_var_for_const1);
    circ_buff_write_128_gmem_out_m_axi_U->I_WUSER(ap_var_for_const1);
    circ_buff_write_128_gmem_out_m_axi_U->I_WLAST(ap_var_for_const6);
    circ_buff_write_128_gmem_out_m_axi_U->I_WSTRB(ap_var_for_const7);
    circ_buff_write_128_gmem_out_m_axi_U->I_BVALID(gmem_out_BVALID);
    circ_buff_write_128_gmem_out_m_axi_U->I_BREADY(gmem_out_BREADY);
    circ_buff_write_128_gmem_out_m_axi_U->I_BRESP(gmem_out_BRESP);
    circ_buff_write_128_gmem_out_m_axi_U->I_BID(gmem_out_BID);
    circ_buff_write_128_gmem_out_m_axi_U->I_BUSER(gmem_out_BUSER);
    data_V_U = new circ_buff_write_128_data_V("data_V_U");
    data_V_U->clk(ap_clk);
    data_V_U->reset(ap_rst_n_inv);
    data_V_U->address0(data_V_address0);
    data_V_U->ce0(data_V_ce0);
    data_V_U->we0(data_V_we0);
    data_V_U->d0(data_V_d0);
    data_V_U->q0(data_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( tmp_12_reg_602_pp0_iter6_reg );
    sensitive << ( gmem_out_BVALID );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( tmp_12_reg_602_pp0_iter6_reg );
    sensitive << ( gmem_out_BVALID );
    sensitive << ( ap_block_state15_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( tmp_12_reg_602_pp0_iter6_reg );
    sensitive << ( gmem_out_BVALID );
    sensitive << ( ap_block_state15_io );
    sensitive << ( ap_block_state16_io );

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state15_io);
    sensitive << ( tmp_12_reg_602 );
    sensitive << ( ap_sig_ioackin_gmem_out_AWREADY );

    SC_METHOD(thread_ap_block_state15_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state16_io);
    sensitive << ( tmp_12_reg_602_pp0_iter1_reg );
    sensitive << ( ap_sig_ioackin_gmem_out_WREADY );

    SC_METHOD(thread_ap_block_state16_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state17_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state18_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state19_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state20_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state21_pp0_stage0_iter7);
    sensitive << ( tmp_12_reg_602_pp0_iter6_reg );
    sensitive << ( gmem_out_BVALID );

    SC_METHOD(thread_ap_block_state29);
    sensitive << ( gmem_out_BVALID );
    sensitive << ( ap_predicate_op141_writeresp_state29 );

    SC_METHOD(thread_ap_condition_485);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_602 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_condition_495);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_12_reg_602_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state14);
    sensitive << ( tmp_12_fu_457_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( gmem_out_BVALID );
    sensitive << ( ap_predicate_op141_writeresp_state29 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );

    SC_METHOD(thread_ap_phi_mux_t_V_phi_fu_234_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_12_reg_602 );
    sensitive << ( t_V_reg_231 );
    sensitive << ( tmp_16_reg_621 );

    SC_METHOD(thread_ap_predicate_op141_writeresp_state29);
    sensitive << ( tmp_reg_530 );
    sensitive << ( or_cond_reg_566 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( gmem_out_BVALID );
    sensitive << ( ap_predicate_op141_writeresp_state29 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_gmem_out_ARREADY);
    sensitive << ( gmem_out_ARREADY );
    sensitive << ( ap_reg_ioackin_gmem_out_ARREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_out_AWREADY);
    sensitive << ( gmem_out_AWREADY );
    sensitive << ( ap_reg_ioackin_gmem_out_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_gmem_out_WREADY);
    sensitive << ( gmem_out_WREADY );
    sensitive << ( ap_reg_ioackin_gmem_out_WREADY );

    SC_METHOD(thread_bytes_to_write_2_fu_368_p1);
    sensitive << ( h_reg_209 );

    SC_METHOD(thread_bytes_to_write_fu_362_p2);
    sensitive << ( p_neg1_pn_fu_356_p2 );
    sensitive << ( tmp_8_fu_342_p1 );

    SC_METHOD(thread_data_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_11_fu_421_p1 );
    sensitive << ( tmp_15_fu_473_p1 );

    SC_METHOD(thread_data_V_ce0);
    sensitive << ( stream_in_V_TVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_data_V_d0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_5_fu_402_p4 );
    sensitive << ( tmp_3_fu_397_p2 );

    SC_METHOD(thread_data_V_we0);
    sensitive << ( stream_in_V_TVALID );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_empty_n_fu_383_p1);
    sensitive << ( stream_in_V_TVALID );

    SC_METHOD(thread_extLd_fu_505_p1);
    sensitive << ( data_V_load_reg_626 );

    SC_METHOD(thread_gmem_out_ARADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( output_V2_sum_cast_fu_277_p1 );
    sensitive << ( ap_reg_ioackin_gmem_out_ARREADY );

    SC_METHOD(thread_gmem_out_ARVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_gmem_out_ARREADY );

    SC_METHOD(thread_gmem_out_AWADDR);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( output_V2_sum4_cast_fu_495_p1 );
    sensitive << ( output_V2_sum3_cast_fu_514_p1 );
    sensitive << ( ap_reg_ioackin_gmem_out_AWREADY );
    sensitive << ( ap_condition_485 );

    SC_METHOD(thread_gmem_out_AWVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( tmp_12_reg_602 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_reg_ioackin_gmem_out_AWREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_gmem_out_BREADY);
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( tmp_12_reg_602_pp0_iter6_reg );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( gmem_out_BVALID );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_predicate_op141_writeresp_state29 );

    SC_METHOD(thread_gmem_out_RREADY);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( gmem_out_RVALID );

    SC_METHOD(thread_gmem_out_WDATA);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( tmp_19_reg_597 );
    sensitive << ( ap_reg_ioackin_gmem_out_WREADY );
    sensitive << ( extLd_fu_505_p1 );
    sensitive << ( ap_condition_495 );

    SC_METHOD(thread_gmem_out_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_12_reg_602_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( ap_reg_ioackin_gmem_out_WREADY );

    SC_METHOD(thread_gmem_out_blk_n_AR);
    sensitive << ( m_axi_gmem_out_ARREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_gmem_out_blk_n_AW);
    sensitive << ( m_axi_gmem_out_AWREADY );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( tmp_12_reg_602 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_gmem_out_blk_n_B);
    sensitive << ( m_axi_gmem_out_BVALID );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( tmp_12_reg_602_pp0_iter6_reg );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( tmp_reg_530 );
    sensitive << ( or_cond_reg_566 );

    SC_METHOD(thread_gmem_out_blk_n_R);
    sensitive << ( m_axi_gmem_out_RVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_gmem_out_blk_n_W);
    sensitive << ( m_axi_gmem_out_WREADY );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_12_reg_602_pp0_iter1_reg );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_h1_cast_fu_453_p1);
    sensitive << ( h1_reg_240 );

    SC_METHOD(thread_h_1_fu_377_p2);
    sensitive << ( h_reg_209 );

    SC_METHOD(thread_h_2_fu_463_p2);
    sensitive << ( h1_reg_240 );

    SC_METHOD(thread_lhs_V_cast_fu_291_p1);
    sensitive << ( stream_head_V );

    SC_METHOD(thread_or_cond_fu_331_p2);
    sensitive << ( tmp_4_fu_315_p2 );
    sensitive << ( tmp_6_fu_325_p2 );

    SC_METHOD(thread_output_V2_sum3_cast_fu_514_p1);
    sensitive << ( output_V2_sum3_reg_637 );

    SC_METHOD(thread_output_V2_sum3_fu_509_p2);
    sensitive << ( tmp_17_cast_reg_524 );

    SC_METHOD(thread_output_V2_sum4_cast_fu_495_p1);
    sensitive << ( output_V2_sum4_reg_616 );

    SC_METHOD(thread_output_V2_sum4_fu_478_p2);
    sensitive << ( tmp_17_cast_reg_524 );
    sensitive << ( tmp_14_cast_fu_469_p1 );

    SC_METHOD(thread_output_V2_sum_cast_fu_277_p1);
    sensitive << ( output_V2_sum_reg_534 );

    SC_METHOD(thread_output_V2_sum_fu_271_p2);
    sensitive << ( tmp_17_cast_fu_261_p1 );

    SC_METHOD(thread_p_neg1_pn_fu_356_p2);
    sensitive << ( p_neg1_pn_v_cast_cast_fu_348_p3 );
    sensitive << ( tmp_2_fu_345_p1 );

    SC_METHOD(thread_p_neg1_pn_v_cast_cast_fu_348_p3);
    sensitive << ( tmp_7_fu_337_p2 );

    SC_METHOD(thread_ret_V_2_cast5_fu_306_p1);
    sensitive << ( ret_V_reg_560 );

    SC_METHOD(thread_ret_V_2_cast6_fu_301_p2);
    sensitive << ( stream_head_V_load_reg_552 );

    SC_METHOD(thread_ret_V_2_cast_fu_309_p1);
    sensitive << ( ret_V_reg_560 );

    SC_METHOD(thread_ret_V_cast_fu_321_p1);
    sensitive << ( ret_V_2_cast6_fu_301_p2 );

    SC_METHOD(thread_ret_V_fu_295_p2);
    sensitive << ( lhs_V_cast_fu_291_p1 );

    SC_METHOD(thread_stream_in_V_TDATA_blk_n);
    sensitive << ( stream_in_V_TVALID );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_stream_in_V_TREADY);
    sensitive << ( stream_in_V_TVALID );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_s_fu_372_p2 );

    SC_METHOD(thread_tmp_11_fu_421_p1);
    sensitive << ( h_reg_209 );

    SC_METHOD(thread_tmp_12_fu_457_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( bytes_to_write_1_reg_221 );
    sensitive << ( h1_cast_fu_453_p1 );

    SC_METHOD(thread_tmp_14_cast_fu_469_p1);
    sensitive << ( ap_phi_mux_t_V_phi_fu_234_p4 );

    SC_METHOD(thread_tmp_14_fu_432_p1);
    sensitive << ( bytes_to_write_1_reg_221 );

    SC_METHOD(thread_tmp_15_fu_473_p1);
    sensitive << ( h1_reg_240 );

    SC_METHOD(thread_tmp_16_fu_483_p2);
    sensitive << ( ap_phi_mux_t_V_phi_fu_234_p4 );

    SC_METHOD(thread_tmp_17_cast_fu_261_p1);
    sensitive << ( tmp_1_fu_251_p4 );

    SC_METHOD(thread_tmp_17_fu_436_p3);
    sensitive << ( tmp_9_fu_426_p2 );
    sensitive << ( tmp_14_fu_432_p1 );

    SC_METHOD(thread_tmp_18_fu_444_p2);
    sensitive << ( stream_head_V_load_reg_552 );
    sensitive << ( tmp_17_fu_436_p3 );

    SC_METHOD(thread_tmp_19_fu_449_p1);
    sensitive << ( tmp_18_fu_444_p2 );

    SC_METHOD(thread_tmp_1_fu_251_p4);
    sensitive << ( output_V );

    SC_METHOD(thread_tmp_21_fu_391_p2);
    sensitive << ( stream_in_V_TDATA );

    SC_METHOD(thread_tmp_2_fu_345_p1);
    sensitive << ( stream_tail_V_reg_545 );

    SC_METHOD(thread_tmp_3_cast_fu_312_p1);
    sensitive << ( stream_tail_V_reg_545 );

    SC_METHOD(thread_tmp_3_fu_397_p2);
    sensitive << ( tmp_22_reg_592 );
    sensitive << ( tmp_21_fu_391_p2 );

    SC_METHOD(thread_tmp_4_fu_315_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ret_V_2_cast_fu_309_p1 );
    sensitive << ( tmp_3_cast_fu_312_p1 );

    SC_METHOD(thread_tmp_5_fu_402_p4);
    sensitive << ( stream_in_V_TDATA );

    SC_METHOD(thread_tmp_6_fu_325_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_3_cast_fu_312_p1 );
    sensitive << ( ret_V_cast_fu_321_p1 );

    SC_METHOD(thread_tmp_7_fu_337_p2);
    sensitive << ( stream_tail_V_reg_545 );
    sensitive << ( or_cond_fu_331_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ret_V_2_cast5_fu_306_p1 );

    SC_METHOD(thread_tmp_8_fu_342_p1);
    sensitive << ( stream_head_V_load_reg_552 );

    SC_METHOD(thread_tmp_9_fu_426_p2);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( bytes_to_write_1_reg_221 );

    SC_METHOD(thread_tmp_fu_265_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( reset );

    SC_METHOD(thread_tmp_s_fu_372_p2);
    sensitive << ( bytes_to_write_reg_570 );
    sensitive << ( bytes_to_write_2_fu_368_p1 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_V_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter7 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( gmem_out_RVALID );
    sensitive << ( gmem_out_BVALID );
    sensitive << ( tmp_fu_265_p2 );
    sensitive << ( ap_sig_ioackin_gmem_out_ARREADY );
    sensitive << ( or_cond_fu_331_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( tmp_s_fu_372_p2 );
    sensitive << ( tmp_12_fu_457_p2 );
    sensitive << ( ap_sig_ioackin_gmem_out_AWREADY );
    sensitive << ( ap_sig_ioackin_gmem_out_WREADY );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( empty_n_fu_383_p1 );
    sensitive << ( ap_predicate_op141_writeresp_state29 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const6);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const7);

    ap_CS_fsm = "0000000000000000000001";
    stream_head_V = "000000000";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_reg_ioackin_gmem_out_ARREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_out_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_gmem_out_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "circ_buff_write_128_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_gmem_out_AWVALID, "(port)m_axi_gmem_out_AWVALID");
    sc_trace(mVcdFile, m_axi_gmem_out_AWREADY, "(port)m_axi_gmem_out_AWREADY");
    sc_trace(mVcdFile, m_axi_gmem_out_AWADDR, "(port)m_axi_gmem_out_AWADDR");
    sc_trace(mVcdFile, m_axi_gmem_out_AWID, "(port)m_axi_gmem_out_AWID");
    sc_trace(mVcdFile, m_axi_gmem_out_AWLEN, "(port)m_axi_gmem_out_AWLEN");
    sc_trace(mVcdFile, m_axi_gmem_out_AWSIZE, "(port)m_axi_gmem_out_AWSIZE");
    sc_trace(mVcdFile, m_axi_gmem_out_AWBURST, "(port)m_axi_gmem_out_AWBURST");
    sc_trace(mVcdFile, m_axi_gmem_out_AWLOCK, "(port)m_axi_gmem_out_AWLOCK");
    sc_trace(mVcdFile, m_axi_gmem_out_AWCACHE, "(port)m_axi_gmem_out_AWCACHE");
    sc_trace(mVcdFile, m_axi_gmem_out_AWPROT, "(port)m_axi_gmem_out_AWPROT");
    sc_trace(mVcdFile, m_axi_gmem_out_AWQOS, "(port)m_axi_gmem_out_AWQOS");
    sc_trace(mVcdFile, m_axi_gmem_out_AWREGION, "(port)m_axi_gmem_out_AWREGION");
    sc_trace(mVcdFile, m_axi_gmem_out_AWUSER, "(port)m_axi_gmem_out_AWUSER");
    sc_trace(mVcdFile, m_axi_gmem_out_WVALID, "(port)m_axi_gmem_out_WVALID");
    sc_trace(mVcdFile, m_axi_gmem_out_WREADY, "(port)m_axi_gmem_out_WREADY");
    sc_trace(mVcdFile, m_axi_gmem_out_WDATA, "(port)m_axi_gmem_out_WDATA");
    sc_trace(mVcdFile, m_axi_gmem_out_WSTRB, "(port)m_axi_gmem_out_WSTRB");
    sc_trace(mVcdFile, m_axi_gmem_out_WLAST, "(port)m_axi_gmem_out_WLAST");
    sc_trace(mVcdFile, m_axi_gmem_out_WID, "(port)m_axi_gmem_out_WID");
    sc_trace(mVcdFile, m_axi_gmem_out_WUSER, "(port)m_axi_gmem_out_WUSER");
    sc_trace(mVcdFile, m_axi_gmem_out_ARVALID, "(port)m_axi_gmem_out_ARVALID");
    sc_trace(mVcdFile, m_axi_gmem_out_ARREADY, "(port)m_axi_gmem_out_ARREADY");
    sc_trace(mVcdFile, m_axi_gmem_out_ARADDR, "(port)m_axi_gmem_out_ARADDR");
    sc_trace(mVcdFile, m_axi_gmem_out_ARID, "(port)m_axi_gmem_out_ARID");
    sc_trace(mVcdFile, m_axi_gmem_out_ARLEN, "(port)m_axi_gmem_out_ARLEN");
    sc_trace(mVcdFile, m_axi_gmem_out_ARSIZE, "(port)m_axi_gmem_out_ARSIZE");
    sc_trace(mVcdFile, m_axi_gmem_out_ARBURST, "(port)m_axi_gmem_out_ARBURST");
    sc_trace(mVcdFile, m_axi_gmem_out_ARLOCK, "(port)m_axi_gmem_out_ARLOCK");
    sc_trace(mVcdFile, m_axi_gmem_out_ARCACHE, "(port)m_axi_gmem_out_ARCACHE");
    sc_trace(mVcdFile, m_axi_gmem_out_ARPROT, "(port)m_axi_gmem_out_ARPROT");
    sc_trace(mVcdFile, m_axi_gmem_out_ARQOS, "(port)m_axi_gmem_out_ARQOS");
    sc_trace(mVcdFile, m_axi_gmem_out_ARREGION, "(port)m_axi_gmem_out_ARREGION");
    sc_trace(mVcdFile, m_axi_gmem_out_ARUSER, "(port)m_axi_gmem_out_ARUSER");
    sc_trace(mVcdFile, m_axi_gmem_out_RVALID, "(port)m_axi_gmem_out_RVALID");
    sc_trace(mVcdFile, m_axi_gmem_out_RREADY, "(port)m_axi_gmem_out_RREADY");
    sc_trace(mVcdFile, m_axi_gmem_out_RDATA, "(port)m_axi_gmem_out_RDATA");
    sc_trace(mVcdFile, m_axi_gmem_out_RLAST, "(port)m_axi_gmem_out_RLAST");
    sc_trace(mVcdFile, m_axi_gmem_out_RID, "(port)m_axi_gmem_out_RID");
    sc_trace(mVcdFile, m_axi_gmem_out_RUSER, "(port)m_axi_gmem_out_RUSER");
    sc_trace(mVcdFile, m_axi_gmem_out_RRESP, "(port)m_axi_gmem_out_RRESP");
    sc_trace(mVcdFile, m_axi_gmem_out_BVALID, "(port)m_axi_gmem_out_BVALID");
    sc_trace(mVcdFile, m_axi_gmem_out_BREADY, "(port)m_axi_gmem_out_BREADY");
    sc_trace(mVcdFile, m_axi_gmem_out_BRESP, "(port)m_axi_gmem_out_BRESP");
    sc_trace(mVcdFile, m_axi_gmem_out_BID, "(port)m_axi_gmem_out_BID");
    sc_trace(mVcdFile, m_axi_gmem_out_BUSER, "(port)m_axi_gmem_out_BUSER");
    sc_trace(mVcdFile, stream_in_V_TDATA, "(port)stream_in_V_TDATA");
    sc_trace(mVcdFile, stream_in_V_TVALID, "(port)stream_in_V_TVALID");
    sc_trace(mVcdFile, stream_in_V_TREADY, "(port)stream_in_V_TREADY");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, output_V, "output_V");
    sc_trace(mVcdFile, reset, "reset");
    sc_trace(mVcdFile, stream_head_V, "stream_head_V");
    sc_trace(mVcdFile, gmem_out_blk_n_AR, "gmem_out_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, gmem_out_blk_n_R, "gmem_out_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, gmem_out_blk_n_AW, "gmem_out_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_12_reg_602, "tmp_12_reg_602");
    sc_trace(mVcdFile, gmem_out_blk_n_W, "gmem_out_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, tmp_12_reg_602_pp0_iter1_reg, "tmp_12_reg_602_pp0_iter1_reg");
    sc_trace(mVcdFile, gmem_out_blk_n_B, "gmem_out_blk_n_B");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, tmp_12_reg_602_pp0_iter6_reg, "tmp_12_reg_602_pp0_iter6_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, tmp_reg_530, "tmp_reg_530");
    sc_trace(mVcdFile, or_cond_reg_566, "or_cond_reg_566");
    sc_trace(mVcdFile, stream_in_V_TDATA_blk_n, "stream_in_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, gmem_out_AWVALID, "gmem_out_AWVALID");
    sc_trace(mVcdFile, gmem_out_AWREADY, "gmem_out_AWREADY");
    sc_trace(mVcdFile, gmem_out_AWADDR, "gmem_out_AWADDR");
    sc_trace(mVcdFile, gmem_out_WVALID, "gmem_out_WVALID");
    sc_trace(mVcdFile, gmem_out_WREADY, "gmem_out_WREADY");
    sc_trace(mVcdFile, gmem_out_WDATA, "gmem_out_WDATA");
    sc_trace(mVcdFile, gmem_out_ARVALID, "gmem_out_ARVALID");
    sc_trace(mVcdFile, gmem_out_ARREADY, "gmem_out_ARREADY");
    sc_trace(mVcdFile, gmem_out_ARADDR, "gmem_out_ARADDR");
    sc_trace(mVcdFile, gmem_out_RVALID, "gmem_out_RVALID");
    sc_trace(mVcdFile, gmem_out_RREADY, "gmem_out_RREADY");
    sc_trace(mVcdFile, gmem_out_RDATA, "gmem_out_RDATA");
    sc_trace(mVcdFile, gmem_out_RLAST, "gmem_out_RLAST");
    sc_trace(mVcdFile, gmem_out_RID, "gmem_out_RID");
    sc_trace(mVcdFile, gmem_out_RUSER, "gmem_out_RUSER");
    sc_trace(mVcdFile, gmem_out_RRESP, "gmem_out_RRESP");
    sc_trace(mVcdFile, gmem_out_BVALID, "gmem_out_BVALID");
    sc_trace(mVcdFile, gmem_out_BREADY, "gmem_out_BREADY");
    sc_trace(mVcdFile, gmem_out_BRESP, "gmem_out_BRESP");
    sc_trace(mVcdFile, gmem_out_BID, "gmem_out_BID");
    sc_trace(mVcdFile, gmem_out_BUSER, "gmem_out_BUSER");
    sc_trace(mVcdFile, t_V_reg_231, "t_V_reg_231");
    sc_trace(mVcdFile, h1_reg_240, "h1_reg_240");
    sc_trace(mVcdFile, tmp_17_cast_fu_261_p1, "tmp_17_cast_fu_261_p1");
    sc_trace(mVcdFile, tmp_17_cast_reg_524, "tmp_17_cast_reg_524");
    sc_trace(mVcdFile, tmp_fu_265_p2, "tmp_fu_265_p2");
    sc_trace(mVcdFile, output_V2_sum_fu_271_p2, "output_V2_sum_fu_271_p2");
    sc_trace(mVcdFile, output_V2_sum_reg_534, "output_V2_sum_reg_534");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_out_ARREADY, "ap_sig_ioackin_gmem_out_ARREADY");
    sc_trace(mVcdFile, stream_tail_V_reg_545, "stream_tail_V_reg_545");
    sc_trace(mVcdFile, stream_head_V_load_reg_552, "stream_head_V_load_reg_552");
    sc_trace(mVcdFile, ret_V_fu_295_p2, "ret_V_fu_295_p2");
    sc_trace(mVcdFile, ret_V_reg_560, "ret_V_reg_560");
    sc_trace(mVcdFile, or_cond_fu_331_p2, "or_cond_fu_331_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, bytes_to_write_fu_362_p2, "bytes_to_write_fu_362_p2");
    sc_trace(mVcdFile, bytes_to_write_reg_570, "bytes_to_write_reg_570");
    sc_trace(mVcdFile, bytes_to_write_2_fu_368_p1, "bytes_to_write_2_fu_368_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, h_1_fu_377_p2, "h_1_fu_377_p2");
    sc_trace(mVcdFile, h_1_reg_584, "h_1_reg_584");
    sc_trace(mVcdFile, tmp_22_reg_592, "tmp_22_reg_592");
    sc_trace(mVcdFile, tmp_s_fu_372_p2, "tmp_s_fu_372_p2");
    sc_trace(mVcdFile, tmp_19_fu_449_p1, "tmp_19_fu_449_p1");
    sc_trace(mVcdFile, tmp_19_reg_597, "tmp_19_reg_597");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_12_fu_457_p2, "tmp_12_fu_457_p2");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter0, "ap_block_state14_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage0_iter1, "ap_block_state15_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_out_AWREADY, "ap_sig_ioackin_gmem_out_AWREADY");
    sc_trace(mVcdFile, ap_block_state15_io, "ap_block_state15_io");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage0_iter2, "ap_block_state16_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_sig_ioackin_gmem_out_WREADY, "ap_sig_ioackin_gmem_out_WREADY");
    sc_trace(mVcdFile, ap_block_state16_io, "ap_block_state16_io");
    sc_trace(mVcdFile, ap_block_state17_pp0_stage0_iter3, "ap_block_state17_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state18_pp0_stage0_iter4, "ap_block_state18_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state19_pp0_stage0_iter5, "ap_block_state19_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state20_pp0_stage0_iter6, "ap_block_state20_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state21_pp0_stage0_iter7, "ap_block_state21_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_12_reg_602_pp0_iter2_reg, "tmp_12_reg_602_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_12_reg_602_pp0_iter3_reg, "tmp_12_reg_602_pp0_iter3_reg");
    sc_trace(mVcdFile, tmp_12_reg_602_pp0_iter4_reg, "tmp_12_reg_602_pp0_iter4_reg");
    sc_trace(mVcdFile, tmp_12_reg_602_pp0_iter5_reg, "tmp_12_reg_602_pp0_iter5_reg");
    sc_trace(mVcdFile, h_2_fu_463_p2, "h_2_fu_463_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, output_V2_sum4_fu_478_p2, "output_V2_sum4_fu_478_p2");
    sc_trace(mVcdFile, output_V2_sum4_reg_616, "output_V2_sum4_reg_616");
    sc_trace(mVcdFile, tmp_16_fu_483_p2, "tmp_16_fu_483_p2");
    sc_trace(mVcdFile, tmp_16_reg_621, "tmp_16_reg_621");
    sc_trace(mVcdFile, data_V_q0, "data_V_q0");
    sc_trace(mVcdFile, data_V_load_reg_626, "data_V_load_reg_626");
    sc_trace(mVcdFile, output_V2_sum3_fu_509_p2, "output_V2_sum3_fu_509_p2");
    sc_trace(mVcdFile, output_V2_sum3_reg_637, "output_V2_sum3_reg_637");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state14, "ap_condition_pp0_exit_iter0_state14");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, data_V_address0, "data_V_address0");
    sc_trace(mVcdFile, data_V_ce0, "data_V_ce0");
    sc_trace(mVcdFile, data_V_we0, "data_V_we0");
    sc_trace(mVcdFile, data_V_d0, "data_V_d0");
    sc_trace(mVcdFile, h_reg_209, "h_reg_209");
    sc_trace(mVcdFile, bytes_to_write_1_reg_221, "bytes_to_write_1_reg_221");
    sc_trace(mVcdFile, empty_n_fu_383_p1, "empty_n_fu_383_p1");
    sc_trace(mVcdFile, ap_phi_mux_t_V_phi_fu_234_p4, "ap_phi_mux_t_V_phi_fu_234_p4");
    sc_trace(mVcdFile, tmp_11_fu_421_p1, "tmp_11_fu_421_p1");
    sc_trace(mVcdFile, tmp_15_fu_473_p1, "tmp_15_fu_473_p1");
    sc_trace(mVcdFile, output_V2_sum_cast_fu_277_p1, "output_V2_sum_cast_fu_277_p1");
    sc_trace(mVcdFile, output_V2_sum4_cast_fu_495_p1, "output_V2_sum4_cast_fu_495_p1");
    sc_trace(mVcdFile, output_V2_sum3_cast_fu_514_p1, "output_V2_sum3_cast_fu_514_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_out_ARREADY, "ap_reg_ioackin_gmem_out_ARREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_out_AWREADY, "ap_reg_ioackin_gmem_out_AWREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_reg_ioackin_gmem_out_WREADY, "ap_reg_ioackin_gmem_out_WREADY");
    sc_trace(mVcdFile, extLd_fu_505_p1, "extLd_fu_505_p1");
    sc_trace(mVcdFile, ap_predicate_op141_writeresp_state29, "ap_predicate_op141_writeresp_state29");
    sc_trace(mVcdFile, ap_block_state29, "ap_block_state29");
    sc_trace(mVcdFile, tmp_1_fu_251_p4, "tmp_1_fu_251_p4");
    sc_trace(mVcdFile, lhs_V_cast_fu_291_p1, "lhs_V_cast_fu_291_p1");
    sc_trace(mVcdFile, ret_V_2_cast_fu_309_p1, "ret_V_2_cast_fu_309_p1");
    sc_trace(mVcdFile, tmp_3_cast_fu_312_p1, "tmp_3_cast_fu_312_p1");
    sc_trace(mVcdFile, ret_V_2_cast6_fu_301_p2, "ret_V_2_cast6_fu_301_p2");
    sc_trace(mVcdFile, ret_V_cast_fu_321_p1, "ret_V_cast_fu_321_p1");
    sc_trace(mVcdFile, tmp_4_fu_315_p2, "tmp_4_fu_315_p2");
    sc_trace(mVcdFile, tmp_6_fu_325_p2, "tmp_6_fu_325_p2");
    sc_trace(mVcdFile, ret_V_2_cast5_fu_306_p1, "ret_V_2_cast5_fu_306_p1");
    sc_trace(mVcdFile, tmp_7_fu_337_p2, "tmp_7_fu_337_p2");
    sc_trace(mVcdFile, p_neg1_pn_v_cast_cast_fu_348_p3, "p_neg1_pn_v_cast_cast_fu_348_p3");
    sc_trace(mVcdFile, tmp_2_fu_345_p1, "tmp_2_fu_345_p1");
    sc_trace(mVcdFile, p_neg1_pn_fu_356_p2, "p_neg1_pn_fu_356_p2");
    sc_trace(mVcdFile, tmp_8_fu_342_p1, "tmp_8_fu_342_p1");
    sc_trace(mVcdFile, tmp_21_fu_391_p2, "tmp_21_fu_391_p2");
    sc_trace(mVcdFile, tmp_5_fu_402_p4, "tmp_5_fu_402_p4");
    sc_trace(mVcdFile, tmp_3_fu_397_p2, "tmp_3_fu_397_p2");
    sc_trace(mVcdFile, tmp_9_fu_426_p2, "tmp_9_fu_426_p2");
    sc_trace(mVcdFile, tmp_14_fu_432_p1, "tmp_14_fu_432_p1");
    sc_trace(mVcdFile, tmp_17_fu_436_p3, "tmp_17_fu_436_p3");
    sc_trace(mVcdFile, tmp_18_fu_444_p2, "tmp_18_fu_444_p2");
    sc_trace(mVcdFile, h1_cast_fu_453_p1, "h1_cast_fu_453_p1");
    sc_trace(mVcdFile, tmp_14_cast_fu_469_p1, "tmp_14_cast_fu_469_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_485, "ap_condition_485");
    sc_trace(mVcdFile, ap_condition_495, "ap_condition_495");
#endif

    }
    mHdltvinHandle.open("circ_buff_write_128.hdltvin.dat");
    mHdltvoutHandle.open("circ_buff_write_128.hdltvout.dat");
}

circ_buff_write_128::~circ_buff_write_128() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete circ_buff_write_128_control_s_axi_U;
    delete circ_buff_write_128_gmem_out_m_axi_U;
    delete data_V_U;
}

void circ_buff_write_128::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void circ_buff_write_128::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_logic_0;
}

void circ_buff_write_128::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv32_1;
}

void circ_buff_write_128::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv1_0;
}

void circ_buff_write_128::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv3_0;
}

void circ_buff_write_128::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv2_0;
}

void circ_buff_write_128::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv4_0;
}

void circ_buff_write_128::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_lv16_FFFF;
}

void circ_buff_write_128::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state14.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state14.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state14.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            ap_enable_reg_pp0_iter7 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_out_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_gmem_out_ARREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_gmem_out_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, gmem_out_ARREADY.read())) {
                ap_reg_ioackin_gmem_out_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
              esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_out_AWREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                     esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_out_AWREADY.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_out_AWREADY.read())))) {
            ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter1_reg.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
              esl_seteq<1,1,1>(ap_sig_ioackin_gmem_out_WREADY.read(), ap_const_logic_1)))) {
            ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter1_reg.read()) && 
                     esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_out_WREADY.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, gmem_out_WREADY.read())))) {
            ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_372_p2.read())) {
            bytes_to_write_1_reg_221 = bytes_to_write_reg_570.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_372_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, empty_n_fu_383_p1.read()))) {
            bytes_to_write_1_reg_221 = bytes_to_write_2_fu_368_p1.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_fu_457_p2.read()))) {
        h1_reg_240 = h_2_fu_463_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        h1_reg_240 = ap_const_lv15_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(stream_in_V_TVALID.read(), ap_const_logic_1))) {
        h_reg_209 = h_1_reg_584.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_331_p2.read()))) {
        h_reg_209 = ap_const_lv15_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        t_V_reg_231 = tmp_16_reg_621.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        t_V_reg_231 = stream_head_V_load_reg_552.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_331_p2.read()))) {
        bytes_to_write_reg_570 = bytes_to_write_fu_362_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        data_V_load_reg_626 = data_V_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        h_1_reg_584 = h_1_fu_377_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        or_cond_reg_566 = or_cond_fu_331_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        output_V2_sum3_reg_637 = output_V2_sum3_fu_509_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_fu_457_p2.read()))) {
        output_V2_sum4_reg_616 = output_V2_sum4_fu_478_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_265_p2.read()))) {
        output_V2_sum_reg_534 = output_V2_sum_fu_271_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(gmem_out_RVALID.read(), ap_const_logic_1))) {
        ret_V_reg_560 = ret_V_fu_295_p2.read();
        stream_head_V_load_reg_552 = stream_head_V.read();
        stream_tail_V_reg_545 = gmem_out_RDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_fu_457_p2.read()))) {
        stream_head_V = tmp_16_fu_483_p2.read();
        tmp_16_reg_621 = tmp_16_fu_483_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_12_reg_602 = tmp_12_fu_457_p2.read();
        tmp_12_reg_602_pp0_iter1_reg = tmp_12_reg_602.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        tmp_12_reg_602_pp0_iter2_reg = tmp_12_reg_602_pp0_iter1_reg.read();
        tmp_12_reg_602_pp0_iter3_reg = tmp_12_reg_602_pp0_iter2_reg.read();
        tmp_12_reg_602_pp0_iter4_reg = tmp_12_reg_602_pp0_iter3_reg.read();
        tmp_12_reg_602_pp0_iter5_reg = tmp_12_reg_602_pp0_iter4_reg.read();
        tmp_12_reg_602_pp0_iter6_reg = tmp_12_reg_602_pp0_iter5_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_17_cast_reg_524 = tmp_17_cast_fu_261_p1.read();
        tmp_reg_530 = tmp_fu_265_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_19_reg_597 = tmp_19_fu_449_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_372_p2.read()))) {
        tmp_22_reg_592 = stream_in_V_TDATA.read();
    }
}

void circ_buff_write_128::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[13];
}

void circ_buff_write_128::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void circ_buff_write_128::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void circ_buff_write_128::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void circ_buff_write_128::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void circ_buff_write_128::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void circ_buff_write_128::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void circ_buff_write_128::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[14];
}

void circ_buff_write_128::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[15];
}

void circ_buff_write_128::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[16];
}

void circ_buff_write_128::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[21];
}

void circ_buff_write_128::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void circ_buff_write_128::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void circ_buff_write_128::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter6_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read()));
}

void circ_buff_write_128::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter6_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read())));
}

void circ_buff_write_128::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state15_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state16_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter6_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read())));
}

void circ_buff_write_128::thread_ap_block_state14_pp0_stage0_iter0() {
    ap_block_state14_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void circ_buff_write_128::thread_ap_block_state15_io() {
    ap_block_state15_io = (esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_out_AWREADY.read()));
}

void circ_buff_write_128::thread_ap_block_state15_pp0_stage0_iter1() {
    ap_block_state15_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void circ_buff_write_128::thread_ap_block_state16_io() {
    ap_block_state16_io = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_gmem_out_WREADY.read()));
}

void circ_buff_write_128::thread_ap_block_state16_pp0_stage0_iter2() {
    ap_block_state16_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void circ_buff_write_128::thread_ap_block_state17_pp0_stage0_iter3() {
    ap_block_state17_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void circ_buff_write_128::thread_ap_block_state18_pp0_stage0_iter4() {
    ap_block_state18_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void circ_buff_write_128::thread_ap_block_state19_pp0_stage0_iter5() {
    ap_block_state19_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void circ_buff_write_128::thread_ap_block_state20_pp0_stage0_iter6() {
    ap_block_state20_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void circ_buff_write_128::thread_ap_block_state21_pp0_stage0_iter7() {
    ap_block_state21_pp0_stage0_iter7 = (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter6_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read()));
}

void circ_buff_write_128::thread_ap_block_state29() {
    ap_block_state29 = (esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_writeresp_state29.read()));
}

void circ_buff_write_128::thread_ap_condition_485() {
    ap_condition_485 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void circ_buff_write_128::thread_ap_condition_495() {
    ap_condition_495 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0));
}

void circ_buff_write_128::thread_ap_condition_pp0_exit_iter0_state14() {
    if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_457_p2.read())) {
        ap_condition_pp0_exit_iter0_state14 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state14 = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_writeresp_state29.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void circ_buff_write_128::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_ap_phi_mux_t_V_phi_fu_234_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1))) {
        ap_phi_mux_t_V_phi_fu_234_p4 = tmp_16_reg_621.read();
    } else {
        ap_phi_mux_t_V_phi_fu_234_p4 = t_V_reg_231.read();
    }
}

void circ_buff_write_128::thread_ap_predicate_op141_writeresp_state29() {
    ap_predicate_op141_writeresp_state29 = (esl_seteq<1,1,1>(tmp_reg_530.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_566.read()));
}

void circ_buff_write_128::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_writeresp_state29.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void circ_buff_write_128::thread_ap_sig_ioackin_gmem_out_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_ARREADY.read())) {
        ap_sig_ioackin_gmem_out_ARREADY = gmem_out_ARREADY.read();
    } else {
        ap_sig_ioackin_gmem_out_ARREADY = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_ap_sig_ioackin_gmem_out_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_AWREADY.read())) {
        ap_sig_ioackin_gmem_out_AWREADY = gmem_out_AWREADY.read();
    } else {
        ap_sig_ioackin_gmem_out_AWREADY = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_ap_sig_ioackin_gmem_out_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_WREADY.read())) {
        ap_sig_ioackin_gmem_out_WREADY = gmem_out_WREADY.read();
    } else {
        ap_sig_ioackin_gmem_out_WREADY = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_bytes_to_write_2_fu_368_p1() {
    bytes_to_write_2_fu_368_p1 = esl_zext<16,15>(h_reg_209.read());
}

void circ_buff_write_128::thread_bytes_to_write_fu_362_p2() {
    bytes_to_write_fu_362_p2 = (!p_neg1_pn_fu_356_p2.read().is_01() || !tmp_8_fu_342_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_neg1_pn_fu_356_p2.read()) - sc_biguint<16>(tmp_8_fu_342_p1.read()));
}

void circ_buff_write_128::thread_data_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        data_V_address0 =  (sc_lv<9>) (tmp_15_fu_473_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        data_V_address0 =  (sc_lv<9>) (tmp_11_fu_421_p1.read());
    } else {
        data_V_address0 = "XXXXXXXXX";
    }
}

void circ_buff_write_128::thread_data_V_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(stream_in_V_TVALID.read(), ap_const_logic_1)))) {
        data_V_ce0 = ap_const_logic_1;
    } else {
        data_V_ce0 = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_data_V_d0() {
    data_V_d0 = esl_concat<32,64>(tmp_5_fu_402_p4.read(), tmp_3_fu_397_p2.read());
}

void circ_buff_write_128::thread_data_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(stream_in_V_TVALID.read(), ap_const_logic_1))) {
        data_V_we0 = ap_const_logic_1;
    } else {
        data_V_we0 = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_empty_n_fu_383_p1() {
    empty_n_fu_383_p1 =  (sc_lv<1>) (stream_in_V_TVALID.read());
}

void circ_buff_write_128::thread_extLd_fu_505_p1() {
    extLd_fu_505_p1 = esl_zext<128,96>(data_V_load_reg_626.read());
}

void circ_buff_write_128::thread_gmem_out_ARADDR() {
    gmem_out_ARADDR =  (sc_lv<32>) (output_V2_sum_cast_fu_277_p1.read());
}

void circ_buff_write_128::thread_gmem_out_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_ARREADY.read()))) {
        gmem_out_ARVALID = ap_const_logic_1;
    } else {
        gmem_out_ARVALID = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_gmem_out_AWADDR() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_AWREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
            gmem_out_AWADDR =  (sc_lv<32>) (output_V2_sum3_cast_fu_514_p1.read());
        } else if (esl_seteq<1,1,1>(ap_condition_485.read(), ap_const_boolean_1)) {
            gmem_out_AWADDR =  (sc_lv<32>) (output_V2_sum4_cast_fu_495_p1.read());
        } else {
            gmem_out_AWADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        gmem_out_AWADDR =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void circ_buff_write_128::thread_gmem_out_AWVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_AWREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_AWREADY.read())))) {
        gmem_out_AWVALID = ap_const_logic_1;
    } else {
        gmem_out_AWVALID = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_gmem_out_BREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter6_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_writeresp_state29.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_writeresp_state29.read()))))) {
        gmem_out_BREADY = ap_const_logic_1;
    } else {
        gmem_out_BREADY = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_gmem_out_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(gmem_out_RVALID.read(), ap_const_logic_1))) {
        gmem_out_RREADY = ap_const_logic_1;
    } else {
        gmem_out_RREADY = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_gmem_out_WDATA() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_WREADY.read())) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
            gmem_out_WDATA = tmp_19_reg_597.read();
        } else if (esl_seteq<1,1,1>(ap_condition_495.read(), ap_const_boolean_1)) {
            gmem_out_WDATA = extLd_fu_505_p1.read();
        } else {
            gmem_out_WDATA =  (sc_lv<128>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
        }
    } else {
        gmem_out_WDATA =  (sc_lv<128>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void circ_buff_write_128::thread_gmem_out_WVALID() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_WREADY.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_gmem_out_WREADY.read())))) {
        gmem_out_WVALID = ap_const_logic_1;
    } else {
        gmem_out_WVALID = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_gmem_out_blk_n_AR() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        gmem_out_blk_n_AR = m_axi_gmem_out_ARREADY.read();
    } else {
        gmem_out_blk_n_AR = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_gmem_out_blk_n_AW() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(tmp_12_reg_602.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        gmem_out_blk_n_AW = m_axi_gmem_out_AWREADY.read();
    } else {
        gmem_out_blk_n_AW = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_gmem_out_blk_n_B() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter6_reg.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && 
          esl_seteq<1,1,1>(tmp_reg_530.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_reg_566.read())))) {
        gmem_out_blk_n_B = m_axi_gmem_out_BVALID.read();
    } else {
        gmem_out_blk_n_B = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_gmem_out_blk_n_R() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        gmem_out_blk_n_R = m_axi_gmem_out_RVALID.read();
    } else {
        gmem_out_blk_n_R = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_gmem_out_blk_n_W() {
    if (((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_12_reg_602_pp0_iter1_reg.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        gmem_out_blk_n_W = m_axi_gmem_out_WREADY.read();
    } else {
        gmem_out_blk_n_W = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_h1_cast_fu_453_p1() {
    h1_cast_fu_453_p1 = esl_zext<16,15>(h1_reg_240.read());
}

void circ_buff_write_128::thread_h_1_fu_377_p2() {
    h_1_fu_377_p2 = (!h_reg_209.read().is_01() || !ap_const_lv15_1.is_01())? sc_lv<15>(): (sc_biguint<15>(h_reg_209.read()) + sc_biguint<15>(ap_const_lv15_1));
}

void circ_buff_write_128::thread_h_2_fu_463_p2() {
    h_2_fu_463_p2 = (!h1_reg_240.read().is_01() || !ap_const_lv15_1.is_01())? sc_lv<15>(): (sc_biguint<15>(h1_reg_240.read()) + sc_biguint<15>(ap_const_lv15_1));
}

void circ_buff_write_128::thread_lhs_V_cast_fu_291_p1() {
    lhs_V_cast_fu_291_p1 = esl_zext<10,9>(stream_head_V.read());
}

void circ_buff_write_128::thread_or_cond_fu_331_p2() {
    or_cond_fu_331_p2 = (tmp_4_fu_315_p2.read() | tmp_6_fu_325_p2.read());
}

void circ_buff_write_128::thread_output_V2_sum3_cast_fu_514_p1() {
    output_V2_sum3_cast_fu_514_p1 = esl_zext<64,29>(output_V2_sum3_reg_637.read());
}

void circ_buff_write_128::thread_output_V2_sum3_fu_509_p2() {
    output_V2_sum3_fu_509_p2 = (!tmp_17_cast_reg_524.read().is_01() || !ap_const_lv29_201.is_01())? sc_lv<29>(): (sc_biguint<29>(tmp_17_cast_reg_524.read()) + sc_biguint<29>(ap_const_lv29_201));
}

void circ_buff_write_128::thread_output_V2_sum4_cast_fu_495_p1() {
    output_V2_sum4_cast_fu_495_p1 = esl_zext<64,29>(output_V2_sum4_reg_616.read());
}

void circ_buff_write_128::thread_output_V2_sum4_fu_478_p2() {
    output_V2_sum4_fu_478_p2 = (!tmp_14_cast_fu_469_p1.read().is_01() || !tmp_17_cast_reg_524.read().is_01())? sc_lv<29>(): (sc_biguint<29>(tmp_14_cast_fu_469_p1.read()) + sc_biguint<29>(tmp_17_cast_reg_524.read()));
}

void circ_buff_write_128::thread_output_V2_sum_cast_fu_277_p1() {
    output_V2_sum_cast_fu_277_p1 = esl_zext<64,29>(output_V2_sum_reg_534.read());
}

void circ_buff_write_128::thread_output_V2_sum_fu_271_p2() {
    output_V2_sum_fu_271_p2 = (!tmp_17_cast_fu_261_p1.read().is_01() || !ap_const_lv29_200.is_01())? sc_lv<29>(): (sc_biguint<29>(tmp_17_cast_fu_261_p1.read()) + sc_biguint<29>(ap_const_lv29_200));
}

void circ_buff_write_128::thread_p_neg1_pn_fu_356_p2() {
    p_neg1_pn_fu_356_p2 = (!p_neg1_pn_v_cast_cast_fu_348_p3.read().is_01() || !tmp_2_fu_345_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_neg1_pn_v_cast_cast_fu_348_p3.read()) + sc_biguint<16>(tmp_2_fu_345_p1.read()));
}

void circ_buff_write_128::thread_p_neg1_pn_v_cast_cast_fu_348_p3() {
    p_neg1_pn_v_cast_cast_fu_348_p3 = (!tmp_7_fu_337_p2.read()[0].is_01())? sc_lv<16>(): ((tmp_7_fu_337_p2.read()[0].to_bool())? ap_const_lv16_FFFF: ap_const_lv16_1FF);
}

void circ_buff_write_128::thread_ret_V_2_cast5_fu_306_p1() {
    ret_V_2_cast5_fu_306_p1 = esl_zext<128,10>(ret_V_reg_560.read());
}

void circ_buff_write_128::thread_ret_V_2_cast6_fu_301_p2() {
    ret_V_2_cast6_fu_301_p2 = (!stream_head_V_load_reg_552.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(stream_head_V_load_reg_552.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void circ_buff_write_128::thread_ret_V_2_cast_fu_309_p1() {
    ret_V_2_cast_fu_309_p1 = esl_zext<129,10>(ret_V_reg_560.read());
}

void circ_buff_write_128::thread_ret_V_cast_fu_321_p1() {
    ret_V_cast_fu_321_p1 = esl_zext<129,9>(ret_V_2_cast6_fu_301_p2.read());
}

void circ_buff_write_128::thread_ret_V_fu_295_p2() {
    ret_V_fu_295_p2 = (!lhs_V_cast_fu_291_p1.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(lhs_V_cast_fu_291_p1.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void circ_buff_write_128::thread_stream_in_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        stream_in_V_TDATA_blk_n = stream_in_V_TVALID.read();
    } else {
        stream_in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void circ_buff_write_128::thread_stream_in_V_TREADY() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_372_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(stream_in_V_TVALID.read(), ap_const_logic_1)))) {
        stream_in_V_TREADY = ap_const_logic_1;
    } else {
        stream_in_V_TREADY = ap_const_logic_0;
    }
}

void circ_buff_write_128::thread_tmp_11_fu_421_p1() {
    tmp_11_fu_421_p1 = esl_zext<64,15>(h_reg_209.read());
}

void circ_buff_write_128::thread_tmp_12_fu_457_p2() {
    tmp_12_fu_457_p2 = (!h1_cast_fu_453_p1.read().is_01() || !bytes_to_write_1_reg_221.read().is_01())? sc_lv<1>(): (sc_bigint<16>(h1_cast_fu_453_p1.read()) < sc_bigint<16>(bytes_to_write_1_reg_221.read()));
}

void circ_buff_write_128::thread_tmp_14_cast_fu_469_p1() {
    tmp_14_cast_fu_469_p1 = esl_zext<29,9>(ap_phi_mux_t_V_phi_fu_234_p4.read());
}

void circ_buff_write_128::thread_tmp_14_fu_432_p1() {
    tmp_14_fu_432_p1 = bytes_to_write_1_reg_221.read().range(9-1, 0);
}

void circ_buff_write_128::thread_tmp_15_fu_473_p1() {
    tmp_15_fu_473_p1 = esl_zext<64,15>(h1_reg_240.read());
}

void circ_buff_write_128::thread_tmp_16_fu_483_p2() {
    tmp_16_fu_483_p2 = (!ap_phi_mux_t_V_phi_fu_234_p4.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(ap_phi_mux_t_V_phi_fu_234_p4.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void circ_buff_write_128::thread_tmp_17_cast_fu_261_p1() {
    tmp_17_cast_fu_261_p1 = esl_zext<29,28>(tmp_1_fu_251_p4.read());
}

void circ_buff_write_128::thread_tmp_17_fu_436_p3() {
    tmp_17_fu_436_p3 = (!tmp_9_fu_426_p2.read()[0].is_01())? sc_lv<9>(): ((tmp_9_fu_426_p2.read()[0].to_bool())? tmp_14_fu_432_p1.read(): ap_const_lv9_0);
}

void circ_buff_write_128::thread_tmp_18_fu_444_p2() {
    tmp_18_fu_444_p2 = (!tmp_17_fu_436_p3.read().is_01() || !stream_head_V_load_reg_552.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_17_fu_436_p3.read()) + sc_biguint<9>(stream_head_V_load_reg_552.read()));
}

void circ_buff_write_128::thread_tmp_19_fu_449_p1() {
    tmp_19_fu_449_p1 = esl_zext<128,9>(tmp_18_fu_444_p2.read());
}

void circ_buff_write_128::thread_tmp_1_fu_251_p4() {
    tmp_1_fu_251_p4 = output_V.read().range(31, 4);
}

void circ_buff_write_128::thread_tmp_21_fu_391_p2() {
    tmp_21_fu_391_p2 = (!ap_const_lv64_20.is_01())? sc_lv<64>(): stream_in_V_TDATA.read() << (unsigned short)ap_const_lv64_20.to_uint();
}

void circ_buff_write_128::thread_tmp_2_fu_345_p1() {
    tmp_2_fu_345_p1 = stream_tail_V_reg_545.read().range(16-1, 0);
}

void circ_buff_write_128::thread_tmp_3_cast_fu_312_p1() {
    tmp_3_cast_fu_312_p1 = esl_zext<129,128>(stream_tail_V_reg_545.read());
}

void circ_buff_write_128::thread_tmp_3_fu_397_p2() {
    tmp_3_fu_397_p2 = (tmp_22_reg_592.read() | tmp_21_fu_391_p2.read());
}

void circ_buff_write_128::thread_tmp_4_fu_315_p2() {
    tmp_4_fu_315_p2 = (!ret_V_2_cast_fu_309_p1.read().is_01() || !tmp_3_cast_fu_312_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(ret_V_2_cast_fu_309_p1.read() == tmp_3_cast_fu_312_p1.read());
}

void circ_buff_write_128::thread_tmp_5_fu_402_p4() {
    tmp_5_fu_402_p4 = stream_in_V_TDATA.read().range(63, 32);
}

void circ_buff_write_128::thread_tmp_6_fu_325_p2() {
    tmp_6_fu_325_p2 = (!ret_V_cast_fu_321_p1.read().is_01() || !tmp_3_cast_fu_312_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(ret_V_cast_fu_321_p1.read() == tmp_3_cast_fu_312_p1.read());
}

void circ_buff_write_128::thread_tmp_7_fu_337_p2() {
    tmp_7_fu_337_p2 = (!ret_V_2_cast5_fu_306_p1.read().is_01() || !stream_tail_V_reg_545.read().is_01())? sc_lv<1>(): (sc_biguint<128>(ret_V_2_cast5_fu_306_p1.read()) < sc_biguint<128>(stream_tail_V_reg_545.read()));
}

void circ_buff_write_128::thread_tmp_8_fu_342_p1() {
    tmp_8_fu_342_p1 = esl_zext<16,9>(stream_head_V_load_reg_552.read());
}

void circ_buff_write_128::thread_tmp_9_fu_426_p2() {
    tmp_9_fu_426_p2 = (!bytes_to_write_1_reg_221.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): (sc_bigint<16>(bytes_to_write_1_reg_221.read()) > sc_bigint<16>(ap_const_lv16_0));
}

void circ_buff_write_128::thread_tmp_fu_265_p2() {
    tmp_fu_265_p2 = (!reset.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<1>(): sc_lv<1>(reset.read() == ap_const_lv8_1);
}

void circ_buff_write_128::thread_tmp_s_fu_372_p2() {
    tmp_s_fu_372_p2 = (!bytes_to_write_2_fu_368_p1.read().is_01() || !bytes_to_write_reg_570.read().is_01())? sc_lv<1>(): (sc_bigint<16>(bytes_to_write_2_fu_368_p1.read()) < sc_bigint<16>(bytes_to_write_reg_570.read()));
}

void circ_buff_write_128::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_265_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state29;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_265_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_out_ARREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(gmem_out_RVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_fu_331_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_s_fu_372_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, empty_n_fu_383_p1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(stream_in_V_TVALID.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 8192 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_457_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter7.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter6.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_12_fu_457_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state22;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_out_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_gmem_out_WREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, gmem_out_BVALID.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_predicate_op141_writeresp_state29.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<22>) ("XXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void circ_buff_write_128::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_gmem_out_AWVALID\" :  \"" << m_axi_gmem_out_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_AWREADY\" :  \"" << m_axi_gmem_out_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWADDR\" :  \"" << m_axi_gmem_out_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWID\" :  \"" << m_axi_gmem_out_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWLEN\" :  \"" << m_axi_gmem_out_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWSIZE\" :  \"" << m_axi_gmem_out_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWBURST\" :  \"" << m_axi_gmem_out_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWLOCK\" :  \"" << m_axi_gmem_out_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWCACHE\" :  \"" << m_axi_gmem_out_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWPROT\" :  \"" << m_axi_gmem_out_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWQOS\" :  \"" << m_axi_gmem_out_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWREGION\" :  \"" << m_axi_gmem_out_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_AWUSER\" :  \"" << m_axi_gmem_out_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_WVALID\" :  \"" << m_axi_gmem_out_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_WREADY\" :  \"" << m_axi_gmem_out_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_WDATA\" :  \"" << m_axi_gmem_out_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_WSTRB\" :  \"" << m_axi_gmem_out_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_WLAST\" :  \"" << m_axi_gmem_out_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_WID\" :  \"" << m_axi_gmem_out_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_WUSER\" :  \"" << m_axi_gmem_out_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARVALID\" :  \"" << m_axi_gmem_out_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_ARREADY\" :  \"" << m_axi_gmem_out_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARADDR\" :  \"" << m_axi_gmem_out_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARID\" :  \"" << m_axi_gmem_out_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARLEN\" :  \"" << m_axi_gmem_out_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARSIZE\" :  \"" << m_axi_gmem_out_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARBURST\" :  \"" << m_axi_gmem_out_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARLOCK\" :  \"" << m_axi_gmem_out_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARCACHE\" :  \"" << m_axi_gmem_out_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARPROT\" :  \"" << m_axi_gmem_out_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARQOS\" :  \"" << m_axi_gmem_out_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARREGION\" :  \"" << m_axi_gmem_out_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_ARUSER\" :  \"" << m_axi_gmem_out_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_RVALID\" :  \"" << m_axi_gmem_out_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_RREADY\" :  \"" << m_axi_gmem_out_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_RDATA\" :  \"" << m_axi_gmem_out_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_RLAST\" :  \"" << m_axi_gmem_out_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_RID\" :  \"" << m_axi_gmem_out_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_RUSER\" :  \"" << m_axi_gmem_out_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_RRESP\" :  \"" << m_axi_gmem_out_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_BVALID\" :  \"" << m_axi_gmem_out_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_gmem_out_BREADY\" :  \"" << m_axi_gmem_out_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_BRESP\" :  \"" << m_axi_gmem_out_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_BID\" :  \"" << m_axi_gmem_out_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_gmem_out_BUSER\" :  \"" << m_axi_gmem_out_BUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_V_TDATA\" :  \"" << stream_in_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"stream_in_V_TVALID\" :  \"" << stream_in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"stream_in_V_TREADY\" :  \"" << stream_in_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

