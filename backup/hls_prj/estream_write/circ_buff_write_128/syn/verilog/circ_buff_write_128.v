// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="circ_buff_write_128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.153625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=1336,HLS_SYN_LUT=1834,HLS_VERSION=2018_3}" *)

module circ_buff_write_128 (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY,
        m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID,
        m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA,
        m_axi_gmem_out_RLAST,
        m_axi_gmem_out_RID,
        m_axi_gmem_out_RUSER,
        m_axi_gmem_out_RRESP,
        m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER,
        stream_in_V_TDATA,
        stream_in_V_TVALID,
        stream_in_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_pp0_stage0 = 22'd8192;
parameter    ap_ST_fsm_state22 = 22'd16384;
parameter    ap_ST_fsm_state23 = 22'd32768;
parameter    ap_ST_fsm_state24 = 22'd65536;
parameter    ap_ST_fsm_state25 = 22'd131072;
parameter    ap_ST_fsm_state26 = 22'd262144;
parameter    ap_ST_fsm_state27 = 22'd524288;
parameter    ap_ST_fsm_state28 = 22'd1048576;
parameter    ap_ST_fsm_state29 = 22'd2097152;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_OUT_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_OUT_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM_OUT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_OUT_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_OUT_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_OUT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_OUT_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_out_AWVALID;
input   m_axi_gmem_out_AWREADY;
output  [C_M_AXI_GMEM_OUT_ADDR_WIDTH - 1:0] m_axi_gmem_out_AWADDR;
output  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_AWID;
output  [7:0] m_axi_gmem_out_AWLEN;
output  [2:0] m_axi_gmem_out_AWSIZE;
output  [1:0] m_axi_gmem_out_AWBURST;
output  [1:0] m_axi_gmem_out_AWLOCK;
output  [3:0] m_axi_gmem_out_AWCACHE;
output  [2:0] m_axi_gmem_out_AWPROT;
output  [3:0] m_axi_gmem_out_AWQOS;
output  [3:0] m_axi_gmem_out_AWREGION;
output  [C_M_AXI_GMEM_OUT_AWUSER_WIDTH - 1:0] m_axi_gmem_out_AWUSER;
output   m_axi_gmem_out_WVALID;
input   m_axi_gmem_out_WREADY;
output  [C_M_AXI_GMEM_OUT_DATA_WIDTH - 1:0] m_axi_gmem_out_WDATA;
output  [C_M_AXI_GMEM_OUT_WSTRB_WIDTH - 1:0] m_axi_gmem_out_WSTRB;
output   m_axi_gmem_out_WLAST;
output  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_WID;
output  [C_M_AXI_GMEM_OUT_WUSER_WIDTH - 1:0] m_axi_gmem_out_WUSER;
output   m_axi_gmem_out_ARVALID;
input   m_axi_gmem_out_ARREADY;
output  [C_M_AXI_GMEM_OUT_ADDR_WIDTH - 1:0] m_axi_gmem_out_ARADDR;
output  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_ARID;
output  [7:0] m_axi_gmem_out_ARLEN;
output  [2:0] m_axi_gmem_out_ARSIZE;
output  [1:0] m_axi_gmem_out_ARBURST;
output  [1:0] m_axi_gmem_out_ARLOCK;
output  [3:0] m_axi_gmem_out_ARCACHE;
output  [2:0] m_axi_gmem_out_ARPROT;
output  [3:0] m_axi_gmem_out_ARQOS;
output  [3:0] m_axi_gmem_out_ARREGION;
output  [C_M_AXI_GMEM_OUT_ARUSER_WIDTH - 1:0] m_axi_gmem_out_ARUSER;
input   m_axi_gmem_out_RVALID;
output   m_axi_gmem_out_RREADY;
input  [C_M_AXI_GMEM_OUT_DATA_WIDTH - 1:0] m_axi_gmem_out_RDATA;
input   m_axi_gmem_out_RLAST;
input  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_RID;
input  [C_M_AXI_GMEM_OUT_RUSER_WIDTH - 1:0] m_axi_gmem_out_RUSER;
input  [1:0] m_axi_gmem_out_RRESP;
input   m_axi_gmem_out_BVALID;
output   m_axi_gmem_out_BREADY;
input  [1:0] m_axi_gmem_out_BRESP;
input  [C_M_AXI_GMEM_OUT_ID_WIDTH - 1:0] m_axi_gmem_out_BID;
input  [C_M_AXI_GMEM_OUT_BUSER_WIDTH - 1:0] m_axi_gmem_out_BUSER;
input  [63:0] stream_in_V_TDATA;
input   stream_in_V_TVALID;
output   stream_in_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg stream_in_V_TREADY;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] output_V;
wire   [7:0] reset;
reg   [8:0] stream_head_V;
reg    gmem_out_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_out_blk_n_R;
wire    ap_CS_fsm_state9;
reg    gmem_out_blk_n_AW;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_12_reg_602;
reg    gmem_out_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_12_reg_602_pp0_iter1_reg;
reg    gmem_out_blk_n_B;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] tmp_12_reg_602_pp0_iter6_reg;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state29;
reg   [0:0] tmp_reg_530;
reg   [0:0] or_cond_reg_566;
reg    stream_in_V_TDATA_blk_n;
wire    ap_CS_fsm_state12;
reg    gmem_out_AWVALID;
wire    gmem_out_AWREADY;
reg   [31:0] gmem_out_AWADDR;
reg    gmem_out_WVALID;
wire    gmem_out_WREADY;
reg   [127:0] gmem_out_WDATA;
reg    gmem_out_ARVALID;
wire    gmem_out_ARREADY;
wire   [31:0] gmem_out_ARADDR;
wire    gmem_out_RVALID;
reg    gmem_out_RREADY;
wire   [127:0] gmem_out_RDATA;
wire    gmem_out_RLAST;
wire   [0:0] gmem_out_RID;
wire   [0:0] gmem_out_RUSER;
wire   [1:0] gmem_out_RRESP;
wire    gmem_out_BVALID;
reg    gmem_out_BREADY;
wire   [1:0] gmem_out_BRESP;
wire   [0:0] gmem_out_BID;
wire   [0:0] gmem_out_BUSER;
reg   [8:0] t_V_reg_231;
reg   [14:0] h1_reg_240;
wire   [28:0] tmp_17_cast_fu_261_p1;
reg   [28:0] tmp_17_cast_reg_524;
wire   [0:0] tmp_fu_265_p2;
wire   [28:0] output_V2_sum_fu_271_p2;
reg   [28:0] output_V2_sum_reg_534;
reg    ap_sig_ioackin_gmem_out_ARREADY;
reg   [127:0] stream_tail_V_reg_545;
reg   [8:0] stream_head_V_load_reg_552;
wire   [9:0] ret_V_fu_295_p2;
reg   [9:0] ret_V_reg_560;
wire   [0:0] or_cond_fu_331_p2;
wire    ap_CS_fsm_state10;
wire   [15:0] bytes_to_write_fu_362_p2;
reg   [15:0] bytes_to_write_reg_570;
wire   [15:0] bytes_to_write_2_fu_368_p1;
wire    ap_CS_fsm_state11;
wire   [14:0] h_1_fu_377_p2;
reg   [14:0] h_1_reg_584;
reg   [63:0] tmp_22_reg_592;
wire   [0:0] tmp_s_fu_372_p2;
wire   [127:0] tmp_19_fu_449_p1;
reg   [127:0] tmp_19_reg_597;
wire    ap_CS_fsm_state13;
wire   [0:0] tmp_12_fu_457_p2;
wire    ap_block_state14_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
reg    ap_sig_ioackin_gmem_out_AWREADY;
reg    ap_block_state15_io;
wire    ap_block_state16_pp0_stage0_iter2;
reg    ap_sig_ioackin_gmem_out_WREADY;
reg    ap_block_state16_io;
wire    ap_block_state17_pp0_stage0_iter3;
wire    ap_block_state18_pp0_stage0_iter4;
wire    ap_block_state19_pp0_stage0_iter5;
wire    ap_block_state20_pp0_stage0_iter6;
reg    ap_block_state21_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_12_reg_602_pp0_iter2_reg;
reg   [0:0] tmp_12_reg_602_pp0_iter3_reg;
reg   [0:0] tmp_12_reg_602_pp0_iter4_reg;
reg   [0:0] tmp_12_reg_602_pp0_iter5_reg;
wire   [14:0] h_2_fu_463_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [28:0] output_V2_sum4_fu_478_p2;
reg   [28:0] output_V2_sum4_reg_616;
wire   [8:0] tmp_16_fu_483_p2;
reg   [8:0] tmp_16_reg_621;
wire   [95:0] data_V_q0;
reg   [95:0] data_V_load_reg_626;
wire   [28:0] output_V2_sum3_fu_509_p2;
reg   [28:0] output_V2_sum3_reg_637;
wire    ap_CS_fsm_state22;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state14;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [8:0] data_V_address0;
reg    data_V_ce0;
reg    data_V_we0;
wire   [95:0] data_V_d0;
reg   [14:0] h_reg_209;
reg   [15:0] bytes_to_write_1_reg_221;
wire   [0:0] empty_n_fu_383_p1;
reg   [8:0] ap_phi_mux_t_V_phi_fu_234_p4;
wire   [63:0] tmp_11_fu_421_p1;
wire   [63:0] tmp_15_fu_473_p1;
wire   [63:0] output_V2_sum_cast_fu_277_p1;
wire   [63:0] output_V2_sum4_cast_fu_495_p1;
wire   [63:0] output_V2_sum3_cast_fu_514_p1;
reg    ap_reg_ioackin_gmem_out_ARREADY;
reg    ap_reg_ioackin_gmem_out_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_gmem_out_WREADY;
wire   [127:0] extLd_fu_505_p1;
reg    ap_predicate_op141_writeresp_state29;
reg    ap_block_state29;
wire   [27:0] tmp_1_fu_251_p4;
wire   [9:0] lhs_V_cast_fu_291_p1;
wire   [128:0] ret_V_2_cast_fu_309_p1;
wire   [128:0] tmp_3_cast_fu_312_p1;
wire   [8:0] ret_V_2_cast6_fu_301_p2;
wire   [128:0] ret_V_cast_fu_321_p1;
wire   [0:0] tmp_4_fu_315_p2;
wire   [0:0] tmp_6_fu_325_p2;
wire   [127:0] ret_V_2_cast5_fu_306_p1;
wire   [0:0] tmp_7_fu_337_p2;
wire   [15:0] p_neg1_pn_v_cast_cast_fu_348_p3;
wire   [15:0] tmp_2_fu_345_p1;
wire   [15:0] p_neg1_pn_fu_356_p2;
wire   [15:0] tmp_8_fu_342_p1;
wire   [63:0] tmp_21_fu_391_p2;
wire   [31:0] tmp_5_fu_402_p4;
wire   [63:0] tmp_3_fu_397_p2;
wire   [0:0] tmp_9_fu_426_p2;
wire   [8:0] tmp_14_fu_432_p1;
wire   [8:0] tmp_17_fu_436_p3;
wire   [8:0] tmp_18_fu_444_p2;
wire   [15:0] h1_cast_fu_453_p1;
wire   [28:0] tmp_14_cast_fu_469_p1;
reg   [21:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_485;
reg    ap_condition_495;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 stream_head_V = 9'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_reg_ioackin_gmem_out_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_out_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_out_WREADY = 1'b0;
end

circ_buff_write_128_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
circ_buff_write_128_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .output_V(output_V),
    .reset(reset)
);

circ_buff_write_128_gmem_out_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_OUT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_OUT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_OUT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_OUT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_OUT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_OUT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_OUT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_OUT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_OUT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_OUT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_OUT_CACHE_VALUE ))
circ_buff_write_128_gmem_out_m_axi_U(
    .AWVALID(m_axi_gmem_out_AWVALID),
    .AWREADY(m_axi_gmem_out_AWREADY),
    .AWADDR(m_axi_gmem_out_AWADDR),
    .AWID(m_axi_gmem_out_AWID),
    .AWLEN(m_axi_gmem_out_AWLEN),
    .AWSIZE(m_axi_gmem_out_AWSIZE),
    .AWBURST(m_axi_gmem_out_AWBURST),
    .AWLOCK(m_axi_gmem_out_AWLOCK),
    .AWCACHE(m_axi_gmem_out_AWCACHE),
    .AWPROT(m_axi_gmem_out_AWPROT),
    .AWQOS(m_axi_gmem_out_AWQOS),
    .AWREGION(m_axi_gmem_out_AWREGION),
    .AWUSER(m_axi_gmem_out_AWUSER),
    .WVALID(m_axi_gmem_out_WVALID),
    .WREADY(m_axi_gmem_out_WREADY),
    .WDATA(m_axi_gmem_out_WDATA),
    .WSTRB(m_axi_gmem_out_WSTRB),
    .WLAST(m_axi_gmem_out_WLAST),
    .WID(m_axi_gmem_out_WID),
    .WUSER(m_axi_gmem_out_WUSER),
    .ARVALID(m_axi_gmem_out_ARVALID),
    .ARREADY(m_axi_gmem_out_ARREADY),
    .ARADDR(m_axi_gmem_out_ARADDR),
    .ARID(m_axi_gmem_out_ARID),
    .ARLEN(m_axi_gmem_out_ARLEN),
    .ARSIZE(m_axi_gmem_out_ARSIZE),
    .ARBURST(m_axi_gmem_out_ARBURST),
    .ARLOCK(m_axi_gmem_out_ARLOCK),
    .ARCACHE(m_axi_gmem_out_ARCACHE),
    .ARPROT(m_axi_gmem_out_ARPROT),
    .ARQOS(m_axi_gmem_out_ARQOS),
    .ARREGION(m_axi_gmem_out_ARREGION),
    .ARUSER(m_axi_gmem_out_ARUSER),
    .RVALID(m_axi_gmem_out_RVALID),
    .RREADY(m_axi_gmem_out_RREADY),
    .RDATA(m_axi_gmem_out_RDATA),
    .RLAST(m_axi_gmem_out_RLAST),
    .RID(m_axi_gmem_out_RID),
    .RUSER(m_axi_gmem_out_RUSER),
    .RRESP(m_axi_gmem_out_RRESP),
    .BVALID(m_axi_gmem_out_BVALID),
    .BREADY(m_axi_gmem_out_BREADY),
    .BRESP(m_axi_gmem_out_BRESP),
    .BID(m_axi_gmem_out_BID),
    .BUSER(m_axi_gmem_out_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_out_ARVALID),
    .I_ARREADY(gmem_out_ARREADY),
    .I_ARADDR(gmem_out_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_out_RVALID),
    .I_RREADY(gmem_out_RREADY),
    .I_RDATA(gmem_out_RDATA),
    .I_RID(gmem_out_RID),
    .I_RUSER(gmem_out_RUSER),
    .I_RRESP(gmem_out_RRESP),
    .I_RLAST(gmem_out_RLAST),
    .I_AWVALID(gmem_out_AWVALID),
    .I_AWREADY(gmem_out_AWREADY),
    .I_AWADDR(gmem_out_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_out_WVALID),
    .I_WREADY(gmem_out_WREADY),
    .I_WDATA(gmem_out_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd65535),
    .I_BVALID(gmem_out_BVALID),
    .I_BREADY(gmem_out_BREADY),
    .I_BRESP(gmem_out_BRESP),
    .I_BID(gmem_out_BID),
    .I_BUSER(gmem_out_BUSER)
);

circ_buff_write_128_data_V #(
    .DataWidth( 96 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_V_address0),
    .ce0(data_V_ce0),
    .we0(data_V_we0),
    .d0(data_V_d0),
    .q0(data_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state14)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_out_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_gmem_out_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_out_ARREADY <= 1'b0;
            end else if ((gmem_out_ARREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_out_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_out_AWREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_602 == 1'd1)))) begin
            ap_reg_ioackin_gmem_out_AWREADY <= 1'b0;
        end else if ((((gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23)) | ((1'b0 == ap_block_pp0_stage0_01001) & (gmem_out_AWREADY == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_602 == 1'd1)))) begin
            ap_reg_ioackin_gmem_out_AWREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_out_WREADY <= 1'b0;
    end else begin
        if ((((ap_sig_ioackin_gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_12_reg_602_pp0_iter1_reg == 1'd1)))) begin
            ap_reg_ioackin_gmem_out_WREADY <= 1'b0;
        end else if ((((gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24)) | ((1'b0 == ap_block_pp0_stage0_01001) & (gmem_out_WREADY == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_12_reg_602_pp0_iter1_reg == 1'd1)))) begin
            ap_reg_ioackin_gmem_out_WREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        if ((tmp_s_fu_372_p2 == 1'd0)) begin
            bytes_to_write_1_reg_221 <= bytes_to_write_reg_570;
        end else if (((empty_n_fu_383_p1 == 1'd0) & (tmp_s_fu_372_p2 == 1'd1))) begin
            bytes_to_write_1_reg_221 <= bytes_to_write_2_fu_368_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_fu_457_p2 == 1'd1))) begin
        h1_reg_240 <= h_2_fu_463_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        h1_reg_240 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((stream_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        h_reg_209 <= h_1_reg_584;
    end else if (((1'b1 == ap_CS_fsm_state10) & (or_cond_fu_331_p2 == 1'd0))) begin
        h_reg_209 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_602 == 1'd1))) begin
        t_V_reg_231 <= tmp_16_reg_621;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        t_V_reg_231 <= stream_head_V_load_reg_552;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (or_cond_fu_331_p2 == 1'd0))) begin
        bytes_to_write_reg_570 <= bytes_to_write_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_602 == 1'd1))) begin
        data_V_load_reg_626 <= data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        h_1_reg_584 <= h_1_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        or_cond_reg_566 <= or_cond_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_V2_sum3_reg_637 <= output_V2_sum3_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_fu_457_p2 == 1'd1))) begin
        output_V2_sum4_reg_616 <= output_V2_sum4_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_265_p2 == 1'd0))) begin
        output_V2_sum_reg_534 <= output_V2_sum_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_out_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ret_V_reg_560 <= ret_V_fu_295_p2;
        stream_head_V_load_reg_552 <= stream_head_V;
        stream_tail_V_reg_545 <= gmem_out_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_fu_457_p2 == 1'd1))) begin
        stream_head_V <= tmp_16_fu_483_p2;
        tmp_16_reg_621 <= tmp_16_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_12_reg_602 <= tmp_12_fu_457_p2;
        tmp_12_reg_602_pp0_iter1_reg <= tmp_12_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_12_reg_602_pp0_iter2_reg <= tmp_12_reg_602_pp0_iter1_reg;
        tmp_12_reg_602_pp0_iter3_reg <= tmp_12_reg_602_pp0_iter2_reg;
        tmp_12_reg_602_pp0_iter4_reg <= tmp_12_reg_602_pp0_iter3_reg;
        tmp_12_reg_602_pp0_iter5_reg <= tmp_12_reg_602_pp0_iter4_reg;
        tmp_12_reg_602_pp0_iter6_reg <= tmp_12_reg_602_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_17_cast_reg_524[27 : 0] <= tmp_17_cast_fu_261_p1[27 : 0];
        tmp_reg_530 <= tmp_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_19_reg_597[8 : 0] <= tmp_19_fu_449_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_s_fu_372_p2 == 1'd1))) begin
        tmp_22_reg_592 <= stream_in_V_TDATA;
    end
end

always @ (*) begin
    if ((tmp_12_fu_457_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op141_writeresp_state29 == 1'b1) & (gmem_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_602 == 1'd1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_t_V_phi_fu_234_p4 = tmp_16_reg_621;
    end else begin
        ap_phi_mux_t_V_phi_fu_234_p4 = t_V_reg_231;
    end
end

always @ (*) begin
    if ((~((ap_predicate_op141_writeresp_state29 == 1'b1) & (gmem_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_out_ARREADY = gmem_out_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_out_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_out_AWREADY = gmem_out_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_out_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_out_WREADY = gmem_out_WREADY;
    end else begin
        ap_sig_ioackin_gmem_out_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_address0 = tmp_15_fu_473_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        data_V_address0 = tmp_11_fu_421_p1;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((stream_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((stream_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_out_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        gmem_out_ARVALID = 1'b1;
    end else begin
        gmem_out_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_AWREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            gmem_out_AWADDR = output_V2_sum3_cast_fu_514_p1;
        end else if ((1'b1 == ap_condition_485)) begin
            gmem_out_AWADDR = output_V2_sum4_cast_fu_495_p1;
        end else begin
            gmem_out_AWADDR = 'bx;
        end
    end else begin
        gmem_out_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_out_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state23)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_gmem_out_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_602 == 1'd1)))) begin
        gmem_out_AWVALID = 1'b1;
    end else begin
        gmem_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_predicate_op141_writeresp_state29 == 1'b1) & (gmem_out_BVALID == 1'b0)) & (ap_predicate_op141_writeresp_state29 == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (tmp_12_reg_602_pp0_iter6_reg == 1'd1)))) begin
        gmem_out_BREADY = 1'b1;
    end else begin
        gmem_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((gmem_out_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        gmem_out_RREADY = 1'b1;
    end else begin
        gmem_out_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_out_WREADY == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state24)) begin
            gmem_out_WDATA = tmp_19_reg_597;
        end else if ((1'b1 == ap_condition_495)) begin
            gmem_out_WDATA = extLd_fu_505_p1;
        end else begin
            gmem_out_WDATA = 'bx;
        end
    end else begin
        gmem_out_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_reg_ioackin_gmem_out_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state24)) | ((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_gmem_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_12_reg_602_pp0_iter1_reg == 1'd1)))) begin
        gmem_out_WVALID = 1'b1;
    end else begin
        gmem_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem_out_blk_n_AR = m_axi_gmem_out_ARREADY;
    end else begin
        gmem_out_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_602 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_out_blk_n_AW = m_axi_gmem_out_AWREADY;
    end else begin
        gmem_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state29) & (or_cond_reg_566 == 1'd0) & (tmp_reg_530 == 1'd0)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & (tmp_12_reg_602_pp0_iter6_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_out_blk_n_B = m_axi_gmem_out_BVALID;
    end else begin
        gmem_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        gmem_out_blk_n_R = m_axi_gmem_out_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_12_reg_602_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_out_blk_n_W = m_axi_gmem_out_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        stream_in_V_TDATA_blk_n = stream_in_V_TVALID;
    end else begin
        stream_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & (tmp_s_fu_372_p2 == 1'd1)) | ((stream_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        stream_in_V_TREADY = 1'b1;
    end else begin
        stream_in_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_265_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_gmem_out_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((gmem_out_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (or_cond_fu_331_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (empty_n_fu_383_p1 == 1'd1) & (tmp_s_fu_372_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((stream_in_V_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_12_fu_457_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_12_fu_457_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((ap_sig_ioackin_gmem_out_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((ap_sig_ioackin_gmem_out_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state24))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if ((~((ap_predicate_op141_writeresp_state29 == 1'b1) & (gmem_out_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (tmp_12_reg_602_pp0_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (tmp_12_reg_602_pp0_iter6_reg == 1'd1)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (tmp_12_reg_602_pp0_iter6_reg == 1'd1)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state14_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((ap_sig_ioackin_gmem_out_AWREADY == 1'b0) & (tmp_12_reg_602 == 1'd1));
end

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((ap_sig_ioackin_gmem_out_WREADY == 1'b0) & (tmp_12_reg_602_pp0_iter1_reg == 1'd1));
end

assign ap_block_state16_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_pp0_stage0_iter7 = ((gmem_out_BVALID == 1'b0) & (tmp_12_reg_602_pp0_iter6_reg == 1'd1));
end

always @ (*) begin
    ap_block_state29 = ((ap_predicate_op141_writeresp_state29 == 1'b1) & (gmem_out_BVALID == 1'b0));
end

always @ (*) begin
    ap_condition_485 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_12_reg_602 == 1'd1));
end

always @ (*) begin
    ap_condition_495 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (tmp_12_reg_602_pp0_iter1_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_predicate_op141_writeresp_state29 = ((or_cond_reg_566 == 1'd0) & (tmp_reg_530 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bytes_to_write_2_fu_368_p1 = h_reg_209;

assign bytes_to_write_fu_362_p2 = (p_neg1_pn_fu_356_p2 - tmp_8_fu_342_p1);

assign data_V_d0 = {{tmp_5_fu_402_p4}, {tmp_3_fu_397_p2}};

assign empty_n_fu_383_p1 = stream_in_V_TVALID;

assign extLd_fu_505_p1 = data_V_load_reg_626;

assign gmem_out_ARADDR = output_V2_sum_cast_fu_277_p1;

assign h1_cast_fu_453_p1 = h1_reg_240;

assign h_1_fu_377_p2 = (h_reg_209 + 15'd1);

assign h_2_fu_463_p2 = (h1_reg_240 + 15'd1);

assign lhs_V_cast_fu_291_p1 = stream_head_V;

assign or_cond_fu_331_p2 = (tmp_6_fu_325_p2 | tmp_4_fu_315_p2);

assign output_V2_sum3_cast_fu_514_p1 = output_V2_sum3_reg_637;

assign output_V2_sum3_fu_509_p2 = (tmp_17_cast_reg_524 + 29'd513);

assign output_V2_sum4_cast_fu_495_p1 = output_V2_sum4_reg_616;

assign output_V2_sum4_fu_478_p2 = (tmp_14_cast_fu_469_p1 + tmp_17_cast_reg_524);

assign output_V2_sum_cast_fu_277_p1 = output_V2_sum_reg_534;

assign output_V2_sum_fu_271_p2 = (tmp_17_cast_fu_261_p1 + 29'd512);

assign p_neg1_pn_fu_356_p2 = (p_neg1_pn_v_cast_cast_fu_348_p3 + tmp_2_fu_345_p1);

assign p_neg1_pn_v_cast_cast_fu_348_p3 = ((tmp_7_fu_337_p2[0:0] === 1'b1) ? 16'd65535 : 16'd511);

assign ret_V_2_cast5_fu_306_p1 = ret_V_reg_560;

assign ret_V_2_cast6_fu_301_p2 = (stream_head_V_load_reg_552 + 9'd1);

assign ret_V_2_cast_fu_309_p1 = ret_V_reg_560;

assign ret_V_cast_fu_321_p1 = ret_V_2_cast6_fu_301_p2;

assign ret_V_fu_295_p2 = (lhs_V_cast_fu_291_p1 + 10'd1);

assign tmp_11_fu_421_p1 = h_reg_209;

assign tmp_12_fu_457_p2 = (($signed(h1_cast_fu_453_p1) < $signed(bytes_to_write_1_reg_221)) ? 1'b1 : 1'b0);

assign tmp_14_cast_fu_469_p1 = ap_phi_mux_t_V_phi_fu_234_p4;

assign tmp_14_fu_432_p1 = bytes_to_write_1_reg_221[8:0];

assign tmp_15_fu_473_p1 = h1_reg_240;

assign tmp_16_fu_483_p2 = (ap_phi_mux_t_V_phi_fu_234_p4 + 9'd1);

assign tmp_17_cast_fu_261_p1 = tmp_1_fu_251_p4;

assign tmp_17_fu_436_p3 = ((tmp_9_fu_426_p2[0:0] === 1'b1) ? tmp_14_fu_432_p1 : 9'd0);

assign tmp_18_fu_444_p2 = (tmp_17_fu_436_p3 + stream_head_V_load_reg_552);

assign tmp_19_fu_449_p1 = tmp_18_fu_444_p2;

assign tmp_1_fu_251_p4 = {{output_V[31:4]}};

assign tmp_21_fu_391_p2 = stream_in_V_TDATA << 64'd32;

assign tmp_2_fu_345_p1 = stream_tail_V_reg_545[15:0];

assign tmp_3_cast_fu_312_p1 = stream_tail_V_reg_545;

assign tmp_3_fu_397_p2 = (tmp_22_reg_592 | tmp_21_fu_391_p2);

assign tmp_4_fu_315_p2 = ((ret_V_2_cast_fu_309_p1 == tmp_3_cast_fu_312_p1) ? 1'b1 : 1'b0);

assign tmp_5_fu_402_p4 = {{stream_in_V_TDATA[63:32]}};

assign tmp_6_fu_325_p2 = ((ret_V_cast_fu_321_p1 == tmp_3_cast_fu_312_p1) ? 1'b1 : 1'b0);

assign tmp_7_fu_337_p2 = ((ret_V_2_cast5_fu_306_p1 < stream_tail_V_reg_545) ? 1'b1 : 1'b0);

assign tmp_8_fu_342_p1 = stream_head_V_load_reg_552;

assign tmp_9_fu_426_p2 = (($signed(bytes_to_write_1_reg_221) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_fu_265_p2 = ((reset == 8'd1) ? 1'b1 : 1'b0);

assign tmp_s_fu_372_p2 = (($signed(bytes_to_write_2_fu_368_p1) < $signed(bytes_to_write_reg_570)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_17_cast_reg_524[28] <= 1'b0;
    tmp_19_reg_597[127:9] <= 119'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //circ_buff_write_128
