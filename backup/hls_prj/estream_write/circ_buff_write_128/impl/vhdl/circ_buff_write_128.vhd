-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity circ_buff_write_128 is
generic (
    C_M_AXI_GMEM_OUT_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_OUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_out_AWREADY : IN STD_LOGIC;
    m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_WVALID : OUT STD_LOGIC;
    m_axi_gmem_out_WREADY : IN STD_LOGIC;
    m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH-1 downto 0);
    m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_out_WLAST : OUT STD_LOGIC;
    m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_out_ARREADY : IN STD_LOGIC;
    m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_RVALID : IN STD_LOGIC;
    m_axi_gmem_out_RREADY : OUT STD_LOGIC;
    m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH-1 downto 0);
    m_axi_gmem_out_RLAST : IN STD_LOGIC;
    m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BVALID : IN STD_LOGIC;
    m_axi_gmem_out_BREADY : OUT STD_LOGIC;
    m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_BUSER_WIDTH-1 downto 0);
    stream_in_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    stream_in_V_TVALID : IN STD_LOGIC;
    stream_in_V_TREADY : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of circ_buff_write_128 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "circ_buff_write_128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.153625,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=1336,HLS_SYN_LUT=1834,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv29_200 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1FF : STD_LOGIC_VECTOR (15 downto 0) := "0000000111111111";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv29_201 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal output_V : STD_LOGIC_VECTOR (31 downto 0);
    signal reset : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_head_V : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal gmem_out_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_out_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal gmem_out_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_12_reg_602 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_12_reg_602_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal tmp_12_reg_602_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal tmp_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal gmem_out_AWVALID : STD_LOGIC;
    signal gmem_out_AWREADY : STD_LOGIC;
    signal gmem_out_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_out_WVALID : STD_LOGIC;
    signal gmem_out_WREADY : STD_LOGIC;
    signal gmem_out_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_out_ARVALID : STD_LOGIC;
    signal gmem_out_ARREADY : STD_LOGIC;
    signal gmem_out_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_out_RVALID : STD_LOGIC;
    signal gmem_out_RREADY : STD_LOGIC;
    signal gmem_out_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_out_RLAST : STD_LOGIC;
    signal gmem_out_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_out_BVALID : STD_LOGIC;
    signal gmem_out_BREADY : STD_LOGIC;
    signal gmem_out_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_out_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_out_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_231 : STD_LOGIC_VECTOR (8 downto 0);
    signal h1_reg_240 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_17_cast_fu_261_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_17_cast_reg_524 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V2_sum_fu_271_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal output_V2_sum_reg_534 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_sig_ioackin_gmem_out_ARREADY : STD_LOGIC;
    signal stream_tail_V_reg_545 : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_head_V_load_reg_552 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_fu_295_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_reg_560 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_cond_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal bytes_to_write_fu_362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bytes_to_write_reg_570 : STD_LOGIC_VECTOR (15 downto 0);
    signal bytes_to_write_2_fu_368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal h_1_fu_377_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_1_reg_584 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_22_reg_592 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_449_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_19_reg_597 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_12_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state14_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem_out_AWREADY : STD_LOGIC;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter2 : BOOLEAN;
    signal ap_sig_ioackin_gmem_out_WREADY : STD_LOGIC;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_12_reg_602_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_602_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_602_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_602_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal h_2_fu_463_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal output_V2_sum4_fu_478_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal output_V2_sum4_reg_616 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_16_fu_483_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_reg_621 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_q0 : STD_LOGIC_VECTOR (95 downto 0);
    signal data_V_load_reg_626 : STD_LOGIC_VECTOR (95 downto 0);
    signal output_V2_sum3_fu_509_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal output_V2_sum3_reg_637 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal data_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal data_V_d0 : STD_LOGIC_VECTOR (95 downto 0);
    signal h_reg_209 : STD_LOGIC_VECTOR (14 downto 0);
    signal bytes_to_write_1_reg_221 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_n_fu_383_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_t_V_phi_fu_234_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_473_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V2_sum_cast_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V2_sum4_cast_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal output_V2_sum3_cast_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_out_ARREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_out_AWREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem_out_WREADY : STD_LOGIC := '0';
    signal extLd_fu_505_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_predicate_op141_writeresp_state29 : BOOLEAN;
    signal ap_block_state29 : BOOLEAN;
    signal tmp_1_fu_251_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal lhs_V_cast_fu_291_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ret_V_2_cast_fu_309_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_3_cast_fu_312_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal ret_V_2_cast6_fu_301_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_cast_fu_321_p1 : STD_LOGIC_VECTOR (128 downto 0);
    signal tmp_4_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_2_cast5_fu_306_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_7_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg1_pn_v_cast_cast_fu_348_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_neg1_pn_fu_356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_342_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_391_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_402_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_397_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_432_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_436_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_18_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal h1_cast_fu_453_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_cast_fu_469_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_485 : BOOLEAN;
    signal ap_condition_495 : BOOLEAN;

    component circ_buff_write_128_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (95 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (95 downto 0) );
    end component;


    component circ_buff_write_128_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        output_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        reset : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component circ_buff_write_128_gmem_out_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    circ_buff_write_128_control_s_axi_U : component circ_buff_write_128_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        output_V => output_V,
        reset => reset);

    circ_buff_write_128_gmem_out_m_axi_U : component circ_buff_write_128_gmem_out_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_OUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_OUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_OUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_OUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_OUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_OUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_OUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_OUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_OUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_OUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_OUT_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_out_AWVALID,
        AWREADY => m_axi_gmem_out_AWREADY,
        AWADDR => m_axi_gmem_out_AWADDR,
        AWID => m_axi_gmem_out_AWID,
        AWLEN => m_axi_gmem_out_AWLEN,
        AWSIZE => m_axi_gmem_out_AWSIZE,
        AWBURST => m_axi_gmem_out_AWBURST,
        AWLOCK => m_axi_gmem_out_AWLOCK,
        AWCACHE => m_axi_gmem_out_AWCACHE,
        AWPROT => m_axi_gmem_out_AWPROT,
        AWQOS => m_axi_gmem_out_AWQOS,
        AWREGION => m_axi_gmem_out_AWREGION,
        AWUSER => m_axi_gmem_out_AWUSER,
        WVALID => m_axi_gmem_out_WVALID,
        WREADY => m_axi_gmem_out_WREADY,
        WDATA => m_axi_gmem_out_WDATA,
        WSTRB => m_axi_gmem_out_WSTRB,
        WLAST => m_axi_gmem_out_WLAST,
        WID => m_axi_gmem_out_WID,
        WUSER => m_axi_gmem_out_WUSER,
        ARVALID => m_axi_gmem_out_ARVALID,
        ARREADY => m_axi_gmem_out_ARREADY,
        ARADDR => m_axi_gmem_out_ARADDR,
        ARID => m_axi_gmem_out_ARID,
        ARLEN => m_axi_gmem_out_ARLEN,
        ARSIZE => m_axi_gmem_out_ARSIZE,
        ARBURST => m_axi_gmem_out_ARBURST,
        ARLOCK => m_axi_gmem_out_ARLOCK,
        ARCACHE => m_axi_gmem_out_ARCACHE,
        ARPROT => m_axi_gmem_out_ARPROT,
        ARQOS => m_axi_gmem_out_ARQOS,
        ARREGION => m_axi_gmem_out_ARREGION,
        ARUSER => m_axi_gmem_out_ARUSER,
        RVALID => m_axi_gmem_out_RVALID,
        RREADY => m_axi_gmem_out_RREADY,
        RDATA => m_axi_gmem_out_RDATA,
        RLAST => m_axi_gmem_out_RLAST,
        RID => m_axi_gmem_out_RID,
        RUSER => m_axi_gmem_out_RUSER,
        RRESP => m_axi_gmem_out_RRESP,
        BVALID => m_axi_gmem_out_BVALID,
        BREADY => m_axi_gmem_out_BREADY,
        BRESP => m_axi_gmem_out_BRESP,
        BID => m_axi_gmem_out_BID,
        BUSER => m_axi_gmem_out_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_out_ARVALID,
        I_ARREADY => gmem_out_ARREADY,
        I_ARADDR => gmem_out_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_out_RVALID,
        I_RREADY => gmem_out_RREADY,
        I_RDATA => gmem_out_RDATA,
        I_RID => gmem_out_RID,
        I_RUSER => gmem_out_RUSER,
        I_RRESP => gmem_out_RRESP,
        I_RLAST => gmem_out_RLAST,
        I_AWVALID => gmem_out_AWVALID,
        I_AWREADY => gmem_out_AWREADY,
        I_AWADDR => gmem_out_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_out_WVALID,
        I_WREADY => gmem_out_WREADY,
        I_WDATA => gmem_out_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_FFFF,
        I_BVALID => gmem_out_BVALID,
        I_BREADY => gmem_out_BREADY,
        I_BRESP => gmem_out_BRESP,
        I_BID => gmem_out_BID,
        I_BUSER => gmem_out_BUSER);

    data_V_U : component circ_buff_write_128_data_V
    generic map (
        DataWidth => 96,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => data_V_d0,
        q0 => data_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_out_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_out_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_gmem_out_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_out_ARREADY <= ap_const_logic_0;
                    elsif ((gmem_out_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_out_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_out_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_out_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_602 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_out_AWREADY <= ap_const_logic_0;
                elsif ((((gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (gmem_out_AWREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_602 = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_out_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_out_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_out_WREADY <= ap_const_logic_0;
            else
                if ((((ap_sig_ioackin_gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter1_reg = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_out_WREADY <= ap_const_logic_0;
                elsif ((((gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (gmem_out_WREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter1_reg = ap_const_lv1_1)))) then 
                    ap_reg_ioackin_gmem_out_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    bytes_to_write_1_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                if ((tmp_s_fu_372_p2 = ap_const_lv1_0)) then 
                    bytes_to_write_1_reg_221 <= bytes_to_write_reg_570;
                elsif (((empty_n_fu_383_p1 = ap_const_lv1_0) and (tmp_s_fu_372_p2 = ap_const_lv1_1))) then 
                    bytes_to_write_1_reg_221 <= bytes_to_write_2_fu_368_p1;
                end if;
            end if; 
        end if;
    end process;

    h1_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_fu_457_p2 = ap_const_lv1_1))) then 
                h1_reg_240 <= h_2_fu_463_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                h1_reg_240 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    h_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((stream_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                h_reg_209 <= h_1_reg_584;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (or_cond_fu_331_p2 = ap_const_lv1_0))) then 
                h_reg_209 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    t_V_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_602 = ap_const_lv1_1))) then 
                t_V_reg_231 <= tmp_16_reg_621;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                t_V_reg_231 <= stream_head_V_load_reg_552;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (or_cond_fu_331_p2 = ap_const_lv1_0))) then
                bytes_to_write_reg_570 <= bytes_to_write_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_602 = ap_const_lv1_1))) then
                data_V_load_reg_626 <= data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                h_1_reg_584 <= h_1_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                or_cond_reg_566 <= or_cond_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                output_V2_sum3_reg_637 <= output_V2_sum3_fu_509_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_fu_457_p2 = ap_const_lv1_1))) then
                output_V2_sum4_reg_616 <= output_V2_sum4_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_265_p2 = ap_const_lv1_0))) then
                output_V2_sum_reg_534 <= output_V2_sum_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_out_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                ret_V_reg_560 <= ret_V_fu_295_p2;
                stream_head_V_load_reg_552 <= stream_head_V;
                stream_tail_V_reg_545 <= gmem_out_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_fu_457_p2 = ap_const_lv1_1))) then
                stream_head_V <= tmp_16_fu_483_p2;
                tmp_16_reg_621 <= tmp_16_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_12_reg_602 <= tmp_12_fu_457_p2;
                tmp_12_reg_602_pp0_iter1_reg <= tmp_12_reg_602;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_12_reg_602_pp0_iter2_reg <= tmp_12_reg_602_pp0_iter1_reg;
                tmp_12_reg_602_pp0_iter3_reg <= tmp_12_reg_602_pp0_iter2_reg;
                tmp_12_reg_602_pp0_iter4_reg <= tmp_12_reg_602_pp0_iter3_reg;
                tmp_12_reg_602_pp0_iter5_reg <= tmp_12_reg_602_pp0_iter4_reg;
                tmp_12_reg_602_pp0_iter6_reg <= tmp_12_reg_602_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    tmp_17_cast_reg_524(27 downto 0) <= tmp_17_cast_fu_261_p1(27 downto 0);
                tmp_reg_530 <= tmp_fu_265_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    tmp_19_reg_597(8 downto 0) <= tmp_19_fu_449_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_s_fu_372_p2 = ap_const_lv1_1))) then
                tmp_22_reg_592 <= stream_in_V_TDATA;
            end if;
        end if;
    end process;
    tmp_17_cast_reg_524(28) <= '0';
    tmp_19_reg_597(127 downto 9) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_in_V_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state29, ap_CS_fsm_state12, gmem_out_RVALID, gmem_out_BVALID, tmp_fu_265_p2, ap_sig_ioackin_gmem_out_ARREADY, or_cond_fu_331_p2, ap_CS_fsm_state10, ap_CS_fsm_state11, tmp_s_fu_372_p2, tmp_12_fu_457_p2, ap_sig_ioackin_gmem_out_AWREADY, ap_sig_ioackin_gmem_out_WREADY, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6, empty_n_fu_383_p1, ap_predicate_op141_writeresp_state29)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_265_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_265_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_gmem_out_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((gmem_out_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (or_cond_fu_331_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (empty_n_fu_383_p1 = ap_const_lv1_1) and (tmp_s_fu_372_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state12 => 
                if (((stream_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_12_fu_457_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_12_fu_457_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_sig_ioackin_gmem_out_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_sig_ioackin_gmem_out_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state24;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if ((not(((ap_predicate_op141_writeresp_state29 = ap_const_boolean_1) and (gmem_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(14);
    ap_CS_fsm_state23 <= ap_CS_fsm(15);
    ap_CS_fsm_state24 <= ap_CS_fsm(16);
    ap_CS_fsm_state29 <= ap_CS_fsm(21);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter7, tmp_12_reg_602_pp0_iter6_reg, gmem_out_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, tmp_12_reg_602_pp0_iter6_reg, gmem_out_BVALID, ap_block_state15_io, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_11001 <= (((gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter6_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, tmp_12_reg_602_pp0_iter6_reg, gmem_out_BVALID, ap_block_state15_io, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_subdone <= (((gmem_out_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter6_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state14_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(tmp_12_reg_602, ap_sig_ioackin_gmem_out_AWREADY)
    begin
                ap_block_state15_io <= ((ap_sig_ioackin_gmem_out_AWREADY = ap_const_logic_0) and (tmp_12_reg_602 = ap_const_lv1_1));
    end process;

        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(tmp_12_reg_602_pp0_iter1_reg, ap_sig_ioackin_gmem_out_WREADY)
    begin
                ap_block_state16_io <= ((ap_sig_ioackin_gmem_out_WREADY = ap_const_logic_0) and (tmp_12_reg_602_pp0_iter1_reg = ap_const_lv1_1));
    end process;

        ap_block_state16_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_pp0_stage0_iter7_assign_proc : process(tmp_12_reg_602_pp0_iter6_reg, gmem_out_BVALID)
    begin
                ap_block_state21_pp0_stage0_iter7 <= ((gmem_out_BVALID = ap_const_logic_0) and (tmp_12_reg_602_pp0_iter6_reg = ap_const_lv1_1));
    end process;


    ap_block_state29_assign_proc : process(gmem_out_BVALID, ap_predicate_op141_writeresp_state29)
    begin
                ap_block_state29 <= ((ap_predicate_op141_writeresp_state29 = ap_const_boolean_1) and (gmem_out_BVALID = ap_const_logic_0));
    end process;


    ap_condition_485_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_12_reg_602, ap_block_pp0_stage0_01001)
    begin
                ap_condition_485 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_602 = ap_const_lv1_1));
    end process;


    ap_condition_495_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_12_reg_602_pp0_iter1_reg, ap_block_pp0_stage0_01001)
    begin
                ap_condition_495 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state14_assign_proc : process(tmp_12_fu_457_p2)
    begin
        if ((tmp_12_fu_457_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state29, gmem_out_BVALID, ap_predicate_op141_writeresp_state29)
    begin
        if ((not(((ap_predicate_op141_writeresp_state29 = ap_const_boolean_1) and (gmem_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_234_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_12_reg_602, t_V_reg_231, tmp_16_reg_621)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_602 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_t_V_phi_fu_234_p4 <= tmp_16_reg_621;
        else 
            ap_phi_mux_t_V_phi_fu_234_p4 <= t_V_reg_231;
        end if; 
    end process;


    ap_predicate_op141_writeresp_state29_assign_proc : process(tmp_reg_530, or_cond_reg_566)
    begin
                ap_predicate_op141_writeresp_state29 <= ((or_cond_reg_566 = ap_const_lv1_0) and (tmp_reg_530 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, gmem_out_BVALID, ap_predicate_op141_writeresp_state29)
    begin
        if ((not(((ap_predicate_op141_writeresp_state29 = ap_const_boolean_1) and (gmem_out_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_out_ARREADY_assign_proc : process(gmem_out_ARREADY, ap_reg_ioackin_gmem_out_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_out_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_out_ARREADY <= gmem_out_ARREADY;
        else 
            ap_sig_ioackin_gmem_out_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_out_AWREADY_assign_proc : process(gmem_out_AWREADY, ap_reg_ioackin_gmem_out_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_out_AWREADY <= gmem_out_AWREADY;
        else 
            ap_sig_ioackin_gmem_out_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_out_WREADY_assign_proc : process(gmem_out_WREADY, ap_reg_ioackin_gmem_out_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_out_WREADY <= gmem_out_WREADY;
        else 
            ap_sig_ioackin_gmem_out_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bytes_to_write_2_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_209),16));
    bytes_to_write_fu_362_p2 <= std_logic_vector(unsigned(p_neg1_pn_fu_356_p2) - unsigned(tmp_8_fu_342_p1));

    data_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_state12, ap_enable_reg_pp0_iter0, tmp_11_fu_421_p1, tmp_15_fu_473_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_address0 <= tmp_15_fu_473_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            data_V_address0 <= tmp_11_fu_421_p1(9 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(stream_in_V_TVALID, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state12, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((stream_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_V_d0 <= (tmp_5_fu_402_p4 & tmp_3_fu_397_p2);

    data_V_we0_assign_proc : process(stream_in_V_TVALID, ap_CS_fsm_state12)
    begin
        if (((stream_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_n_fu_383_p1 <= (0=>stream_in_V_TVALID, others=>'-');
    extLd_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_V_load_reg_626),128));
    gmem_out_ARADDR <= output_V2_sum_cast_fu_277_p1(32 - 1 downto 0);

    gmem_out_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_gmem_out_ARREADY)
    begin
        if (((ap_reg_ioackin_gmem_out_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_out_ARVALID <= ap_const_logic_1;
        else 
            gmem_out_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_AWADDR_assign_proc : process(ap_CS_fsm_state23, output_V2_sum4_cast_fu_495_p1, output_V2_sum3_cast_fu_514_p1, ap_reg_ioackin_gmem_out_AWREADY, ap_condition_485)
    begin
        if ((ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                gmem_out_AWADDR <= output_V2_sum3_cast_fu_514_p1(32 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_485)) then 
                gmem_out_AWADDR <= output_V2_sum4_cast_fu_495_p1(32 - 1 downto 0);
            else 
                gmem_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_out_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_out_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_12_reg_602, ap_CS_fsm_state23, ap_reg_ioackin_gmem_out_AWREADY, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state23)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_gmem_out_AWREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_602 = ap_const_lv1_1)))) then 
            gmem_out_AWVALID <= ap_const_logic_1;
        else 
            gmem_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, tmp_12_reg_602_pp0_iter6_reg, ap_CS_fsm_state29, gmem_out_BVALID, ap_block_pp0_stage0_11001, ap_predicate_op141_writeresp_state29)
    begin
        if (((not(((ap_predicate_op141_writeresp_state29 = ap_const_boolean_1) and (gmem_out_BVALID = ap_const_logic_0))) and (ap_predicate_op141_writeresp_state29 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter6_reg = ap_const_lv1_1)))) then 
            gmem_out_BREADY <= ap_const_logic_1;
        else 
            gmem_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_RREADY_assign_proc : process(ap_CS_fsm_state9, gmem_out_RVALID)
    begin
        if (((gmem_out_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            gmem_out_RREADY <= ap_const_logic_1;
        else 
            gmem_out_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_WDATA_assign_proc : process(ap_CS_fsm_state24, tmp_19_reg_597, ap_reg_ioackin_gmem_out_WREADY, extLd_fu_505_p1, ap_condition_495)
    begin
        if ((ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                gmem_out_WDATA <= tmp_19_reg_597;
            elsif ((ap_const_boolean_1 = ap_condition_495)) then 
                gmem_out_WDATA <= extLd_fu_505_p1;
            else 
                gmem_out_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_out_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_out_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, tmp_12_reg_602_pp0_iter1_reg, ap_CS_fsm_state24, ap_block_pp0_stage0_01001, ap_reg_ioackin_gmem_out_WREADY)
    begin
        if ((((ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state24)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_gmem_out_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter1_reg = ap_const_lv1_1)))) then 
            gmem_out_WVALID <= ap_const_logic_1;
        else 
            gmem_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_blk_n_AR_assign_proc : process(m_axi_gmem_out_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem_out_blk_n_AR <= m_axi_gmem_out_ARREADY;
        else 
            gmem_out_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_AW_assign_proc : process(m_axi_gmem_out_AWREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_12_reg_602, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_12_reg_602 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_out_blk_n_AW <= m_axi_gmem_out_AWREADY;
        else 
            gmem_out_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_B_assign_proc : process(m_axi_gmem_out_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, tmp_12_reg_602_pp0_iter6_reg, ap_CS_fsm_state29, tmp_reg_530, or_cond_reg_566)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state29) and (or_cond_reg_566 = ap_const_lv1_0) and (tmp_reg_530 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter6_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_out_blk_n_B <= m_axi_gmem_out_BVALID;
        else 
            gmem_out_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_R_assign_proc : process(m_axi_gmem_out_RVALID, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            gmem_out_blk_n_R <= m_axi_gmem_out_RVALID;
        else 
            gmem_out_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_out_blk_n_W_assign_proc : process(m_axi_gmem_out_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_12_reg_602_pp0_iter1_reg, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (tmp_12_reg_602_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            gmem_out_blk_n_W <= m_axi_gmem_out_WREADY;
        else 
            gmem_out_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    h1_cast_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h1_reg_240),16));
    h_1_fu_377_p2 <= std_logic_vector(unsigned(h_reg_209) + unsigned(ap_const_lv15_1));
    h_2_fu_463_p2 <= std_logic_vector(unsigned(h1_reg_240) + unsigned(ap_const_lv15_1));
    lhs_V_cast_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_head_V),10));
    or_cond_fu_331_p2 <= (tmp_6_fu_325_p2 or tmp_4_fu_315_p2);
    output_V2_sum3_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_V2_sum3_reg_637),64));
    output_V2_sum3_fu_509_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_524) + unsigned(ap_const_lv29_201));
    output_V2_sum4_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_V2_sum4_reg_616),64));
    output_V2_sum4_fu_478_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_469_p1) + unsigned(tmp_17_cast_reg_524));
    output_V2_sum_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_V2_sum_reg_534),64));
    output_V2_sum_fu_271_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_261_p1) + unsigned(ap_const_lv29_200));
    p_neg1_pn_fu_356_p2 <= std_logic_vector(unsigned(p_neg1_pn_v_cast_cast_fu_348_p3) + unsigned(tmp_2_fu_345_p1));
    p_neg1_pn_v_cast_cast_fu_348_p3 <= 
        ap_const_lv16_FFFF when (tmp_7_fu_337_p2(0) = '1') else 
        ap_const_lv16_1FF;
    ret_V_2_cast5_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_560),128));
    ret_V_2_cast6_fu_301_p2 <= std_logic_vector(unsigned(stream_head_V_load_reg_552) + unsigned(ap_const_lv9_1));
    ret_V_2_cast_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_560),129));
    ret_V_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_2_cast6_fu_301_p2),129));
    ret_V_fu_295_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_291_p1) + unsigned(ap_const_lv10_1));

    stream_in_V_TDATA_blk_n_assign_proc : process(stream_in_V_TVALID, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            stream_in_V_TDATA_blk_n <= stream_in_V_TVALID;
        else 
            stream_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_V_TREADY_assign_proc : process(stream_in_V_TVALID, ap_CS_fsm_state12, ap_CS_fsm_state11, tmp_s_fu_372_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_s_fu_372_p2 = ap_const_lv1_1)) or ((stream_in_V_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            stream_in_V_TREADY <= ap_const_logic_1;
        else 
            stream_in_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_11_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_209),64));
    tmp_12_fu_457_p2 <= "1" when (signed(h1_cast_fu_453_p1) < signed(bytes_to_write_1_reg_221)) else "0";
    tmp_14_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_phi_fu_234_p4),29));
    tmp_14_fu_432_p1 <= bytes_to_write_1_reg_221(9 - 1 downto 0);
    tmp_15_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h1_reg_240),64));
    tmp_16_fu_483_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_phi_fu_234_p4) + unsigned(ap_const_lv9_1));
    tmp_17_cast_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_251_p4),29));
    tmp_17_fu_436_p3 <= 
        tmp_14_fu_432_p1 when (tmp_9_fu_426_p2(0) = '1') else 
        ap_const_lv9_0;
    tmp_18_fu_444_p2 <= std_logic_vector(unsigned(tmp_17_fu_436_p3) + unsigned(stream_head_V_load_reg_552));
    tmp_19_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_444_p2),128));
    tmp_1_fu_251_p4 <= output_V(31 downto 4);
    tmp_21_fu_391_p2 <= std_logic_vector(shift_left(unsigned(stream_in_V_TDATA),to_integer(unsigned('0' & ap_const_lv64_20(31-1 downto 0)))));
    tmp_2_fu_345_p1 <= stream_tail_V_reg_545(16 - 1 downto 0);
    tmp_3_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_tail_V_reg_545),129));
    tmp_3_fu_397_p2 <= (tmp_22_reg_592 or tmp_21_fu_391_p2);
    tmp_4_fu_315_p2 <= "1" when (ret_V_2_cast_fu_309_p1 = tmp_3_cast_fu_312_p1) else "0";
    tmp_5_fu_402_p4 <= stream_in_V_TDATA(63 downto 32);
    tmp_6_fu_325_p2 <= "1" when (ret_V_cast_fu_321_p1 = tmp_3_cast_fu_312_p1) else "0";
    tmp_7_fu_337_p2 <= "1" when (unsigned(ret_V_2_cast5_fu_306_p1) < unsigned(stream_tail_V_reg_545)) else "0";
    tmp_8_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_head_V_load_reg_552),16));
    tmp_9_fu_426_p2 <= "1" when (signed(bytes_to_write_1_reg_221) > signed(ap_const_lv16_0)) else "0";
    tmp_fu_265_p2 <= "1" when (reset = ap_const_lv8_1) else "0";
    tmp_s_fu_372_p2 <= "1" when (signed(bytes_to_write_2_fu_368_p1) < signed(bytes_to_write_reg_570)) else "0";
end behav;
