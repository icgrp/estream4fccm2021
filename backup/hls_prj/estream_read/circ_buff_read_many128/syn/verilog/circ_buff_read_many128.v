// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="circ_buff_read_many128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=1,HLS_SYN_FF=2220,HLS_SYN_LUT=2881,HLS_VERSION=2018_3}" *)

module circ_buff_read_many128 (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_read_AWVALID,
        m_axi_gmem_read_AWREADY,
        m_axi_gmem_read_AWADDR,
        m_axi_gmem_read_AWID,
        m_axi_gmem_read_AWLEN,
        m_axi_gmem_read_AWSIZE,
        m_axi_gmem_read_AWBURST,
        m_axi_gmem_read_AWLOCK,
        m_axi_gmem_read_AWCACHE,
        m_axi_gmem_read_AWPROT,
        m_axi_gmem_read_AWQOS,
        m_axi_gmem_read_AWREGION,
        m_axi_gmem_read_AWUSER,
        m_axi_gmem_read_WVALID,
        m_axi_gmem_read_WREADY,
        m_axi_gmem_read_WDATA,
        m_axi_gmem_read_WSTRB,
        m_axi_gmem_read_WLAST,
        m_axi_gmem_read_WID,
        m_axi_gmem_read_WUSER,
        m_axi_gmem_read_ARVALID,
        m_axi_gmem_read_ARREADY,
        m_axi_gmem_read_ARADDR,
        m_axi_gmem_read_ARID,
        m_axi_gmem_read_ARLEN,
        m_axi_gmem_read_ARSIZE,
        m_axi_gmem_read_ARBURST,
        m_axi_gmem_read_ARLOCK,
        m_axi_gmem_read_ARCACHE,
        m_axi_gmem_read_ARPROT,
        m_axi_gmem_read_ARQOS,
        m_axi_gmem_read_ARREGION,
        m_axi_gmem_read_ARUSER,
        m_axi_gmem_read_RVALID,
        m_axi_gmem_read_RREADY,
        m_axi_gmem_read_RDATA,
        m_axi_gmem_read_RLAST,
        m_axi_gmem_read_RID,
        m_axi_gmem_read_RUSER,
        m_axi_gmem_read_RRESP,
        m_axi_gmem_read_BVALID,
        m_axi_gmem_read_BREADY,
        m_axi_gmem_read_BRESP,
        m_axi_gmem_read_BID,
        m_axi_gmem_read_BUSER,
        fifo_out_0_V_TDATA,
        fifo_out_0_V_TVALID,
        fifo_out_0_V_TREADY,
        fifo_out_1_V_TDATA,
        fifo_out_1_V_TVALID,
        fifo_out_1_V_TREADY,
        fifo_out_2_V_TDATA,
        fifo_out_2_V_TVALID,
        fifo_out_2_V_TREADY,
        fifo_out_3_V_TDATA,
        fifo_out_3_V_TVALID,
        fifo_out_3_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_pp0_stage0 = 26'd8192;
parameter    ap_ST_fsm_state24 = 26'd16384;
parameter    ap_ST_fsm_pp1_stage0 = 26'd32768;
parameter    ap_ST_fsm_state28 = 26'd65536;
parameter    ap_ST_fsm_state29 = 26'd131072;
parameter    ap_ST_fsm_state30 = 26'd262144;
parameter    ap_ST_fsm_state31 = 26'd524288;
parameter    ap_ST_fsm_state32 = 26'd1048576;
parameter    ap_ST_fsm_state33 = 26'd2097152;
parameter    ap_ST_fsm_state34 = 26'd4194304;
parameter    ap_ST_fsm_state35 = 26'd8388608;
parameter    ap_ST_fsm_state36 = 26'd16777216;
parameter    ap_ST_fsm_state37 = 26'd33554432;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_READ_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_READ_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM_READ_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_READ_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_READ_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_READ_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_read_AWVALID;
input   m_axi_gmem_read_AWREADY;
output  [C_M_AXI_GMEM_READ_ADDR_WIDTH - 1:0] m_axi_gmem_read_AWADDR;
output  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_AWID;
output  [7:0] m_axi_gmem_read_AWLEN;
output  [2:0] m_axi_gmem_read_AWSIZE;
output  [1:0] m_axi_gmem_read_AWBURST;
output  [1:0] m_axi_gmem_read_AWLOCK;
output  [3:0] m_axi_gmem_read_AWCACHE;
output  [2:0] m_axi_gmem_read_AWPROT;
output  [3:0] m_axi_gmem_read_AWQOS;
output  [3:0] m_axi_gmem_read_AWREGION;
output  [C_M_AXI_GMEM_READ_AWUSER_WIDTH - 1:0] m_axi_gmem_read_AWUSER;
output   m_axi_gmem_read_WVALID;
input   m_axi_gmem_read_WREADY;
output  [C_M_AXI_GMEM_READ_DATA_WIDTH - 1:0] m_axi_gmem_read_WDATA;
output  [C_M_AXI_GMEM_READ_WSTRB_WIDTH - 1:0] m_axi_gmem_read_WSTRB;
output   m_axi_gmem_read_WLAST;
output  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_WID;
output  [C_M_AXI_GMEM_READ_WUSER_WIDTH - 1:0] m_axi_gmem_read_WUSER;
output   m_axi_gmem_read_ARVALID;
input   m_axi_gmem_read_ARREADY;
output  [C_M_AXI_GMEM_READ_ADDR_WIDTH - 1:0] m_axi_gmem_read_ARADDR;
output  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_ARID;
output  [7:0] m_axi_gmem_read_ARLEN;
output  [2:0] m_axi_gmem_read_ARSIZE;
output  [1:0] m_axi_gmem_read_ARBURST;
output  [1:0] m_axi_gmem_read_ARLOCK;
output  [3:0] m_axi_gmem_read_ARCACHE;
output  [2:0] m_axi_gmem_read_ARPROT;
output  [3:0] m_axi_gmem_read_ARQOS;
output  [3:0] m_axi_gmem_read_ARREGION;
output  [C_M_AXI_GMEM_READ_ARUSER_WIDTH - 1:0] m_axi_gmem_read_ARUSER;
input   m_axi_gmem_read_RVALID;
output   m_axi_gmem_read_RREADY;
input  [C_M_AXI_GMEM_READ_DATA_WIDTH - 1:0] m_axi_gmem_read_RDATA;
input   m_axi_gmem_read_RLAST;
input  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_RID;
input  [C_M_AXI_GMEM_READ_RUSER_WIDTH - 1:0] m_axi_gmem_read_RUSER;
input  [1:0] m_axi_gmem_read_RRESP;
input   m_axi_gmem_read_BVALID;
output   m_axi_gmem_read_BREADY;
input  [1:0] m_axi_gmem_read_BRESP;
input  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_BID;
input  [C_M_AXI_GMEM_READ_BUSER_WIDTH - 1:0] m_axi_gmem_read_BUSER;
output  [63:0] fifo_out_0_V_TDATA;
output   fifo_out_0_V_TVALID;
input   fifo_out_0_V_TREADY;
output  [63:0] fifo_out_1_V_TDATA;
output   fifo_out_1_V_TVALID;
input   fifo_out_1_V_TREADY;
output  [63:0] fifo_out_2_V_TDATA;
output   fifo_out_2_V_TVALID;
input   fifo_out_2_V_TREADY;
output  [63:0] fifo_out_3_V_TDATA;
output   fifo_out_3_V_TVALID;
input   fifo_out_3_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_V;
wire   [7:0] reset;
wire   [63:0] debug_register;
wire   [1:0] useable_words_address0;
reg    useable_words_ce0;
wire   [7:0] useable_words_q0;
reg   [63:0] fifo_out_0_V_1_data_out;
reg    fifo_out_0_V_1_vld_in;
wire    fifo_out_0_V_1_vld_out;
wire    fifo_out_0_V_1_ack_in;
wire    fifo_out_0_V_1_ack_out;
reg   [63:0] fifo_out_0_V_1_payload_A;
reg   [63:0] fifo_out_0_V_1_payload_B;
reg    fifo_out_0_V_1_sel_rd;
reg    fifo_out_0_V_1_sel_wr;
wire    fifo_out_0_V_1_sel;
wire    fifo_out_0_V_1_load_A;
wire    fifo_out_0_V_1_load_B;
reg   [1:0] fifo_out_0_V_1_state;
wire    fifo_out_0_V_1_state_cmp_full;
reg   [63:0] fifo_out_1_V_1_data_out;
reg    fifo_out_1_V_1_vld_in;
wire    fifo_out_1_V_1_vld_out;
wire    fifo_out_1_V_1_ack_in;
wire    fifo_out_1_V_1_ack_out;
reg   [63:0] fifo_out_1_V_1_payload_A;
reg   [63:0] fifo_out_1_V_1_payload_B;
reg    fifo_out_1_V_1_sel_rd;
reg    fifo_out_1_V_1_sel_wr;
wire    fifo_out_1_V_1_sel;
wire    fifo_out_1_V_1_load_A;
wire    fifo_out_1_V_1_load_B;
reg   [1:0] fifo_out_1_V_1_state;
wire    fifo_out_1_V_1_state_cmp_full;
reg   [63:0] fifo_out_2_V_1_data_out;
reg    fifo_out_2_V_1_vld_in;
wire    fifo_out_2_V_1_vld_out;
wire    fifo_out_2_V_1_ack_in;
wire    fifo_out_2_V_1_ack_out;
reg   [63:0] fifo_out_2_V_1_payload_A;
reg   [63:0] fifo_out_2_V_1_payload_B;
reg    fifo_out_2_V_1_sel_rd;
reg    fifo_out_2_V_1_sel_wr;
wire    fifo_out_2_V_1_sel;
wire    fifo_out_2_V_1_load_A;
wire    fifo_out_2_V_1_load_B;
reg   [1:0] fifo_out_2_V_1_state;
wire    fifo_out_2_V_1_state_cmp_full;
reg   [63:0] fifo_out_3_V_1_data_out;
reg    fifo_out_3_V_1_vld_in;
wire    fifo_out_3_V_1_vld_out;
wire    fifo_out_3_V_1_ack_in;
wire    fifo_out_3_V_1_ack_out;
reg   [63:0] fifo_out_3_V_1_payload_A;
reg   [63:0] fifo_out_3_V_1_payload_B;
reg    fifo_out_3_V_1_sel_rd;
reg    fifo_out_3_V_1_sel_wr;
wire    fifo_out_3_V_1_sel;
wire    fifo_out_3_V_1_load_A;
wire    fifo_out_3_V_1_load_B;
reg   [1:0] fifo_out_3_V_1_state;
wire    fifo_out_3_V_1_state_cmp_full;
reg   [0:0] first;
reg   [15:0] tail_3;
reg   [15:0] tail_0;
reg   [15:0] tail_1;
reg   [15:0] tail_2;
reg   [7:0] local_words_0;
reg   [7:0] local_words_1;
reg   [7:0] local_words_2;
reg   [7:0] local_words_3;
reg    gmem_read_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_read_blk_n_R;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_7_reg_1030;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] tmp_7_reg_1030_pp0_iter7_reg;
reg    gmem_read_blk_n_AW;
wire    ap_CS_fsm_state29;
reg    gmem_read_blk_n_W;
wire    ap_CS_fsm_state30;
reg    gmem_read_blk_n_B;
wire    ap_CS_fsm_state35;
reg   [0:0] tmp_8_reg_1020;
reg    fifo_out_0_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [1:0] tmp_14_reg_968;
reg    ap_enable_reg_pp1_iter2;
reg    fifo_out_1_V_TDATA_blk_n;
reg    fifo_out_2_V_TDATA_blk_n;
reg    fifo_out_3_V_TDATA_blk_n;
reg    gmem_read_AWVALID;
wire    gmem_read_AWREADY;
wire   [31:0] gmem_read_AWADDR;
reg    gmem_read_WVALID;
wire    gmem_read_WREADY;
wire   [127:0] gmem_read_WDATA;
reg    gmem_read_ARVALID;
wire    gmem_read_ARREADY;
reg   [31:0] gmem_read_ARADDR;
wire    gmem_read_RVALID;
reg    gmem_read_RREADY;
wire   [127:0] gmem_read_RDATA;
wire    gmem_read_RLAST;
wire   [0:0] gmem_read_RID;
wire   [0:0] gmem_read_RUSER;
wire   [1:0] gmem_read_RRESP;
wire    gmem_read_BVALID;
reg    gmem_read_BREADY;
wire   [1:0] gmem_read_BRESP;
wire   [0:0] gmem_read_BID;
wire   [0:0] gmem_read_BUSER;
reg   [15:0] val_assign_reg_327;
reg   [14:0] h_reg_337;
reg   [14:0] h_reg_337_pp0_iter1_reg;
wire    ap_block_state14_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
reg    ap_sig_ioackin_gmem_read_ARREADY;
reg    ap_block_state15_io;
wire    ap_block_state16_pp0_stage0_iter2;
wire    ap_block_state17_pp0_stage0_iter3;
wire    ap_block_state18_pp0_stage0_iter4;
wire    ap_block_state19_pp0_stage0_iter5;
wire    ap_block_state20_pp0_stage0_iter6;
wire    ap_block_state21_pp0_stage0_iter7;
reg    ap_block_state22_pp0_stage0_iter8;
wire    ap_block_state23_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg   [14:0] h_reg_337_pp0_iter2_reg;
reg   [14:0] h_reg_337_pp0_iter3_reg;
reg   [14:0] h_reg_337_pp0_iter4_reg;
reg   [14:0] h_reg_337_pp0_iter5_reg;
reg   [14:0] h_reg_337_pp0_iter6_reg;
reg   [14:0] h_reg_337_pp0_iter7_reg;
reg   [14:0] h_reg_337_pp0_iter8_reg;
reg   [23:0] indvar_flatten_reg_349;
reg   [14:0] h2_reg_360;
reg   [3:0] t_V_reg_371;
wire   [28:0] tmp_15_cast_fu_428_p1;
reg   [28:0] tmp_15_cast_reg_929;
wire   [0:0] first_load_load_fu_432_p1;
reg   [0:0] first_load_reg_936;
wire   [2:0] i_1_fu_442_p2;
reg   [2:0] i_1_reg_943;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_1_fu_436_p2;
wire   [1:0] tmp_5_fu_453_p1;
reg   [1:0] tmp_5_reg_953;
wire   [2:0] stride_1_fu_493_p2;
reg   [2:0] stride_1_reg_963;
wire    ap_CS_fsm_state4;
wire   [1:0] tmp_14_fu_499_p1;
wire   [0:0] exitcond1_fu_487_p2;
wire   [10:0] idx_fu_503_p5;
reg   [10:0] idx_reg_976;
wire   [11:0] idx_cast_fu_515_p1;
reg   [11:0] idx_cast_reg_981;
wire   [28:0] input_V2_sum_fu_529_p2;
reg   [28:0] input_V2_sum_reg_986;
reg   [127:0] stream_head_V_reg_997;
wire   [16:0] idx_cast3_fu_544_p1;
reg   [16:0] idx_cast3_reg_1004;
wire    ap_CS_fsm_state13;
wire   [15:0] stream_tail_1_fu_594_p3;
wire   [7:0] words_fu_618_p6;
reg   [7:0] words_reg_1014;
wire   [0:0] tmp_8_fu_635_p2;
wire   [15:0] bytes_read_fu_662_p2;
reg   [15:0] bytes_read_reg_1024;
wire   [0:0] tmp_7_fu_672_p2;
reg   [0:0] tmp_7_reg_1030_pp0_iter1_reg;
reg   [0:0] tmp_7_reg_1030_pp0_iter2_reg;
reg   [0:0] tmp_7_reg_1030_pp0_iter3_reg;
reg   [0:0] tmp_7_reg_1030_pp0_iter4_reg;
reg   [0:0] tmp_7_reg_1030_pp0_iter5_reg;
reg   [0:0] tmp_7_reg_1030_pp0_iter6_reg;
reg   [0:0] tmp_7_reg_1030_pp0_iter8_reg;
wire   [14:0] h_1_fu_677_p2;
reg   [14:0] h_1_reg_1034;
reg    ap_enable_reg_pp0_iter0;
wire   [28:0] input_V2_sum4_fu_696_p2;
reg   [28:0] input_V2_sum4_reg_1039;
wire   [15:0] stream_tail_1_cast_fu_711_p1;
reg   [15:0] stream_tail_1_cast_reg_1044;
reg   [127:0] gmem_read_addr_1_rea_reg_1055;
wire   [23:0] bound_fu_923_p2;
reg   [23:0] bound_reg_1060;
wire    ap_CS_fsm_state24;
wire   [0:0] exitcond_flatten_fu_745_p2;
reg   [0:0] exitcond_flatten_reg_1065;
wire    ap_block_state25_pp1_stage0_iter0;
wire    ap_block_state26_pp1_stage0_iter1;
reg    ap_block_state26_io;
wire    ap_block_state27_pp1_stage0_iter2;
reg    ap_block_state27_io;
reg    ap_block_pp1_stage0_11001;
wire   [23:0] indvar_flatten_next_fu_750_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [3:0] t_V_mid2_fu_756_p3;
reg   [3:0] t_V_mid2_reg_1074;
wire   [14:0] temp_V_mid2_v_fu_770_p3;
reg   [14:0] temp_V_mid2_v_reg_1079;
wire   [3:0] word_V_fu_783_p2;
wire   [63:0] tmp_21_fu_816_p1;
wire   [28:0] input_V2_sum3_fu_833_p2;
reg   [28:0] input_V2_sum3_reg_1102;
wire    ap_CS_fsm_state28;
reg    ap_sig_ioackin_gmem_read_AWREADY;
wire   [2:0] i_2_fu_883_p2;
wire    ap_CS_fsm_state36;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state14;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state25;
reg   [8:0] data_V_address0;
reg    data_V_ce0;
reg    data_V_we0;
wire   [127:0] data_V_q0;
reg   [2:0] i_reg_292;
wire    ap_CS_fsm_state3;
reg   [0:0] first_flag_reg_303;
reg   [2:0] stride_reg_316;
reg    ap_block_state35;
wire   [0:0] tmp_4_fu_457_p2;
reg   [15:0] ap_phi_mux_val_assign_phi_fu_330_p4;
reg   [14:0] ap_phi_mux_h_phi_fu_341_p4;
reg   [14:0] ap_phi_mux_h2_phi_fu_364_p4;
reg   [2:0] i1_reg_382;
wire   [0:0] exitcond_fu_877_p2;
wire   [0:0] ap_phi_mux_first_flag_1_phi_fu_397_p4;
reg   [0:0] first_flag_1_reg_393;
reg   [0:0] first_new_1_reg_405;
wire   [63:0] tmp_2_fu_448_p1;
wire   [63:0] tmp_10_fu_725_p1;
wire   [63:0] temp_V_mid2_fu_778_p1;
wire   [63:0] input_V2_sum_cast_fu_534_p1;
wire   [63:0] input_V2_sum4_cast_fu_715_p1;
wire   [63:0] input_V2_sum3_cast_fu_838_p1;
reg    ap_reg_ioackin_gmem_read_ARREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_gmem_read_AWREADY;
reg    ap_reg_ioackin_gmem_read_WREADY;
reg    ap_sig_ioackin_gmem_read_WREADY;
wire    ap_CS_fsm_state37;
reg    ap_block_state37;
wire   [1:0] tmp_13_fu_889_p1;
wire    ap_block_pp1_stage0_01001;
wire   [27:0] tmp_fu_418_p4;
wire   [11:0] tmp_9_fu_519_p2;
wire   [28:0] tmp_cast_fu_525_p1;
wire   [0:0] sel_tmp_i_fu_563_p2;
wire   [0:0] sel_tmp2_i_fu_576_p2;
wire   [15:0] sel_tmp1_i_fu_568_p3;
wire   [0:0] sel_tmp4_i_fu_589_p2;
wire   [15:0] sel_tmp3_i_fu_581_p3;
wire   [127:0] tmp_6_fu_631_p1;
wire   [15:0] tmp_15_fu_645_p1;
wire   [0:0] tmp_3_fu_640_p2;
wire   [15:0] p_s_fu_648_p2;
wire   [15:0] p_pn_fu_654_p3;
wire   [15:0] h_cast_fu_668_p1;
wire   [16:0] tmp_14_cast_fu_683_p1;
wire   [16:0] tmp_11_fu_687_p2;
wire   [28:0] tmp_13_cast_fu_692_p1;
wire   [8:0] tmp_16_fu_701_p1;
wire   [8:0] stream_tail_fu_705_p2;
wire   [7:0] tmp_23_cast_fu_736_p1;
wire   [0:0] tmp_12_fu_740_p2;
wire   [14:0] h_s_fu_764_p2;
wire   [1:0] op2_assign_fu_792_p5;
wire   [7:0] op2_assign_fu_792_p6;
wire   [127:0] tmp_20_fu_806_p1;
wire   [127:0] r_V_fu_810_p2;
wire   [11:0] tmp_17_fu_824_p2;
wire   [28:0] tmp_19_cast_fu_829_p1;
wire   [7:0] bound_fu_923_p0;
wire   [15:0] bound_fu_923_p1;
reg   [25:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
wire   [23:0] bound_fu_923_p00;
wire   [23:0] bound_fu_923_p10;
reg    ap_condition_907;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
#0 fifo_out_0_V_1_sel_rd = 1'b0;
#0 fifo_out_0_V_1_sel_wr = 1'b0;
#0 fifo_out_0_V_1_state = 2'd0;
#0 fifo_out_1_V_1_sel_rd = 1'b0;
#0 fifo_out_1_V_1_sel_wr = 1'b0;
#0 fifo_out_1_V_1_state = 2'd0;
#0 fifo_out_2_V_1_sel_rd = 1'b0;
#0 fifo_out_2_V_1_sel_wr = 1'b0;
#0 fifo_out_2_V_1_state = 2'd0;
#0 fifo_out_3_V_1_sel_rd = 1'b0;
#0 fifo_out_3_V_1_sel_wr = 1'b0;
#0 fifo_out_3_V_1_state = 2'd0;
#0 first = 1'd0;
#0 tail_3 = 16'd0;
#0 tail_0 = 16'd0;
#0 tail_1 = 16'd0;
#0 tail_2 = 16'd0;
#0 local_words_0 = 8'd0;
#0 local_words_1 = 8'd0;
#0 local_words_2 = 8'd0;
#0 local_words_3 = 8'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_reg_ioackin_gmem_read_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_read_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_read_WREADY = 1'b0;
end

circ_buff_read_many128_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
circ_buff_read_many128_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_V(input_V),
    .reset(reset),
    .debug_register(debug_register),
    .useable_words_address0(useable_words_address0),
    .useable_words_ce0(useable_words_ce0),
    .useable_words_q0(useable_words_q0)
);

circ_buff_read_many128_gmem_read_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_READ_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_READ_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_READ_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_READ_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_READ_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_READ_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_READ_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_READ_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_READ_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_READ_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_READ_CACHE_VALUE ))
circ_buff_read_many128_gmem_read_m_axi_U(
    .AWVALID(m_axi_gmem_read_AWVALID),
    .AWREADY(m_axi_gmem_read_AWREADY),
    .AWADDR(m_axi_gmem_read_AWADDR),
    .AWID(m_axi_gmem_read_AWID),
    .AWLEN(m_axi_gmem_read_AWLEN),
    .AWSIZE(m_axi_gmem_read_AWSIZE),
    .AWBURST(m_axi_gmem_read_AWBURST),
    .AWLOCK(m_axi_gmem_read_AWLOCK),
    .AWCACHE(m_axi_gmem_read_AWCACHE),
    .AWPROT(m_axi_gmem_read_AWPROT),
    .AWQOS(m_axi_gmem_read_AWQOS),
    .AWREGION(m_axi_gmem_read_AWREGION),
    .AWUSER(m_axi_gmem_read_AWUSER),
    .WVALID(m_axi_gmem_read_WVALID),
    .WREADY(m_axi_gmem_read_WREADY),
    .WDATA(m_axi_gmem_read_WDATA),
    .WSTRB(m_axi_gmem_read_WSTRB),
    .WLAST(m_axi_gmem_read_WLAST),
    .WID(m_axi_gmem_read_WID),
    .WUSER(m_axi_gmem_read_WUSER),
    .ARVALID(m_axi_gmem_read_ARVALID),
    .ARREADY(m_axi_gmem_read_ARREADY),
    .ARADDR(m_axi_gmem_read_ARADDR),
    .ARID(m_axi_gmem_read_ARID),
    .ARLEN(m_axi_gmem_read_ARLEN),
    .ARSIZE(m_axi_gmem_read_ARSIZE),
    .ARBURST(m_axi_gmem_read_ARBURST),
    .ARLOCK(m_axi_gmem_read_ARLOCK),
    .ARCACHE(m_axi_gmem_read_ARCACHE),
    .ARPROT(m_axi_gmem_read_ARPROT),
    .ARQOS(m_axi_gmem_read_ARQOS),
    .ARREGION(m_axi_gmem_read_ARREGION),
    .ARUSER(m_axi_gmem_read_ARUSER),
    .RVALID(m_axi_gmem_read_RVALID),
    .RREADY(m_axi_gmem_read_RREADY),
    .RDATA(m_axi_gmem_read_RDATA),
    .RLAST(m_axi_gmem_read_RLAST),
    .RID(m_axi_gmem_read_RID),
    .RUSER(m_axi_gmem_read_RUSER),
    .RRESP(m_axi_gmem_read_RRESP),
    .BVALID(m_axi_gmem_read_BVALID),
    .BREADY(m_axi_gmem_read_BREADY),
    .BRESP(m_axi_gmem_read_BRESP),
    .BID(m_axi_gmem_read_BID),
    .BUSER(m_axi_gmem_read_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_read_ARVALID),
    .I_ARREADY(gmem_read_ARREADY),
    .I_ARADDR(gmem_read_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_read_RVALID),
    .I_RREADY(gmem_read_RREADY),
    .I_RDATA(gmem_read_RDATA),
    .I_RID(gmem_read_RID),
    .I_RUSER(gmem_read_RUSER),
    .I_RRESP(gmem_read_RRESP),
    .I_RLAST(gmem_read_RLAST),
    .I_AWVALID(gmem_read_AWVALID),
    .I_AWREADY(gmem_read_AWREADY),
    .I_AWADDR(gmem_read_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_read_WVALID),
    .I_WREADY(gmem_read_WREADY),
    .I_WDATA(gmem_read_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd65535),
    .I_BVALID(gmem_read_BVALID),
    .I_BREADY(gmem_read_BREADY),
    .I_BRESP(gmem_read_BRESP),
    .I_BID(gmem_read_BID),
    .I_BUSER(gmem_read_BUSER)
);

circ_buff_read_many128_data_V #(
    .DataWidth( 128 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_V_address0),
    .ce0(data_V_ce0),
    .we0(data_V_we0),
    .d0(gmem_read_addr_1_rea_reg_1055),
    .q0(data_V_q0)
);

circ_buff_read_many128_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
circ_buff_read_many128_mux_42_8_1_1_U1(
    .din0(local_words_0),
    .din1(local_words_1),
    .din2(local_words_2),
    .din3(local_words_3),
    .din4(tmp_14_reg_968),
    .dout(words_fu_618_p6)
);

circ_buff_read_many128_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
circ_buff_read_many128_mux_42_8_1_1_U2(
    .din0(8'd0),
    .din1(8'd32),
    .din2(8'd64),
    .din3(8'd96),
    .din4(op2_assign_fu_792_p5),
    .dout(op2_assign_fu_792_p6)
);

circ_buff_read_many128_mul_mul_8ns_16ns_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
circ_buff_read_many128_mul_mul_8ns_16ns_24_1_1_U3(
    .din0(bound_fu_923_p0),
    .din1(bound_fu_923_p1),
    .dout(bound_fu_923_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_8_fu_635_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state14)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state14);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_8_fu_635_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state25)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_read_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1)) | ((ap_sig_ioackin_gmem_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_reg_ioackin_gmem_read_ARREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (gmem_read_ARREADY == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1)) | ((gmem_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
            ap_reg_ioackin_gmem_read_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_read_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state29)) begin
            if ((ap_sig_ioackin_gmem_read_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_read_AWREADY <= 1'b0;
            end else if ((gmem_read_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_read_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_read_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state30)) begin
            if ((ap_sig_ioackin_gmem_read_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_read_WREADY <= 1'b0;
            end else if ((gmem_read_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_read_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_0_V_1_sel_rd <= 1'b0;
    end else begin
        if (((fifo_out_0_V_1_ack_out == 1'b1) & (fifo_out_0_V_1_vld_out == 1'b1))) begin
            fifo_out_0_V_1_sel_rd <= ~fifo_out_0_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_0_V_1_sel_wr <= 1'b0;
    end else begin
        if (((fifo_out_0_V_1_ack_in == 1'b1) & (fifo_out_0_V_1_vld_in == 1'b1))) begin
            fifo_out_0_V_1_sel_wr <= ~fifo_out_0_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_0_V_1_state <= 2'd0;
    end else begin
        if ((((fifo_out_0_V_1_vld_in == 1'b0) & (fifo_out_0_V_1_state == 2'd2)) | ((fifo_out_0_V_1_vld_in == 1'b0) & (fifo_out_0_V_1_ack_out == 1'b1) & (fifo_out_0_V_1_state == 2'd3)))) begin
            fifo_out_0_V_1_state <= 2'd2;
        end else if ((((fifo_out_0_V_1_ack_out == 1'b0) & (fifo_out_0_V_1_state == 2'd1)) | ((fifo_out_0_V_1_ack_out == 1'b0) & (fifo_out_0_V_1_vld_in == 1'b1) & (fifo_out_0_V_1_state == 2'd3)))) begin
            fifo_out_0_V_1_state <= 2'd1;
        end else if (((~((fifo_out_0_V_1_vld_in == 1'b0) & (fifo_out_0_V_1_ack_out == 1'b1)) & ~((fifo_out_0_V_1_ack_out == 1'b0) & (fifo_out_0_V_1_vld_in == 1'b1)) & (fifo_out_0_V_1_state == 2'd3)) | ((fifo_out_0_V_1_ack_out == 1'b1) & (fifo_out_0_V_1_state == 2'd1)) | ((fifo_out_0_V_1_vld_in == 1'b1) & (fifo_out_0_V_1_state == 2'd2)))) begin
            fifo_out_0_V_1_state <= 2'd3;
        end else begin
            fifo_out_0_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_1_V_1_sel_rd <= 1'b0;
    end else begin
        if (((fifo_out_1_V_1_ack_out == 1'b1) & (fifo_out_1_V_1_vld_out == 1'b1))) begin
            fifo_out_1_V_1_sel_rd <= ~fifo_out_1_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_1_V_1_sel_wr <= 1'b0;
    end else begin
        if (((fifo_out_1_V_1_ack_in == 1'b1) & (fifo_out_1_V_1_vld_in == 1'b1))) begin
            fifo_out_1_V_1_sel_wr <= ~fifo_out_1_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_1_V_1_state <= 2'd0;
    end else begin
        if ((((fifo_out_1_V_1_vld_in == 1'b0) & (fifo_out_1_V_1_state == 2'd2)) | ((fifo_out_1_V_1_vld_in == 1'b0) & (fifo_out_1_V_1_ack_out == 1'b1) & (fifo_out_1_V_1_state == 2'd3)))) begin
            fifo_out_1_V_1_state <= 2'd2;
        end else if ((((fifo_out_1_V_1_ack_out == 1'b0) & (fifo_out_1_V_1_state == 2'd1)) | ((fifo_out_1_V_1_ack_out == 1'b0) & (fifo_out_1_V_1_vld_in == 1'b1) & (fifo_out_1_V_1_state == 2'd3)))) begin
            fifo_out_1_V_1_state <= 2'd1;
        end else if (((~((fifo_out_1_V_1_vld_in == 1'b0) & (fifo_out_1_V_1_ack_out == 1'b1)) & ~((fifo_out_1_V_1_ack_out == 1'b0) & (fifo_out_1_V_1_vld_in == 1'b1)) & (fifo_out_1_V_1_state == 2'd3)) | ((fifo_out_1_V_1_ack_out == 1'b1) & (fifo_out_1_V_1_state == 2'd1)) | ((fifo_out_1_V_1_vld_in == 1'b1) & (fifo_out_1_V_1_state == 2'd2)))) begin
            fifo_out_1_V_1_state <= 2'd3;
        end else begin
            fifo_out_1_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_2_V_1_sel_rd <= 1'b0;
    end else begin
        if (((fifo_out_2_V_1_ack_out == 1'b1) & (fifo_out_2_V_1_vld_out == 1'b1))) begin
            fifo_out_2_V_1_sel_rd <= ~fifo_out_2_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_2_V_1_sel_wr <= 1'b0;
    end else begin
        if (((fifo_out_2_V_1_ack_in == 1'b1) & (fifo_out_2_V_1_vld_in == 1'b1))) begin
            fifo_out_2_V_1_sel_wr <= ~fifo_out_2_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_2_V_1_state <= 2'd0;
    end else begin
        if ((((fifo_out_2_V_1_vld_in == 1'b0) & (fifo_out_2_V_1_state == 2'd2)) | ((fifo_out_2_V_1_vld_in == 1'b0) & (fifo_out_2_V_1_ack_out == 1'b1) & (fifo_out_2_V_1_state == 2'd3)))) begin
            fifo_out_2_V_1_state <= 2'd2;
        end else if ((((fifo_out_2_V_1_ack_out == 1'b0) & (fifo_out_2_V_1_state == 2'd1)) | ((fifo_out_2_V_1_ack_out == 1'b0) & (fifo_out_2_V_1_vld_in == 1'b1) & (fifo_out_2_V_1_state == 2'd3)))) begin
            fifo_out_2_V_1_state <= 2'd1;
        end else if (((~((fifo_out_2_V_1_vld_in == 1'b0) & (fifo_out_2_V_1_ack_out == 1'b1)) & ~((fifo_out_2_V_1_ack_out == 1'b0) & (fifo_out_2_V_1_vld_in == 1'b1)) & (fifo_out_2_V_1_state == 2'd3)) | ((fifo_out_2_V_1_ack_out == 1'b1) & (fifo_out_2_V_1_state == 2'd1)) | ((fifo_out_2_V_1_vld_in == 1'b1) & (fifo_out_2_V_1_state == 2'd2)))) begin
            fifo_out_2_V_1_state <= 2'd3;
        end else begin
            fifo_out_2_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_3_V_1_sel_rd <= 1'b0;
    end else begin
        if (((fifo_out_3_V_1_ack_out == 1'b1) & (fifo_out_3_V_1_vld_out == 1'b1))) begin
            fifo_out_3_V_1_sel_rd <= ~fifo_out_3_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_3_V_1_sel_wr <= 1'b0;
    end else begin
        if (((fifo_out_3_V_1_ack_in == 1'b1) & (fifo_out_3_V_1_vld_in == 1'b1))) begin
            fifo_out_3_V_1_sel_wr <= ~fifo_out_3_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fifo_out_3_V_1_state <= 2'd0;
    end else begin
        if ((((fifo_out_3_V_1_vld_in == 1'b0) & (fifo_out_3_V_1_state == 2'd2)) | ((fifo_out_3_V_1_vld_in == 1'b0) & (fifo_out_3_V_1_ack_out == 1'b1) & (fifo_out_3_V_1_state == 2'd3)))) begin
            fifo_out_3_V_1_state <= 2'd2;
        end else if ((((fifo_out_3_V_1_ack_out == 1'b0) & (fifo_out_3_V_1_state == 2'd1)) | ((fifo_out_3_V_1_ack_out == 1'b0) & (fifo_out_3_V_1_vld_in == 1'b1) & (fifo_out_3_V_1_state == 2'd3)))) begin
            fifo_out_3_V_1_state <= 2'd1;
        end else if (((~((fifo_out_3_V_1_vld_in == 1'b0) & (fifo_out_3_V_1_ack_out == 1'b1)) & ~((fifo_out_3_V_1_ack_out == 1'b0) & (fifo_out_3_V_1_vld_in == 1'b1)) & (fifo_out_3_V_1_state == 2'd3)) | ((fifo_out_3_V_1_ack_out == 1'b1) & (fifo_out_3_V_1_state == 2'd1)) | ((fifo_out_3_V_1_vld_in == 1'b1) & (fifo_out_3_V_1_state == 2'd2)))) begin
            fifo_out_3_V_1_state <= 2'd3;
        end else begin
            fifo_out_3_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (exitcond_fu_877_p2 == 1'd1))) begin
        first_flag_1_reg_393 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_487_p2 == 1'd1))) begin
        first_flag_1_reg_393 <= first_flag_reg_303;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_436_p2 == 1'd1) & (first_load_reg_936 == 1'd0))) begin
        first_flag_reg_303 <= 1'd1;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (first_load_load_fu_432_p1 == 1'd1))) begin
        first_flag_reg_303 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (exitcond_fu_877_p2 == 1'd1))) begin
        first_new_1_reg_405 <= 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_487_p2 == 1'd1))) begin
        first_new_1_reg_405 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1065 == 1'd0))) begin
        h2_reg_360 <= temp_V_mid2_v_reg_1079;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        h2_reg_360 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1))) begin
        h_reg_337 <= h_1_reg_1034;
    end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_8_fu_635_p2 == 1'd0))) begin
        h_reg_337 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((tmp_4_fu_457_p2 == 1'd1) & (first_load_reg_936 == 1'd1)) | ((tmp_4_fu_457_p2 == 1'd1) & (tmp_1_fu_436_p2 == 1'd1))))) begin
        i1_reg_382 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state36) & (exitcond_fu_877_p2 == 1'd0))) begin
        i1_reg_382 <= i_2_fu_883_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (first_load_load_fu_432_p1 == 1'd0))) begin
        i_reg_292 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_292 <= i_1_reg_943;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_745_p2 == 1'd0))) begin
        indvar_flatten_reg_349 <= indvar_flatten_next_fu_750_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        indvar_flatten_reg_349 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (((first_load_reg_936 == 1'd1) & (tmp_4_fu_457_p2 == 1'd0)) | ((tmp_1_fu_436_p2 == 1'd1) & (tmp_4_fu_457_p2 == 1'd0))))) begin
        stride_reg_316 <= 3'd0;
    end else if ((~((gmem_read_BVALID == 1'b0) & (tmp_8_reg_1020 == 1'd0)) & (1'b1 == ap_CS_fsm_state35))) begin
        stride_reg_316 <= stride_1_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_745_p2 == 1'd0))) begin
        t_V_reg_371 <= word_V_fu_783_p2;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        t_V_reg_371 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (tmp_13_fu_889_p1 == 2'd0) & (exitcond_fu_877_p2 == 1'd0))) begin
        tail_0 <= 16'd0;
    end else if ((~((gmem_read_BVALID == 1'b0) & (tmp_8_reg_1020 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (tmp_14_reg_968 == 2'd0) & (tmp_8_reg_1020 == 1'd0))) begin
        tail_0 <= val_assign_reg_327;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (tmp_13_fu_889_p1 == 2'd1) & (exitcond_fu_877_p2 == 1'd0))) begin
        tail_1 <= 16'd0;
    end else if ((~((gmem_read_BVALID == 1'b0) & (tmp_8_reg_1020 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (tmp_14_reg_968 == 2'd1) & (tmp_8_reg_1020 == 1'd0))) begin
        tail_1 <= val_assign_reg_327;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (tmp_13_fu_889_p1 == 2'd2) & (exitcond_fu_877_p2 == 1'd0))) begin
        tail_2 <= 16'd0;
    end else if ((~((gmem_read_BVALID == 1'b0) & (tmp_8_reg_1020 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (tmp_14_reg_968 == 2'd2) & (tmp_8_reg_1020 == 1'd0))) begin
        tail_2 <= val_assign_reg_327;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) & (tmp_13_fu_889_p1 == 2'd3) & (exitcond_fu_877_p2 == 1'd0))) begin
        tail_3 <= 16'd0;
    end else if ((~((gmem_read_BVALID == 1'b0) & (tmp_8_reg_1020 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (tmp_14_reg_968 == 2'd3) & (tmp_8_reg_1020 == 1'd0))) begin
        tail_3 <= val_assign_reg_327;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1))) begin
        val_assign_reg_327 <= stream_tail_1_cast_reg_1044;
    end else if (((1'b1 == ap_CS_fsm_state13) & (tmp_8_fu_635_p2 == 1'd0))) begin
        val_assign_reg_327 <= stream_tail_1_fu_594_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        bound_reg_1060 <= bound_fu_923_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_8_fu_635_p2 == 1'd0))) begin
        bytes_read_reg_1024 <= bytes_read_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_1065 <= exitcond_flatten_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((fifo_out_0_V_1_load_A == 1'b1)) begin
        fifo_out_0_V_1_payload_A <= tmp_21_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((fifo_out_0_V_1_load_B == 1'b1)) begin
        fifo_out_0_V_1_payload_B <= tmp_21_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((fifo_out_1_V_1_load_A == 1'b1)) begin
        fifo_out_1_V_1_payload_A <= tmp_21_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((fifo_out_1_V_1_load_B == 1'b1)) begin
        fifo_out_1_V_1_payload_B <= tmp_21_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((fifo_out_2_V_1_load_A == 1'b1)) begin
        fifo_out_2_V_1_payload_A <= tmp_21_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((fifo_out_2_V_1_load_B == 1'b1)) begin
        fifo_out_2_V_1_payload_B <= tmp_21_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((fifo_out_3_V_1_load_A == 1'b1)) begin
        fifo_out_3_V_1_payload_A <= tmp_21_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((fifo_out_3_V_1_load_B == 1'b1)) begin
        fifo_out_3_V_1_payload_B <= tmp_21_fu_816_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fifo_out_3_V_1_ack_in == 1'b0) | (fifo_out_2_V_1_ack_in == 1'b0) | (fifo_out_1_V_1_ack_in == 1'b0) | (fifo_out_0_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state37) & (ap_phi_mux_first_flag_1_phi_fu_397_p4 == 1'd1))) begin
        first <= first_new_1_reg_405;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        first_load_reg_936 <= first;
        tmp_15_cast_reg_929[27 : 0] <= tmp_15_cast_fu_428_p1[27 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_7_reg_1030_pp0_iter7_reg == 1'd1))) begin
        gmem_read_addr_1_rea_reg_1055 <= gmem_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_1_reg_1034 <= h_1_fu_677_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_reg_337_pp0_iter1_reg <= h_reg_337;
        tmp_7_reg_1030 <= tmp_7_fu_672_p2;
        tmp_7_reg_1030_pp0_iter1_reg <= tmp_7_reg_1030;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        h_reg_337_pp0_iter2_reg <= h_reg_337_pp0_iter1_reg;
        h_reg_337_pp0_iter3_reg <= h_reg_337_pp0_iter2_reg;
        h_reg_337_pp0_iter4_reg <= h_reg_337_pp0_iter3_reg;
        h_reg_337_pp0_iter5_reg <= h_reg_337_pp0_iter4_reg;
        h_reg_337_pp0_iter6_reg <= h_reg_337_pp0_iter5_reg;
        h_reg_337_pp0_iter7_reg <= h_reg_337_pp0_iter6_reg;
        h_reg_337_pp0_iter8_reg <= h_reg_337_pp0_iter7_reg;
        tmp_7_reg_1030_pp0_iter2_reg <= tmp_7_reg_1030_pp0_iter1_reg;
        tmp_7_reg_1030_pp0_iter3_reg <= tmp_7_reg_1030_pp0_iter2_reg;
        tmp_7_reg_1030_pp0_iter4_reg <= tmp_7_reg_1030_pp0_iter3_reg;
        tmp_7_reg_1030_pp0_iter5_reg <= tmp_7_reg_1030_pp0_iter4_reg;
        tmp_7_reg_1030_pp0_iter6_reg <= tmp_7_reg_1030_pp0_iter5_reg;
        tmp_7_reg_1030_pp0_iter7_reg <= tmp_7_reg_1030_pp0_iter6_reg;
        tmp_7_reg_1030_pp0_iter8_reg <= tmp_7_reg_1030_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (first_load_reg_936 == 1'd0))) begin
        i_1_reg_943 <= i_1_fu_442_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        idx_cast3_reg_1004[2 : 1] <= idx_cast3_fu_544_p1[2 : 1];
idx_cast3_reg_1004[10 : 9] <= idx_cast3_fu_544_p1[10 : 9];
        tmp_8_reg_1020 <= tmp_8_fu_635_p2;
        words_reg_1014 <= words_fu_618_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_487_p2 == 1'd0))) begin
        idx_cast_reg_981[2 : 1] <= idx_cast_fu_515_p1[2 : 1];
idx_cast_reg_981[10 : 9] <= idx_cast_fu_515_p1[10 : 9];
        idx_reg_976[2 : 1] <= idx_fu_503_p5[2 : 1];
idx_reg_976[10 : 9] <= idx_fu_503_p5[10 : 9];
        input_V2_sum_reg_986 <= input_V2_sum_fu_529_p2;
        tmp_14_reg_968 <= tmp_14_fu_499_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        input_V2_sum3_reg_1102 <= input_V2_sum3_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_fu_672_p2 == 1'd1))) begin
        input_V2_sum4_reg_1039 <= input_V2_sum4_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_reg_953 == 2'd0))) begin
        local_words_0 <= useable_words_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_reg_953 == 2'd1))) begin
        local_words_1 <= useable_words_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_reg_953 == 2'd2))) begin
        local_words_2 <= useable_words_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_5_reg_953 == 2'd3))) begin
        local_words_3 <= useable_words_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_read_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
        stream_head_V_reg_997 <= gmem_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_fu_672_p2 == 1'd1))) begin
        stream_tail_1_cast_reg_1044[8 : 0] <= stream_tail_1_cast_fu_711_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        stride_1_reg_963 <= stride_1_fu_493_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_745_p2 == 1'd0))) begin
        t_V_mid2_reg_1074 <= t_V_mid2_fu_756_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_745_p2 == 1'd0))) begin
        temp_V_mid2_v_reg_1079 <= temp_V_mid2_v_fu_770_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_1_fu_436_p2 == 1'd0) & (first_load_reg_936 == 1'd0))) begin
        tmp_5_reg_953 <= tmp_5_fu_453_p1;
    end
end

always @ (*) begin
    if ((tmp_7_fu_672_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_745_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((~((fifo_out_3_V_1_ack_in == 1'b0) | (fifo_out_2_V_1_ack_in == 1'b0) | (fifo_out_1_V_1_ack_in == 1'b0) | (fifo_out_0_V_1_ack_in == 1'b0)) & (fifo_out_3_V_1_state[1'd0] == 1'b0) & (fifo_out_2_V_1_state[1'd0] == 1'b0) & (fifo_out_1_V_1_state[1'd0] == 1'b0) & (fifo_out_0_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_1065 == 1'd0))) begin
        ap_phi_mux_h2_phi_fu_364_p4 = temp_V_mid2_v_reg_1079;
    end else begin
        ap_phi_mux_h2_phi_fu_364_p4 = h2_reg_360;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1))) begin
        ap_phi_mux_h_phi_fu_341_p4 = h_1_reg_1034;
    end else begin
        ap_phi_mux_h_phi_fu_341_p4 = h_reg_337;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1))) begin
        ap_phi_mux_val_assign_phi_fu_330_p4 = stream_tail_1_cast_reg_1044;
    end else begin
        ap_phi_mux_val_assign_phi_fu_330_p4 = val_assign_reg_327;
    end
end

always @ (*) begin
    if ((~((fifo_out_3_V_1_ack_in == 1'b0) | (fifo_out_2_V_1_ack_in == 1'b0) | (fifo_out_1_V_1_ack_in == 1'b0) | (fifo_out_0_V_1_ack_in == 1'b0)) & (fifo_out_3_V_1_state[1'd0] == 1'b0) & (fifo_out_2_V_1_state[1'd0] == 1'b0) & (fifo_out_1_V_1_state[1'd0] == 1'b0) & (fifo_out_0_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_read_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_read_ARREADY = gmem_read_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_read_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_read_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_read_AWREADY = gmem_read_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_read_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_read_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_read_WREADY = gmem_read_WREADY;
    end else begin
        ap_sig_ioackin_gmem_read_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_V_address0 = temp_V_mid2_fu_778_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        data_V_address0 = tmp_10_fu_725_p1;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (tmp_7_reg_1030_pp0_iter8_reg == 1'd1))) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((fifo_out_0_V_1_sel == 1'b1)) begin
        fifo_out_0_V_1_data_out = fifo_out_0_V_1_payload_B;
    end else begin
        fifo_out_0_V_1_data_out = fifo_out_0_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_14_reg_968 == 2'd0))) begin
        fifo_out_0_V_1_vld_in = 1'b1;
    end else begin
        fifo_out_0_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_14_reg_968 == 2'd0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_14_reg_968 == 2'd0)))) begin
        fifo_out_0_V_TDATA_blk_n = fifo_out_0_V_1_state[1'd1];
    end else begin
        fifo_out_0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((fifo_out_1_V_1_sel == 1'b1)) begin
        fifo_out_1_V_1_data_out = fifo_out_1_V_1_payload_B;
    end else begin
        fifo_out_1_V_1_data_out = fifo_out_1_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_14_reg_968 == 2'd1))) begin
        fifo_out_1_V_1_vld_in = 1'b1;
    end else begin
        fifo_out_1_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_14_reg_968 == 2'd1)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_14_reg_968 == 2'd1)))) begin
        fifo_out_1_V_TDATA_blk_n = fifo_out_1_V_1_state[1'd1];
    end else begin
        fifo_out_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((fifo_out_2_V_1_sel == 1'b1)) begin
        fifo_out_2_V_1_data_out = fifo_out_2_V_1_payload_B;
    end else begin
        fifo_out_2_V_1_data_out = fifo_out_2_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_14_reg_968 == 2'd2))) begin
        fifo_out_2_V_1_vld_in = 1'b1;
    end else begin
        fifo_out_2_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_14_reg_968 == 2'd2)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_14_reg_968 == 2'd2)))) begin
        fifo_out_2_V_TDATA_blk_n = fifo_out_2_V_1_state[1'd1];
    end else begin
        fifo_out_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((fifo_out_3_V_1_sel == 1'b1)) begin
        fifo_out_3_V_1_data_out = fifo_out_3_V_1_payload_B;
    end else begin
        fifo_out_3_V_1_data_out = fifo_out_3_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_14_reg_968 == 2'd3))) begin
        fifo_out_3_V_1_vld_in = 1'b1;
    end else begin
        fifo_out_3_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (tmp_14_reg_968 == 2'd3)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_14_reg_968 == 2'd3)))) begin
        fifo_out_3_V_TDATA_blk_n = fifo_out_3_V_1_state[1'd1];
    end else begin
        fifo_out_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_read_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_907)) begin
            gmem_read_ARADDR = input_V2_sum4_cast_fu_715_p1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            gmem_read_ARADDR = input_V2_sum_cast_fu_534_p1;
        end else begin
            gmem_read_ARADDR = 'bx;
        end
    end else begin
        gmem_read_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_gmem_read_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1)) | ((ap_reg_ioackin_gmem_read_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state5)))) begin
        gmem_read_ARVALID = 1'b1;
    end else begin
        gmem_read_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_read_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state29))) begin
        gmem_read_AWVALID = 1'b1;
    end else begin
        gmem_read_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((gmem_read_BVALID == 1'b0) & (tmp_8_reg_1020 == 1'd0)) & (1'b1 == ap_CS_fsm_state35) & (tmp_8_reg_1020 == 1'd0))) begin
        gmem_read_BREADY = 1'b1;
    end else begin
        gmem_read_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_7_reg_1030_pp0_iter7_reg == 1'd1)) | ((gmem_read_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12)))) begin
        gmem_read_RREADY = 1'b1;
    end else begin
        gmem_read_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_read_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state30))) begin
        gmem_read_WVALID = 1'b1;
    end else begin
        gmem_read_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1)))) begin
        gmem_read_blk_n_AR = m_axi_gmem_read_ARREADY;
    end else begin
        gmem_read_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        gmem_read_blk_n_AW = m_axi_gmem_read_AWREADY;
    end else begin
        gmem_read_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & (tmp_8_reg_1020 == 1'd0))) begin
        gmem_read_blk_n_B = m_axi_gmem_read_BVALID;
    end else begin
        gmem_read_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_7_reg_1030_pp0_iter7_reg == 1'd1)))) begin
        gmem_read_blk_n_R = m_axi_gmem_read_RVALID;
    end else begin
        gmem_read_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        gmem_read_blk_n_W = m_axi_gmem_read_WREADY;
    end else begin
        gmem_read_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        useable_words_ce0 = 1'b1;
    end else begin
        useable_words_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (((tmp_4_fu_457_p2 == 1'd1) & (first_load_reg_936 == 1'd1)) | ((tmp_4_fu_457_p2 == 1'd1) & (tmp_1_fu_436_p2 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else if (((1'b1 == ap_CS_fsm_state2) & (((first_load_reg_936 == 1'd1) & (tmp_4_fu_457_p2 == 1'd0)) | ((tmp_1_fu_436_p2 == 1'd1) & (tmp_4_fu_457_p2 == 1'd0))))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond1_fu_487_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((ap_sig_ioackin_gmem_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((gmem_read_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (tmp_8_fu_635_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_7_fu_672_p2 == 1'd0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_7_fu_672_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_fu_745_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_fu_745_p2 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((ap_sig_ioackin_gmem_read_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((ap_sig_ioackin_gmem_read_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            if ((~((gmem_read_BVALID == 1'b0) & (tmp_8_reg_1020 == 1'd0)) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (exitcond_fu_877_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if ((~((fifo_out_3_V_1_ack_in == 1'b0) | (fifo_out_2_V_1_ack_in == 1'b0) | (fifo_out_1_V_1_ack_in == 1'b0) | (fifo_out_0_V_1_ack_in == 1'b0)) & (fifo_out_3_V_1_state[1'd0] == 1'b0) & (fifo_out_2_V_1_state[1'd0] == 1'b0) & (fifo_out_1_V_1_state[1'd0] == 1'b0) & (fifo_out_0_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((gmem_read_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_7_reg_1030_pp0_iter7_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_read_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_7_reg_1030_pp0_iter7_reg == 1'd1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_read_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_7_reg_1030_pp0_iter7_reg == 1'd1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state26_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state27_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state26_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state14_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((ap_sig_ioackin_gmem_read_ARREADY == 1'b0) & (tmp_7_reg_1030 == 1'd1));
end

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp0_stage0_iter8 = ((gmem_read_RVALID == 1'b0) & (tmp_7_reg_1030_pp0_iter7_reg == 1'd1));
end

assign ap_block_state23_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_io = (((fifo_out_3_V_1_ack_in == 1'b0) & (tmp_14_reg_968 == 2'd3)) | ((fifo_out_2_V_1_ack_in == 1'b0) & (tmp_14_reg_968 == 2'd2)) | ((fifo_out_1_V_1_ack_in == 1'b0) & (tmp_14_reg_968 == 2'd1)) | ((fifo_out_0_V_1_ack_in == 1'b0) & (tmp_14_reg_968 == 2'd0)));
end

assign ap_block_state26_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state27_io = (((fifo_out_3_V_1_ack_in == 1'b0) & (tmp_14_reg_968 == 2'd3)) | ((fifo_out_2_V_1_ack_in == 1'b0) & (tmp_14_reg_968 == 2'd2)) | ((fifo_out_1_V_1_ack_in == 1'b0) & (tmp_14_reg_968 == 2'd1)) | ((fifo_out_0_V_1_ack_in == 1'b0) & (tmp_14_reg_968 == 2'd0)));
end

assign ap_block_state27_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35 = ((gmem_read_BVALID == 1'b0) & (tmp_8_reg_1020 == 1'd0));
end

always @ (*) begin
    ap_block_state37 = ((fifo_out_3_V_1_ack_in == 1'b0) | (fifo_out_2_V_1_ack_in == 1'b0) | (fifo_out_1_V_1_ack_in == 1'b0) | (fifo_out_0_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_condition_907 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_7_reg_1030 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_first_flag_1_phi_fu_397_p4 = first_flag_1_reg_393;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_923_p0 = bound_fu_923_p00;

assign bound_fu_923_p00 = words_reg_1014;

assign bound_fu_923_p1 = bound_fu_923_p10;

assign bound_fu_923_p10 = bytes_read_reg_1024;

assign bytes_read_fu_662_p2 = (p_pn_fu_654_p3 - stream_tail_1_fu_594_p3);

assign exitcond1_fu_487_p2 = ((stride_reg_316 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_745_p2 = ((indvar_flatten_reg_349 == bound_reg_1060) ? 1'b1 : 1'b0);

assign exitcond_fu_877_p2 = ((i1_reg_382 == 3'd4) ? 1'b1 : 1'b0);

assign fifo_out_0_V_1_ack_in = fifo_out_0_V_1_state[1'd1];

assign fifo_out_0_V_1_ack_out = fifo_out_0_V_TREADY;

assign fifo_out_0_V_1_load_A = (fifo_out_0_V_1_state_cmp_full & ~fifo_out_0_V_1_sel_wr);

assign fifo_out_0_V_1_load_B = (fifo_out_0_V_1_state_cmp_full & fifo_out_0_V_1_sel_wr);

assign fifo_out_0_V_1_sel = fifo_out_0_V_1_sel_rd;

assign fifo_out_0_V_1_state_cmp_full = ((fifo_out_0_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign fifo_out_0_V_1_vld_out = fifo_out_0_V_1_state[1'd0];

assign fifo_out_0_V_TDATA = fifo_out_0_V_1_data_out;

assign fifo_out_0_V_TVALID = fifo_out_0_V_1_state[1'd0];

assign fifo_out_1_V_1_ack_in = fifo_out_1_V_1_state[1'd1];

assign fifo_out_1_V_1_ack_out = fifo_out_1_V_TREADY;

assign fifo_out_1_V_1_load_A = (fifo_out_1_V_1_state_cmp_full & ~fifo_out_1_V_1_sel_wr);

assign fifo_out_1_V_1_load_B = (fifo_out_1_V_1_state_cmp_full & fifo_out_1_V_1_sel_wr);

assign fifo_out_1_V_1_sel = fifo_out_1_V_1_sel_rd;

assign fifo_out_1_V_1_state_cmp_full = ((fifo_out_1_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign fifo_out_1_V_1_vld_out = fifo_out_1_V_1_state[1'd0];

assign fifo_out_1_V_TDATA = fifo_out_1_V_1_data_out;

assign fifo_out_1_V_TVALID = fifo_out_1_V_1_state[1'd0];

assign fifo_out_2_V_1_ack_in = fifo_out_2_V_1_state[1'd1];

assign fifo_out_2_V_1_ack_out = fifo_out_2_V_TREADY;

assign fifo_out_2_V_1_load_A = (fifo_out_2_V_1_state_cmp_full & ~fifo_out_2_V_1_sel_wr);

assign fifo_out_2_V_1_load_B = (fifo_out_2_V_1_state_cmp_full & fifo_out_2_V_1_sel_wr);

assign fifo_out_2_V_1_sel = fifo_out_2_V_1_sel_rd;

assign fifo_out_2_V_1_state_cmp_full = ((fifo_out_2_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign fifo_out_2_V_1_vld_out = fifo_out_2_V_1_state[1'd0];

assign fifo_out_2_V_TDATA = fifo_out_2_V_1_data_out;

assign fifo_out_2_V_TVALID = fifo_out_2_V_1_state[1'd0];

assign fifo_out_3_V_1_ack_in = fifo_out_3_V_1_state[1'd1];

assign fifo_out_3_V_1_ack_out = fifo_out_3_V_TREADY;

assign fifo_out_3_V_1_load_A = (fifo_out_3_V_1_state_cmp_full & ~fifo_out_3_V_1_sel_wr);

assign fifo_out_3_V_1_load_B = (fifo_out_3_V_1_state_cmp_full & fifo_out_3_V_1_sel_wr);

assign fifo_out_3_V_1_sel = fifo_out_3_V_1_sel_rd;

assign fifo_out_3_V_1_state_cmp_full = ((fifo_out_3_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign fifo_out_3_V_1_vld_out = fifo_out_3_V_1_state[1'd0];

assign fifo_out_3_V_TDATA = fifo_out_3_V_1_data_out;

assign fifo_out_3_V_TVALID = fifo_out_3_V_1_state[1'd0];

assign first_load_load_fu_432_p1 = first;

assign gmem_read_AWADDR = input_V2_sum3_cast_fu_838_p1;

assign gmem_read_WDATA = val_assign_reg_327;

assign h_1_fu_677_p2 = (ap_phi_mux_h_phi_fu_341_p4 + 15'd1);

assign h_cast_fu_668_p1 = ap_phi_mux_h_phi_fu_341_p4;

assign h_s_fu_764_p2 = (15'd1 + ap_phi_mux_h2_phi_fu_364_p4);

assign i_1_fu_442_p2 = (i_reg_292 + 3'd1);

assign i_2_fu_883_p2 = (i1_reg_382 + 3'd1);

assign idx_cast3_fu_544_p1 = idx_reg_976;

assign idx_cast_fu_515_p1 = idx_fu_503_p5;

assign idx_fu_503_p5 = {{{{tmp_14_fu_499_p1}, {6'd0}}, {tmp_14_fu_499_p1}}, {1'd0}};

assign indvar_flatten_next_fu_750_p2 = (indvar_flatten_reg_349 + 24'd1);

assign input_V2_sum3_cast_fu_838_p1 = input_V2_sum3_reg_1102;

assign input_V2_sum3_fu_833_p2 = (tmp_19_cast_fu_829_p1 + tmp_15_cast_reg_929);

assign input_V2_sum4_cast_fu_715_p1 = input_V2_sum4_reg_1039;

assign input_V2_sum4_fu_696_p2 = (tmp_15_cast_reg_929 + tmp_13_cast_fu_692_p1);

assign input_V2_sum_cast_fu_534_p1 = input_V2_sum_reg_986;

assign input_V2_sum_fu_529_p2 = (tmp_15_cast_reg_929 + tmp_cast_fu_525_p1);

assign op2_assign_fu_792_p5 = t_V_mid2_reg_1074[1:0];

assign p_pn_fu_654_p3 = ((tmp_3_fu_640_p2[0:0] === 1'b1) ? tmp_15_fu_645_p1 : p_s_fu_648_p2);

assign p_s_fu_648_p2 = (16'd512 + tmp_15_fu_645_p1);

assign r_V_fu_810_p2 = data_V_q0 >> tmp_20_fu_806_p1;

assign sel_tmp1_i_fu_568_p3 = ((sel_tmp_i_fu_563_p2[0:0] === 1'b1) ? tail_0 : tail_3);

assign sel_tmp2_i_fu_576_p2 = ((tmp_14_reg_968 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp3_i_fu_581_p3 = ((sel_tmp2_i_fu_576_p2[0:0] === 1'b1) ? tail_1 : sel_tmp1_i_fu_568_p3);

assign sel_tmp4_i_fu_589_p2 = ((tmp_14_reg_968 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp_i_fu_563_p2 = ((tmp_14_reg_968 == 2'd0) ? 1'b1 : 1'b0);

assign stream_tail_1_cast_fu_711_p1 = stream_tail_fu_705_p2;

assign stream_tail_1_fu_594_p3 = ((sel_tmp4_i_fu_589_p2[0:0] === 1'b1) ? tail_2 : sel_tmp3_i_fu_581_p3);

assign stream_tail_fu_705_p2 = (9'd1 + tmp_16_fu_701_p1);

assign stride_1_fu_493_p2 = (stride_reg_316 + 3'd1);

assign t_V_mid2_fu_756_p3 = ((tmp_12_fu_740_p2[0:0] === 1'b1) ? t_V_reg_371 : 4'd0);

assign temp_V_mid2_fu_778_p1 = temp_V_mid2_v_fu_770_p3;

assign temp_V_mid2_v_fu_770_p3 = ((tmp_12_fu_740_p2[0:0] === 1'b1) ? ap_phi_mux_h2_phi_fu_364_p4 : h_s_fu_764_p2);

assign tmp_10_fu_725_p1 = h_reg_337_pp0_iter8_reg;

assign tmp_11_fu_687_p2 = (tmp_14_cast_fu_683_p1 + idx_cast3_reg_1004);

assign tmp_12_fu_740_p2 = ((tmp_23_cast_fu_736_p1 < words_reg_1014) ? 1'b1 : 1'b0);

assign tmp_13_cast_fu_692_p1 = tmp_11_fu_687_p2;

assign tmp_13_fu_889_p1 = i1_reg_382[1:0];

assign tmp_14_cast_fu_683_p1 = ap_phi_mux_val_assign_phi_fu_330_p4;

assign tmp_14_fu_499_p1 = stride_reg_316[1:0];

assign tmp_15_cast_fu_428_p1 = tmp_fu_418_p4;

assign tmp_15_fu_645_p1 = stream_head_V_reg_997[15:0];

assign tmp_16_fu_701_p1 = ap_phi_mux_val_assign_phi_fu_330_p4[8:0];

assign tmp_17_fu_824_p2 = (idx_cast_reg_981 + 12'd512);

assign tmp_19_cast_fu_829_p1 = tmp_17_fu_824_p2;

assign tmp_1_fu_436_p2 = ((i_reg_292 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_20_fu_806_p1 = op2_assign_fu_792_p6;

assign tmp_21_fu_816_p1 = r_V_fu_810_p2[63:0];

assign tmp_23_cast_fu_736_p1 = t_V_reg_371;

assign tmp_2_fu_448_p1 = i_reg_292;

assign tmp_3_fu_640_p2 = ((stream_head_V_reg_997 > tmp_6_fu_631_p1) ? 1'b1 : 1'b0);

assign tmp_4_fu_457_p2 = ((reset == 8'd1) ? 1'b1 : 1'b0);

assign tmp_5_fu_453_p1 = i_reg_292[1:0];

assign tmp_6_fu_631_p1 = stream_tail_1_fu_594_p3;

assign tmp_7_fu_672_p2 = (($signed(h_cast_fu_668_p1) < $signed(bytes_read_reg_1024)) ? 1'b1 : 1'b0);

assign tmp_8_fu_635_p2 = ((tmp_6_fu_631_p1 == stream_head_V_reg_997) ? 1'b1 : 1'b0);

assign tmp_9_fu_519_p2 = (12'd513 + idx_cast_fu_515_p1);

assign tmp_cast_fu_525_p1 = tmp_9_fu_519_p2;

assign tmp_fu_418_p4 = {{input_V[31:4]}};

assign useable_words_address0 = tmp_2_fu_448_p1;

assign word_V_fu_783_p2 = (t_V_mid2_fu_756_p3 + 4'd1);

always @ (posedge ap_clk) begin
    tmp_15_cast_reg_929[28] <= 1'b0;
    idx_reg_976[0] <= 1'b0;
    idx_reg_976[8:3] <= 6'b000000;
    idx_cast_reg_981[0] <= 1'b0;
    idx_cast_reg_981[8:3] <= 6'b000000;
    idx_cast_reg_981[11] <= 1'b0;
    idx_cast3_reg_1004[0] <= 1'b0;
    idx_cast3_reg_1004[8:3] <= 6'b000000;
    idx_cast3_reg_1004[16:11] <= 6'b000000;
    stream_tail_1_cast_reg_1044[15:9] <= 7'b0000000;
end

endmodule //circ_buff_read_many128
