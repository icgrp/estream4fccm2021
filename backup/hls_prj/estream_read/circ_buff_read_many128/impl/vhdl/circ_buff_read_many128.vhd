-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity circ_buff_read_many128 is
generic (
    C_M_AXI_GMEM_READ_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_READ_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_READ_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_READ_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_READ_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_READ_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_read_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_read_AWREADY : IN STD_LOGIC;
    m_axi_gmem_read_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_read_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_read_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_read_WVALID : OUT STD_LOGIC;
    m_axi_gmem_read_WREADY : IN STD_LOGIC;
    m_axi_gmem_read_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_DATA_WIDTH-1 downto 0);
    m_axi_gmem_read_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_read_WLAST : OUT STD_LOGIC;
    m_axi_gmem_read_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_read_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_read_ARREADY : IN STD_LOGIC;
    m_axi_gmem_read_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_read_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_read_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_read_RVALID : IN STD_LOGIC;
    m_axi_gmem_read_RREADY : OUT STD_LOGIC;
    m_axi_gmem_read_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_DATA_WIDTH-1 downto 0);
    m_axi_gmem_read_RLAST : IN STD_LOGIC;
    m_axi_gmem_read_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_read_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_BVALID : IN STD_LOGIC;
    m_axi_gmem_read_BREADY : OUT STD_LOGIC;
    m_axi_gmem_read_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_BUSER_WIDTH-1 downto 0);
    fifo_out_0_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_out_0_V_TVALID : OUT STD_LOGIC;
    fifo_out_0_V_TREADY : IN STD_LOGIC;
    fifo_out_1_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_out_1_V_TVALID : OUT STD_LOGIC;
    fifo_out_1_V_TREADY : IN STD_LOGIC;
    fifo_out_2_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_out_2_V_TVALID : OUT STD_LOGIC;
    fifo_out_2_V_TREADY : IN STD_LOGIC;
    fifo_out_3_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    fifo_out_3_V_TVALID : OUT STD_LOGIC;
    fifo_out_3_V_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of circ_buff_read_many128 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "circ_buff_read_many128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=14,HLS_SYN_DSP=1,HLS_SYN_FF=2220,HLS_SYN_LUT=2881,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv12_201 : STD_LOGIC_VECTOR (11 downto 0) := "001000000001";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_20 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_const_lv8_40 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv12_200 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_V : STD_LOGIC_VECTOR (31 downto 0);
    signal reset : STD_LOGIC_VECTOR (7 downto 0);
    signal debug_register : STD_LOGIC_VECTOR (63 downto 0);
    signal useable_words_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal useable_words_ce0 : STD_LOGIC;
    signal useable_words_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal fifo_out_0_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_0_V_1_vld_in : STD_LOGIC;
    signal fifo_out_0_V_1_vld_out : STD_LOGIC;
    signal fifo_out_0_V_1_ack_in : STD_LOGIC;
    signal fifo_out_0_V_1_ack_out : STD_LOGIC;
    signal fifo_out_0_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_0_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_0_V_1_sel_rd : STD_LOGIC := '0';
    signal fifo_out_0_V_1_sel_wr : STD_LOGIC := '0';
    signal fifo_out_0_V_1_sel : STD_LOGIC;
    signal fifo_out_0_V_1_load_A : STD_LOGIC;
    signal fifo_out_0_V_1_load_B : STD_LOGIC;
    signal fifo_out_0_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal fifo_out_0_V_1_state_cmp_full : STD_LOGIC;
    signal fifo_out_1_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_1_V_1_vld_in : STD_LOGIC;
    signal fifo_out_1_V_1_vld_out : STD_LOGIC;
    signal fifo_out_1_V_1_ack_in : STD_LOGIC;
    signal fifo_out_1_V_1_ack_out : STD_LOGIC;
    signal fifo_out_1_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_1_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_1_V_1_sel_rd : STD_LOGIC := '0';
    signal fifo_out_1_V_1_sel_wr : STD_LOGIC := '0';
    signal fifo_out_1_V_1_sel : STD_LOGIC;
    signal fifo_out_1_V_1_load_A : STD_LOGIC;
    signal fifo_out_1_V_1_load_B : STD_LOGIC;
    signal fifo_out_1_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal fifo_out_1_V_1_state_cmp_full : STD_LOGIC;
    signal fifo_out_2_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_2_V_1_vld_in : STD_LOGIC;
    signal fifo_out_2_V_1_vld_out : STD_LOGIC;
    signal fifo_out_2_V_1_ack_in : STD_LOGIC;
    signal fifo_out_2_V_1_ack_out : STD_LOGIC;
    signal fifo_out_2_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_2_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_2_V_1_sel_rd : STD_LOGIC := '0';
    signal fifo_out_2_V_1_sel_wr : STD_LOGIC := '0';
    signal fifo_out_2_V_1_sel : STD_LOGIC;
    signal fifo_out_2_V_1_load_A : STD_LOGIC;
    signal fifo_out_2_V_1_load_B : STD_LOGIC;
    signal fifo_out_2_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal fifo_out_2_V_1_state_cmp_full : STD_LOGIC;
    signal fifo_out_3_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_3_V_1_vld_in : STD_LOGIC;
    signal fifo_out_3_V_1_vld_out : STD_LOGIC;
    signal fifo_out_3_V_1_ack_in : STD_LOGIC;
    signal fifo_out_3_V_1_ack_out : STD_LOGIC;
    signal fifo_out_3_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_3_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal fifo_out_3_V_1_sel_rd : STD_LOGIC := '0';
    signal fifo_out_3_V_1_sel_wr : STD_LOGIC := '0';
    signal fifo_out_3_V_1_sel : STD_LOGIC;
    signal fifo_out_3_V_1_load_A : STD_LOGIC;
    signal fifo_out_3_V_1_load_B : STD_LOGIC;
    signal fifo_out_3_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal fifo_out_3_V_1_state_cmp_full : STD_LOGIC;
    signal first : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tail_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal tail_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal tail_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal tail_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal local_words_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal local_words_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal local_words_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal local_words_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal gmem_read_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem_read_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_7_reg_1030 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal tmp_7_reg_1030_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal gmem_read_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_read_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal tmp_8_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal fifo_out_0_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_14_reg_968 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal fifo_out_1_V_TDATA_blk_n : STD_LOGIC;
    signal fifo_out_2_V_TDATA_blk_n : STD_LOGIC;
    signal fifo_out_3_V_TDATA_blk_n : STD_LOGIC;
    signal gmem_read_AWVALID : STD_LOGIC;
    signal gmem_read_AWREADY : STD_LOGIC;
    signal gmem_read_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_read_WVALID : STD_LOGIC;
    signal gmem_read_WREADY : STD_LOGIC;
    signal gmem_read_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_read_ARVALID : STD_LOGIC;
    signal gmem_read_ARREADY : STD_LOGIC;
    signal gmem_read_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_read_RVALID : STD_LOGIC;
    signal gmem_read_RREADY : STD_LOGIC;
    signal gmem_read_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_read_RLAST : STD_LOGIC;
    signal gmem_read_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_read_BVALID : STD_LOGIC;
    signal gmem_read_BREADY : STD_LOGIC;
    signal gmem_read_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_read_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_reg_327 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_reg_337 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_337_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state14_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem_read_ARREADY : STD_LOGIC;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal h_reg_337_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_337_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_337_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_337_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_337_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_337_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_337_pp0_iter8_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_349 : STD_LOGIC_VECTOR (23 downto 0);
    signal h2_reg_360 : STD_LOGIC_VECTOR (14 downto 0);
    signal t_V_reg_371 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_cast_fu_428_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_15_cast_reg_929 : STD_LOGIC_VECTOR (28 downto 0);
    signal first_load_load_fu_432_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_load_reg_936 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_442_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_943 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_453_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_reg_953 : STD_LOGIC_VECTOR (1 downto 0);
    signal stride_1_fu_493_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal stride_1_reg_963 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_14_fu_499_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_fu_503_p5 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_reg_976 : STD_LOGIC_VECTOR (10 downto 0);
    signal idx_cast_fu_515_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal idx_cast_reg_981 : STD_LOGIC_VECTOR (11 downto 0);
    signal input_V2_sum_fu_529_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal input_V2_sum_reg_986 : STD_LOGIC_VECTOR (28 downto 0);
    signal stream_head_V_reg_997 : STD_LOGIC_VECTOR (127 downto 0);
    signal idx_cast3_fu_544_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal idx_cast3_reg_1004 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal stream_tail_1_fu_594_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal words_fu_618_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal words_reg_1014 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bytes_read_fu_662_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bytes_read_reg_1024 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1030_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1030_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1030_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1030_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1030_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1030_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1030_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_677_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_1_reg_1034 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal input_V2_sum4_fu_696_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal input_V2_sum4_reg_1039 : STD_LOGIC_VECTOR (28 downto 0);
    signal stream_tail_1_cast_fu_711_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_tail_1_cast_reg_1044 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_read_addr_1_rea_reg_1055 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_fu_923_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal bound_reg_1060 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond_flatten_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state25_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state26_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state26_io : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state27_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_750_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal t_V_mid2_fu_756_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal t_V_mid2_reg_1074 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_V_mid2_v_fu_770_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_V_mid2_v_reg_1079 : STD_LOGIC_VECTOR (14 downto 0);
    signal word_V_fu_783_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_21_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V2_sum3_fu_833_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal input_V2_sum3_reg_1102 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_sig_ioackin_gmem_read_AWREADY : STD_LOGIC;
    signal i_2_fu_883_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state25 : STD_LOGIC;
    signal data_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal data_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_292 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal first_flag_reg_303 : STD_LOGIC_VECTOR (0 downto 0);
    signal stride_reg_316 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state35 : BOOLEAN;
    signal tmp_4_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_val_assign_phi_fu_330_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_h_phi_fu_341_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_h2_phi_fu_364_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal i1_reg_382 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_first_flag_1_phi_fu_397_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_flag_1_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_new_1_reg_405 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_448_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_V_mid2_fu_778_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V2_sum_cast_fu_534_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V2_sum4_cast_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V2_sum3_cast_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_read_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem_read_AWREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_gmem_read_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_read_WREADY : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_block_state37 : BOOLEAN;
    signal tmp_13_fu_889_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_fu_418_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_9_fu_519_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_cast_fu_525_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sel_tmp_i_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_i_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_i_fu_568_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sel_tmp4_i_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_i_fu_581_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_631_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_15_fu_645_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_648_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_pn_fu_654_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_cast_fu_668_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_cast_fu_683_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_687_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_cast_fu_692_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_16_fu_701_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal stream_tail_fu_705_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_cast_fu_736_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_s_fu_764_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal op2_assign_fu_792_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal op2_assign_fu_792_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_806_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_fu_810_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_17_fu_824_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_cast_fu_829_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal bound_fu_923_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_923_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal bound_fu_923_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal bound_fu_923_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_condition_907 : BOOLEAN;

    component circ_buff_read_many128_mux_42_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component circ_buff_read_many128_mul_mul_8ns_16ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component circ_buff_read_many128_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component circ_buff_read_many128_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        reset : OUT STD_LOGIC_VECTOR (7 downto 0);
        debug_register : OUT STD_LOGIC_VECTOR (63 downto 0);
        useable_words_address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        useable_words_ce0 : IN STD_LOGIC;
        useable_words_q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component circ_buff_read_many128_gmem_read_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    circ_buff_read_many128_control_s_axi_U : component circ_buff_read_many128_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_V => input_V,
        reset => reset,
        debug_register => debug_register,
        useable_words_address0 => useable_words_address0,
        useable_words_ce0 => useable_words_ce0,
        useable_words_q0 => useable_words_q0);

    circ_buff_read_many128_gmem_read_m_axi_U : component circ_buff_read_many128_gmem_read_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_READ_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_READ_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_READ_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_READ_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_READ_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_READ_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_READ_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_READ_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_READ_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_READ_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_READ_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_read_AWVALID,
        AWREADY => m_axi_gmem_read_AWREADY,
        AWADDR => m_axi_gmem_read_AWADDR,
        AWID => m_axi_gmem_read_AWID,
        AWLEN => m_axi_gmem_read_AWLEN,
        AWSIZE => m_axi_gmem_read_AWSIZE,
        AWBURST => m_axi_gmem_read_AWBURST,
        AWLOCK => m_axi_gmem_read_AWLOCK,
        AWCACHE => m_axi_gmem_read_AWCACHE,
        AWPROT => m_axi_gmem_read_AWPROT,
        AWQOS => m_axi_gmem_read_AWQOS,
        AWREGION => m_axi_gmem_read_AWREGION,
        AWUSER => m_axi_gmem_read_AWUSER,
        WVALID => m_axi_gmem_read_WVALID,
        WREADY => m_axi_gmem_read_WREADY,
        WDATA => m_axi_gmem_read_WDATA,
        WSTRB => m_axi_gmem_read_WSTRB,
        WLAST => m_axi_gmem_read_WLAST,
        WID => m_axi_gmem_read_WID,
        WUSER => m_axi_gmem_read_WUSER,
        ARVALID => m_axi_gmem_read_ARVALID,
        ARREADY => m_axi_gmem_read_ARREADY,
        ARADDR => m_axi_gmem_read_ARADDR,
        ARID => m_axi_gmem_read_ARID,
        ARLEN => m_axi_gmem_read_ARLEN,
        ARSIZE => m_axi_gmem_read_ARSIZE,
        ARBURST => m_axi_gmem_read_ARBURST,
        ARLOCK => m_axi_gmem_read_ARLOCK,
        ARCACHE => m_axi_gmem_read_ARCACHE,
        ARPROT => m_axi_gmem_read_ARPROT,
        ARQOS => m_axi_gmem_read_ARQOS,
        ARREGION => m_axi_gmem_read_ARREGION,
        ARUSER => m_axi_gmem_read_ARUSER,
        RVALID => m_axi_gmem_read_RVALID,
        RREADY => m_axi_gmem_read_RREADY,
        RDATA => m_axi_gmem_read_RDATA,
        RLAST => m_axi_gmem_read_RLAST,
        RID => m_axi_gmem_read_RID,
        RUSER => m_axi_gmem_read_RUSER,
        RRESP => m_axi_gmem_read_RRESP,
        BVALID => m_axi_gmem_read_BVALID,
        BREADY => m_axi_gmem_read_BREADY,
        BRESP => m_axi_gmem_read_BRESP,
        BID => m_axi_gmem_read_BID,
        BUSER => m_axi_gmem_read_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_read_ARVALID,
        I_ARREADY => gmem_read_ARREADY,
        I_ARADDR => gmem_read_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_read_RVALID,
        I_RREADY => gmem_read_RREADY,
        I_RDATA => gmem_read_RDATA,
        I_RID => gmem_read_RID,
        I_RUSER => gmem_read_RUSER,
        I_RRESP => gmem_read_RRESP,
        I_RLAST => gmem_read_RLAST,
        I_AWVALID => gmem_read_AWVALID,
        I_AWREADY => gmem_read_AWREADY,
        I_AWADDR => gmem_read_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_read_WVALID,
        I_WREADY => gmem_read_WREADY,
        I_WDATA => gmem_read_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_FFFF,
        I_BVALID => gmem_read_BVALID,
        I_BREADY => gmem_read_BREADY,
        I_BRESP => gmem_read_BRESP,
        I_BID => gmem_read_BID,
        I_BUSER => gmem_read_BUSER);

    data_V_U : component circ_buff_read_many128_data_V
    generic map (
        DataWidth => 128,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => gmem_read_addr_1_rea_reg_1055,
        q0 => data_V_q0);

    circ_buff_read_many128_mux_42_8_1_1_U1 : component circ_buff_read_many128_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => local_words_0,
        din1 => local_words_1,
        din2 => local_words_2,
        din3 => local_words_3,
        din4 => tmp_14_reg_968,
        dout => words_fu_618_p6);

    circ_buff_read_many128_mux_42_8_1_1_U2 : component circ_buff_read_many128_mux_42_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_0,
        din1 => ap_const_lv8_20,
        din2 => ap_const_lv8_40,
        din3 => ap_const_lv8_60,
        din4 => op2_assign_fu_792_p5,
        dout => op2_assign_fu_792_p6);

    circ_buff_read_many128_mul_mul_8ns_16ns_24_1_1_U3 : component circ_buff_read_many128_mul_mul_8ns_16ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => bound_fu_923_p0,
        din1 => bound_fu_923_p1,
        dout => bound_fu_923_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_8_fu_635_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state14);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_8_fu_635_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state25)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state25);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_read_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_read_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1)) or ((ap_sig_ioackin_gmem_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    ap_reg_ioackin_gmem_read_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (gmem_read_ARREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1)) or ((gmem_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
                    ap_reg_ioackin_gmem_read_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_read_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_read_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                    if ((ap_sig_ioackin_gmem_read_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_read_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_read_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_read_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_read_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_read_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    if ((ap_sig_ioackin_gmem_read_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_read_WREADY <= ap_const_logic_0;
                    elsif ((gmem_read_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_read_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    fifo_out_0_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_0_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((fifo_out_0_V_1_ack_out = ap_const_logic_1) and (fifo_out_0_V_1_vld_out = ap_const_logic_1))) then 
                                        fifo_out_0_V_1_sel_rd <= not(fifo_out_0_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    fifo_out_0_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_0_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((fifo_out_0_V_1_ack_in = ap_const_logic_1) and (fifo_out_0_V_1_vld_in = ap_const_logic_1))) then 
                                        fifo_out_0_V_1_sel_wr <= not(fifo_out_0_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    fifo_out_0_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_0_V_1_state <= ap_const_lv2_0;
            else
                if ((((fifo_out_0_V_1_vld_in = ap_const_logic_0) and (fifo_out_0_V_1_state = ap_const_lv2_2)) or ((fifo_out_0_V_1_vld_in = ap_const_logic_0) and (fifo_out_0_V_1_ack_out = ap_const_logic_1) and (fifo_out_0_V_1_state = ap_const_lv2_3)))) then 
                    fifo_out_0_V_1_state <= ap_const_lv2_2;
                elsif ((((fifo_out_0_V_1_ack_out = ap_const_logic_0) and (fifo_out_0_V_1_state = ap_const_lv2_1)) or ((fifo_out_0_V_1_ack_out = ap_const_logic_0) and (fifo_out_0_V_1_vld_in = ap_const_logic_1) and (fifo_out_0_V_1_state = ap_const_lv2_3)))) then 
                    fifo_out_0_V_1_state <= ap_const_lv2_1;
                elsif (((not(((fifo_out_0_V_1_vld_in = ap_const_logic_0) and (fifo_out_0_V_1_ack_out = ap_const_logic_1))) and not(((fifo_out_0_V_1_ack_out = ap_const_logic_0) and (fifo_out_0_V_1_vld_in = ap_const_logic_1))) and (fifo_out_0_V_1_state = ap_const_lv2_3)) or ((fifo_out_0_V_1_ack_out = ap_const_logic_1) and (fifo_out_0_V_1_state = ap_const_lv2_1)) or ((fifo_out_0_V_1_vld_in = ap_const_logic_1) and (fifo_out_0_V_1_state = ap_const_lv2_2)))) then 
                    fifo_out_0_V_1_state <= ap_const_lv2_3;
                else 
                    fifo_out_0_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    fifo_out_1_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_1_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((fifo_out_1_V_1_ack_out = ap_const_logic_1) and (fifo_out_1_V_1_vld_out = ap_const_logic_1))) then 
                                        fifo_out_1_V_1_sel_rd <= not(fifo_out_1_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    fifo_out_1_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_1_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((fifo_out_1_V_1_ack_in = ap_const_logic_1) and (fifo_out_1_V_1_vld_in = ap_const_logic_1))) then 
                                        fifo_out_1_V_1_sel_wr <= not(fifo_out_1_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    fifo_out_1_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_1_V_1_state <= ap_const_lv2_0;
            else
                if ((((fifo_out_1_V_1_vld_in = ap_const_logic_0) and (fifo_out_1_V_1_state = ap_const_lv2_2)) or ((fifo_out_1_V_1_vld_in = ap_const_logic_0) and (fifo_out_1_V_1_ack_out = ap_const_logic_1) and (fifo_out_1_V_1_state = ap_const_lv2_3)))) then 
                    fifo_out_1_V_1_state <= ap_const_lv2_2;
                elsif ((((fifo_out_1_V_1_ack_out = ap_const_logic_0) and (fifo_out_1_V_1_state = ap_const_lv2_1)) or ((fifo_out_1_V_1_ack_out = ap_const_logic_0) and (fifo_out_1_V_1_vld_in = ap_const_logic_1) and (fifo_out_1_V_1_state = ap_const_lv2_3)))) then 
                    fifo_out_1_V_1_state <= ap_const_lv2_1;
                elsif (((not(((fifo_out_1_V_1_vld_in = ap_const_logic_0) and (fifo_out_1_V_1_ack_out = ap_const_logic_1))) and not(((fifo_out_1_V_1_ack_out = ap_const_logic_0) and (fifo_out_1_V_1_vld_in = ap_const_logic_1))) and (fifo_out_1_V_1_state = ap_const_lv2_3)) or ((fifo_out_1_V_1_ack_out = ap_const_logic_1) and (fifo_out_1_V_1_state = ap_const_lv2_1)) or ((fifo_out_1_V_1_vld_in = ap_const_logic_1) and (fifo_out_1_V_1_state = ap_const_lv2_2)))) then 
                    fifo_out_1_V_1_state <= ap_const_lv2_3;
                else 
                    fifo_out_1_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    fifo_out_2_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_2_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((fifo_out_2_V_1_ack_out = ap_const_logic_1) and (fifo_out_2_V_1_vld_out = ap_const_logic_1))) then 
                                        fifo_out_2_V_1_sel_rd <= not(fifo_out_2_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    fifo_out_2_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_2_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((fifo_out_2_V_1_ack_in = ap_const_logic_1) and (fifo_out_2_V_1_vld_in = ap_const_logic_1))) then 
                                        fifo_out_2_V_1_sel_wr <= not(fifo_out_2_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    fifo_out_2_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_2_V_1_state <= ap_const_lv2_0;
            else
                if ((((fifo_out_2_V_1_vld_in = ap_const_logic_0) and (fifo_out_2_V_1_state = ap_const_lv2_2)) or ((fifo_out_2_V_1_vld_in = ap_const_logic_0) and (fifo_out_2_V_1_ack_out = ap_const_logic_1) and (fifo_out_2_V_1_state = ap_const_lv2_3)))) then 
                    fifo_out_2_V_1_state <= ap_const_lv2_2;
                elsif ((((fifo_out_2_V_1_ack_out = ap_const_logic_0) and (fifo_out_2_V_1_state = ap_const_lv2_1)) or ((fifo_out_2_V_1_ack_out = ap_const_logic_0) and (fifo_out_2_V_1_vld_in = ap_const_logic_1) and (fifo_out_2_V_1_state = ap_const_lv2_3)))) then 
                    fifo_out_2_V_1_state <= ap_const_lv2_1;
                elsif (((not(((fifo_out_2_V_1_vld_in = ap_const_logic_0) and (fifo_out_2_V_1_ack_out = ap_const_logic_1))) and not(((fifo_out_2_V_1_ack_out = ap_const_logic_0) and (fifo_out_2_V_1_vld_in = ap_const_logic_1))) and (fifo_out_2_V_1_state = ap_const_lv2_3)) or ((fifo_out_2_V_1_ack_out = ap_const_logic_1) and (fifo_out_2_V_1_state = ap_const_lv2_1)) or ((fifo_out_2_V_1_vld_in = ap_const_logic_1) and (fifo_out_2_V_1_state = ap_const_lv2_2)))) then 
                    fifo_out_2_V_1_state <= ap_const_lv2_3;
                else 
                    fifo_out_2_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    fifo_out_3_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_3_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((fifo_out_3_V_1_ack_out = ap_const_logic_1) and (fifo_out_3_V_1_vld_out = ap_const_logic_1))) then 
                                        fifo_out_3_V_1_sel_rd <= not(fifo_out_3_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    fifo_out_3_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_3_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((fifo_out_3_V_1_ack_in = ap_const_logic_1) and (fifo_out_3_V_1_vld_in = ap_const_logic_1))) then 
                                        fifo_out_3_V_1_sel_wr <= not(fifo_out_3_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    fifo_out_3_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fifo_out_3_V_1_state <= ap_const_lv2_0;
            else
                if ((((fifo_out_3_V_1_vld_in = ap_const_logic_0) and (fifo_out_3_V_1_state = ap_const_lv2_2)) or ((fifo_out_3_V_1_vld_in = ap_const_logic_0) and (fifo_out_3_V_1_ack_out = ap_const_logic_1) and (fifo_out_3_V_1_state = ap_const_lv2_3)))) then 
                    fifo_out_3_V_1_state <= ap_const_lv2_2;
                elsif ((((fifo_out_3_V_1_ack_out = ap_const_logic_0) and (fifo_out_3_V_1_state = ap_const_lv2_1)) or ((fifo_out_3_V_1_ack_out = ap_const_logic_0) and (fifo_out_3_V_1_vld_in = ap_const_logic_1) and (fifo_out_3_V_1_state = ap_const_lv2_3)))) then 
                    fifo_out_3_V_1_state <= ap_const_lv2_1;
                elsif (((not(((fifo_out_3_V_1_vld_in = ap_const_logic_0) and (fifo_out_3_V_1_ack_out = ap_const_logic_1))) and not(((fifo_out_3_V_1_ack_out = ap_const_logic_0) and (fifo_out_3_V_1_vld_in = ap_const_logic_1))) and (fifo_out_3_V_1_state = ap_const_lv2_3)) or ((fifo_out_3_V_1_ack_out = ap_const_logic_1) and (fifo_out_3_V_1_state = ap_const_lv2_1)) or ((fifo_out_3_V_1_vld_in = ap_const_logic_1) and (fifo_out_3_V_1_state = ap_const_lv2_2)))) then 
                    fifo_out_3_V_1_state <= ap_const_lv2_3;
                else 
                    fifo_out_3_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    first_flag_1_reg_393_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond_fu_877_p2 = ap_const_lv1_1))) then 
                first_flag_1_reg_393 <= ap_const_lv1_1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_487_p2 = ap_const_lv1_1))) then 
                first_flag_1_reg_393 <= first_flag_reg_303;
            end if; 
        end if;
    end process;

    first_flag_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_436_p2 = ap_const_lv1_1) and (first_load_reg_936 = ap_const_lv1_0))) then 
                first_flag_reg_303 <= ap_const_lv1_1;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (first_load_load_fu_432_p1 = ap_const_lv1_1))) then 
                first_flag_reg_303 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    first_new_1_reg_405_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond_fu_877_p2 = ap_const_lv1_1))) then 
                first_new_1_reg_405 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_487_p2 = ap_const_lv1_1))) then 
                first_new_1_reg_405 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    h2_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_1065 = ap_const_lv1_0))) then 
                h2_reg_360 <= temp_V_mid2_v_reg_1079;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                h2_reg_360 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    h_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1))) then 
                h_reg_337 <= h_1_reg_1034;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_8_fu_635_p2 = ap_const_lv1_0))) then 
                h_reg_337 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    i1_reg_382_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_4_fu_457_p2 = ap_const_lv1_1) and (first_load_reg_936 = ap_const_lv1_1)) or ((tmp_4_fu_457_p2 = ap_const_lv1_1) and (tmp_1_fu_436_p2 = ap_const_lv1_1))))) then 
                i1_reg_382 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond_fu_877_p2 = ap_const_lv1_0))) then 
                i1_reg_382 <= i_2_fu_883_p2;
            end if; 
        end if;
    end process;

    i_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (first_load_load_fu_432_p1 = ap_const_lv1_0))) then 
                i_reg_292 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_292 <= i_1_reg_943;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_349_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_745_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_349 <= indvar_flatten_next_fu_750_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                indvar_flatten_reg_349 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    stride_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((first_load_reg_936 = ap_const_lv1_1) and (tmp_4_fu_457_p2 = ap_const_lv1_0)) or ((tmp_1_fu_436_p2 = ap_const_lv1_1) and (tmp_4_fu_457_p2 = ap_const_lv1_0))))) then 
                stride_reg_316 <= ap_const_lv3_0;
            elsif ((not(((gmem_read_BVALID = ap_const_logic_0) and (tmp_8_reg_1020 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                stride_reg_316 <= stride_1_reg_963;
            end if; 
        end if;
    end process;

    t_V_reg_371_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_745_p2 = ap_const_lv1_0))) then 
                t_V_reg_371 <= word_V_fu_783_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                t_V_reg_371 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    tail_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_13_fu_889_p1 = ap_const_lv2_0) and (exitcond_fu_877_p2 = ap_const_lv1_0))) then 
                tail_0 <= ap_const_lv16_0;
            elsif ((not(((gmem_read_BVALID = ap_const_logic_0) and (tmp_8_reg_1020 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_14_reg_968 = ap_const_lv2_0) and (tmp_8_reg_1020 = ap_const_lv1_0))) then 
                tail_0 <= val_assign_reg_327;
            end if; 
        end if;
    end process;

    tail_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_13_fu_889_p1 = ap_const_lv2_1) and (exitcond_fu_877_p2 = ap_const_lv1_0))) then 
                tail_1 <= ap_const_lv16_0;
            elsif ((not(((gmem_read_BVALID = ap_const_logic_0) and (tmp_8_reg_1020 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_14_reg_968 = ap_const_lv2_1) and (tmp_8_reg_1020 = ap_const_lv1_0))) then 
                tail_1 <= val_assign_reg_327;
            end if; 
        end if;
    end process;

    tail_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_13_fu_889_p1 = ap_const_lv2_2) and (exitcond_fu_877_p2 = ap_const_lv1_0))) then 
                tail_2 <= ap_const_lv16_0;
            elsif ((not(((gmem_read_BVALID = ap_const_logic_0) and (tmp_8_reg_1020 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_14_reg_968 = ap_const_lv2_2) and (tmp_8_reg_1020 = ap_const_lv1_0))) then 
                tail_2 <= val_assign_reg_327;
            end if; 
        end if;
    end process;

    tail_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) and (tmp_13_fu_889_p1 = ap_const_lv2_3) and (exitcond_fu_877_p2 = ap_const_lv1_0))) then 
                tail_3 <= ap_const_lv16_0;
            elsif ((not(((gmem_read_BVALID = ap_const_logic_0) and (tmp_8_reg_1020 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_14_reg_968 = ap_const_lv2_3) and (tmp_8_reg_1020 = ap_const_lv1_0))) then 
                tail_3 <= val_assign_reg_327;
            end if; 
        end if;
    end process;

    val_assign_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1))) then 
                val_assign_reg_327 <= stream_tail_1_cast_reg_1044;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_8_fu_635_p2 = ap_const_lv1_0))) then 
                val_assign_reg_327 <= stream_tail_1_fu_594_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                bound_reg_1060 <= bound_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_8_fu_635_p2 = ap_const_lv1_0))) then
                bytes_read_reg_1024 <= bytes_read_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten_reg_1065 <= exitcond_flatten_fu_745_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_out_0_V_1_load_A = ap_const_logic_1)) then
                fifo_out_0_V_1_payload_A <= tmp_21_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_out_0_V_1_load_B = ap_const_logic_1)) then
                fifo_out_0_V_1_payload_B <= tmp_21_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_out_1_V_1_load_A = ap_const_logic_1)) then
                fifo_out_1_V_1_payload_A <= tmp_21_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_out_1_V_1_load_B = ap_const_logic_1)) then
                fifo_out_1_V_1_payload_B <= tmp_21_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_out_2_V_1_load_A = ap_const_logic_1)) then
                fifo_out_2_V_1_payload_A <= tmp_21_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_out_2_V_1_load_B = ap_const_logic_1)) then
                fifo_out_2_V_1_payload_B <= tmp_21_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_out_3_V_1_load_A = ap_const_logic_1)) then
                fifo_out_3_V_1_payload_A <= tmp_21_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fifo_out_3_V_1_load_B = ap_const_logic_1)) then
                fifo_out_3_V_1_payload_B <= tmp_21_fu_816_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((fifo_out_3_V_1_ack_in = ap_const_logic_0) or (fifo_out_2_V_1_ack_in = ap_const_logic_0) or (fifo_out_1_V_1_ack_in = ap_const_logic_0) or (fifo_out_0_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state37) and (ap_phi_mux_first_flag_1_phi_fu_397_p4 = ap_const_lv1_1))) then
                first <= first_new_1_reg_405;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                first_load_reg_936 <= first;
                    tmp_15_cast_reg_929(27 downto 0) <= tmp_15_cast_fu_428_p1(27 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_7_reg_1030_pp0_iter7_reg = ap_const_lv1_1))) then
                gmem_read_addr_1_rea_reg_1055 <= gmem_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                h_1_reg_1034 <= h_1_fu_677_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                h_reg_337_pp0_iter1_reg <= h_reg_337;
                tmp_7_reg_1030 <= tmp_7_fu_672_p2;
                tmp_7_reg_1030_pp0_iter1_reg <= tmp_7_reg_1030;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                h_reg_337_pp0_iter2_reg <= h_reg_337_pp0_iter1_reg;
                h_reg_337_pp0_iter3_reg <= h_reg_337_pp0_iter2_reg;
                h_reg_337_pp0_iter4_reg <= h_reg_337_pp0_iter3_reg;
                h_reg_337_pp0_iter5_reg <= h_reg_337_pp0_iter4_reg;
                h_reg_337_pp0_iter6_reg <= h_reg_337_pp0_iter5_reg;
                h_reg_337_pp0_iter7_reg <= h_reg_337_pp0_iter6_reg;
                h_reg_337_pp0_iter8_reg <= h_reg_337_pp0_iter7_reg;
                tmp_7_reg_1030_pp0_iter2_reg <= tmp_7_reg_1030_pp0_iter1_reg;
                tmp_7_reg_1030_pp0_iter3_reg <= tmp_7_reg_1030_pp0_iter2_reg;
                tmp_7_reg_1030_pp0_iter4_reg <= tmp_7_reg_1030_pp0_iter3_reg;
                tmp_7_reg_1030_pp0_iter5_reg <= tmp_7_reg_1030_pp0_iter4_reg;
                tmp_7_reg_1030_pp0_iter6_reg <= tmp_7_reg_1030_pp0_iter5_reg;
                tmp_7_reg_1030_pp0_iter7_reg <= tmp_7_reg_1030_pp0_iter6_reg;
                tmp_7_reg_1030_pp0_iter8_reg <= tmp_7_reg_1030_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (first_load_reg_936 = ap_const_lv1_0))) then
                i_1_reg_943 <= i_1_fu_442_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    idx_cast3_reg_1004(2 downto 1) <= idx_cast3_fu_544_p1(2 downto 1);    idx_cast3_reg_1004(10 downto 9) <= idx_cast3_fu_544_p1(10 downto 9);
                tmp_8_reg_1020 <= tmp_8_fu_635_p2;
                words_reg_1014 <= words_fu_618_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_487_p2 = ap_const_lv1_0))) then
                    idx_cast_reg_981(2 downto 1) <= idx_cast_fu_515_p1(2 downto 1);    idx_cast_reg_981(10 downto 9) <= idx_cast_fu_515_p1(10 downto 9);
                    idx_reg_976(2 downto 1) <= idx_fu_503_p5(2 downto 1);    idx_reg_976(10 downto 9) <= idx_fu_503_p5(10 downto 9);
                input_V2_sum_reg_986 <= input_V2_sum_fu_529_p2;
                tmp_14_reg_968 <= tmp_14_fu_499_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                input_V2_sum3_reg_1102 <= input_V2_sum3_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_fu_672_p2 = ap_const_lv1_1))) then
                input_V2_sum4_reg_1039 <= input_V2_sum4_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_reg_953 = ap_const_lv2_0))) then
                local_words_0 <= useable_words_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_reg_953 = ap_const_lv2_1))) then
                local_words_1 <= useable_words_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_reg_953 = ap_const_lv2_2))) then
                local_words_2 <= useable_words_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_5_reg_953 = ap_const_lv2_3))) then
                local_words_3 <= useable_words_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_read_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                stream_head_V_reg_997 <= gmem_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_fu_672_p2 = ap_const_lv1_1))) then
                    stream_tail_1_cast_reg_1044(8 downto 0) <= stream_tail_1_cast_fu_711_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                stride_1_reg_963 <= stride_1_fu_493_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_745_p2 = ap_const_lv1_0))) then
                t_V_mid2_reg_1074 <= t_V_mid2_fu_756_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_745_p2 = ap_const_lv1_0))) then
                temp_V_mid2_v_reg_1079 <= temp_V_mid2_v_fu_770_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_1_fu_436_p2 = ap_const_lv1_0) and (first_load_reg_936 = ap_const_lv1_0))) then
                tmp_5_reg_953 <= tmp_5_fu_453_p1;
            end if;
        end if;
    end process;
    tmp_15_cast_reg_929(28) <= '0';
    idx_reg_976(0) <= '0';
    idx_reg_976(8 downto 3) <= "000000";
    idx_cast_reg_981(0) <= '0';
    idx_cast_reg_981(8 downto 3) <= "000000";
    idx_cast_reg_981(11) <= '0';
    idx_cast3_reg_1004(0) <= '0';
    idx_cast3_reg_1004(8 downto 3) <= "000000";
    idx_cast3_reg_1004(16 downto 11) <= "000000";
    stream_tail_1_cast_reg_1044(15 downto 9) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fifo_out_0_V_1_ack_in, fifo_out_0_V_1_state, fifo_out_1_V_1_ack_in, fifo_out_1_V_1_state, fifo_out_2_V_1_ack_in, fifo_out_2_V_1_state, fifo_out_3_V_1_ack_in, fifo_out_3_V_1_state, ap_CS_fsm_state5, ap_CS_fsm_state12, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state35, tmp_8_reg_1020, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, gmem_read_RVALID, gmem_read_BVALID, ap_sig_ioackin_gmem_read_ARREADY, first_load_reg_936, ap_CS_fsm_state2, tmp_1_fu_436_p2, ap_CS_fsm_state4, exitcond1_fu_487_p2, ap_CS_fsm_state13, tmp_8_fu_635_p2, tmp_7_fu_672_p2, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_745_p2, ap_enable_reg_pp1_iter0, ap_sig_ioackin_gmem_read_AWREADY, ap_CS_fsm_state36, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9, ap_block_pp1_stage0_subdone, tmp_4_fu_457_p2, exitcond_fu_877_p2, ap_sig_ioackin_gmem_read_WREADY, ap_CS_fsm_state37)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (((tmp_4_fu_457_p2 = ap_const_lv1_1) and (first_load_reg_936 = ap_const_lv1_1)) or ((tmp_4_fu_457_p2 = ap_const_lv1_1) and (tmp_1_fu_436_p2 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (((first_load_reg_936 = ap_const_lv1_1) and (tmp_4_fu_457_p2 = ap_const_lv1_0)) or ((tmp_1_fu_436_p2 = ap_const_lv1_1) and (tmp_4_fu_457_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond1_fu_487_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_sig_ioackin_gmem_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((gmem_read_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_8_fu_635_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_7_fu_672_p2 = ap_const_lv1_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (tmp_7_fu_672_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_745_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_745_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_sig_ioackin_gmem_read_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_sig_ioackin_gmem_read_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if ((not(((gmem_read_BVALID = ap_const_logic_0) and (tmp_8_reg_1020 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state36) and (exitcond_fu_877_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                if ((not(((fifo_out_3_V_1_ack_in = ap_const_logic_0) or (fifo_out_2_V_1_ack_in = ap_const_logic_0) or (fifo_out_1_V_1_ack_in = ap_const_logic_0) or (fifo_out_0_V_1_ack_in = ap_const_logic_0))) and (fifo_out_3_V_1_state(0) = ap_const_logic_0) and (fifo_out_2_V_1_state(0) = ap_const_logic_0) and (fifo_out_1_V_1_state(0) = ap_const_logic_0) and (fifo_out_0_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(15);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(14);
    ap_CS_fsm_state28 <= ap_CS_fsm(16);
    ap_CS_fsm_state29 <= ap_CS_fsm(17);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(18);
    ap_CS_fsm_state35 <= ap_CS_fsm(23);
    ap_CS_fsm_state36 <= ap_CS_fsm(24);
    ap_CS_fsm_state37 <= ap_CS_fsm(25);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, tmp_7_reg_1030_pp0_iter7_reg, gmem_read_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((gmem_read_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_7_reg_1030_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, tmp_7_reg_1030_pp0_iter7_reg, gmem_read_RVALID, ap_block_state15_io)
    begin
                ap_block_pp0_stage0_11001 <= (((gmem_read_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_7_reg_1030_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, tmp_7_reg_1030_pp0_iter7_reg, gmem_read_RVALID, ap_block_state15_io)
    begin
                ap_block_pp0_stage0_subdone <= (((gmem_read_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_7_reg_1030_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state26_io, ap_block_state27_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state26_io, ap_block_state27_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state27_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state26_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state14_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(tmp_7_reg_1030, ap_sig_ioackin_gmem_read_ARREADY)
    begin
                ap_block_state15_io <= ((ap_sig_ioackin_gmem_read_ARREADY = ap_const_logic_0) and (tmp_7_reg_1030 = ap_const_lv1_1));
    end process;

        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp0_stage0_iter8_assign_proc : process(tmp_7_reg_1030_pp0_iter7_reg, gmem_read_RVALID)
    begin
                ap_block_state22_pp0_stage0_iter8 <= ((gmem_read_RVALID = ap_const_logic_0) and (tmp_7_reg_1030_pp0_iter7_reg = ap_const_lv1_1));
    end process;

        ap_block_state23_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_io_assign_proc : process(fifo_out_0_V_1_ack_in, fifo_out_1_V_1_ack_in, fifo_out_2_V_1_ack_in, fifo_out_3_V_1_ack_in, tmp_14_reg_968)
    begin
                ap_block_state26_io <= (((fifo_out_3_V_1_ack_in = ap_const_logic_0) and (tmp_14_reg_968 = ap_const_lv2_3)) or ((fifo_out_2_V_1_ack_in = ap_const_logic_0) and (tmp_14_reg_968 = ap_const_lv2_2)) or ((fifo_out_1_V_1_ack_in = ap_const_logic_0) and (tmp_14_reg_968 = ap_const_lv2_1)) or ((fifo_out_0_V_1_ack_in = ap_const_logic_0) and (tmp_14_reg_968 = ap_const_lv2_0)));
    end process;

        ap_block_state26_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state27_io_assign_proc : process(fifo_out_0_V_1_ack_in, fifo_out_1_V_1_ack_in, fifo_out_2_V_1_ack_in, fifo_out_3_V_1_ack_in, tmp_14_reg_968)
    begin
                ap_block_state27_io <= (((fifo_out_3_V_1_ack_in = ap_const_logic_0) and (tmp_14_reg_968 = ap_const_lv2_3)) or ((fifo_out_2_V_1_ack_in = ap_const_logic_0) and (tmp_14_reg_968 = ap_const_lv2_2)) or ((fifo_out_1_V_1_ack_in = ap_const_logic_0) and (tmp_14_reg_968 = ap_const_lv2_1)) or ((fifo_out_0_V_1_ack_in = ap_const_logic_0) and (tmp_14_reg_968 = ap_const_lv2_0)));
    end process;

        ap_block_state27_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_assign_proc : process(tmp_8_reg_1020, gmem_read_BVALID)
    begin
                ap_block_state35 <= ((gmem_read_BVALID = ap_const_logic_0) and (tmp_8_reg_1020 = ap_const_lv1_0));
    end process;


    ap_block_state37_assign_proc : process(fifo_out_0_V_1_ack_in, fifo_out_1_V_1_ack_in, fifo_out_2_V_1_ack_in, fifo_out_3_V_1_ack_in)
    begin
                ap_block_state37 <= ((fifo_out_3_V_1_ack_in = ap_const_logic_0) or (fifo_out_2_V_1_ack_in = ap_const_logic_0) or (fifo_out_1_V_1_ack_in = ap_const_logic_0) or (fifo_out_0_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_907_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_reg_1030, ap_block_pp0_stage0_01001)
    begin
                ap_condition_907 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state14_assign_proc : process(tmp_7_fu_672_p2)
    begin
        if ((tmp_7_fu_672_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state25_assign_proc : process(exitcond_flatten_fu_745_p2)
    begin
        if ((exitcond_flatten_fu_745_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(fifo_out_0_V_1_ack_in, fifo_out_0_V_1_state, fifo_out_1_V_1_ack_in, fifo_out_1_V_1_state, fifo_out_2_V_1_ack_in, fifo_out_2_V_1_state, fifo_out_3_V_1_ack_in, fifo_out_3_V_1_state, ap_CS_fsm_state37)
    begin
        if ((not(((fifo_out_3_V_1_ack_in = ap_const_logic_0) or (fifo_out_2_V_1_ack_in = ap_const_logic_0) or (fifo_out_1_V_1_ack_in = ap_const_logic_0) or (fifo_out_0_V_1_ack_in = ap_const_logic_0))) and (fifo_out_3_V_1_state(0) = ap_const_logic_0) and (fifo_out_2_V_1_state(0) = ap_const_logic_0) and (fifo_out_1_V_1_state(0) = ap_const_logic_0) and (fifo_out_0_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_first_flag_1_phi_fu_397_p4 <= first_flag_1_reg_393;

    ap_phi_mux_h2_phi_fu_364_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, h2_reg_360, exitcond_flatten_reg_1065, temp_V_mid2_v_reg_1079)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_1065 = ap_const_lv1_0))) then 
            ap_phi_mux_h2_phi_fu_364_p4 <= temp_V_mid2_v_reg_1079;
        else 
            ap_phi_mux_h2_phi_fu_364_p4 <= h2_reg_360;
        end if; 
    end process;


    ap_phi_mux_h_phi_fu_341_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_7_reg_1030, h_reg_337, h_1_reg_1034)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1))) then 
            ap_phi_mux_h_phi_fu_341_p4 <= h_1_reg_1034;
        else 
            ap_phi_mux_h_phi_fu_341_p4 <= h_reg_337;
        end if; 
    end process;


    ap_phi_mux_val_assign_phi_fu_330_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_7_reg_1030, val_assign_reg_327, stream_tail_1_cast_reg_1044)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1))) then 
            ap_phi_mux_val_assign_phi_fu_330_p4 <= stream_tail_1_cast_reg_1044;
        else 
            ap_phi_mux_val_assign_phi_fu_330_p4 <= val_assign_reg_327;
        end if; 
    end process;


    ap_ready_assign_proc : process(fifo_out_0_V_1_ack_in, fifo_out_0_V_1_state, fifo_out_1_V_1_ack_in, fifo_out_1_V_1_state, fifo_out_2_V_1_ack_in, fifo_out_2_V_1_state, fifo_out_3_V_1_ack_in, fifo_out_3_V_1_state, ap_CS_fsm_state37)
    begin
        if ((not(((fifo_out_3_V_1_ack_in = ap_const_logic_0) or (fifo_out_2_V_1_ack_in = ap_const_logic_0) or (fifo_out_1_V_1_ack_in = ap_const_logic_0) or (fifo_out_0_V_1_ack_in = ap_const_logic_0))) and (fifo_out_3_V_1_state(0) = ap_const_logic_0) and (fifo_out_2_V_1_state(0) = ap_const_logic_0) and (fifo_out_1_V_1_state(0) = ap_const_logic_0) and (fifo_out_0_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_read_ARREADY_assign_proc : process(gmem_read_ARREADY, ap_reg_ioackin_gmem_read_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_read_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_read_ARREADY <= gmem_read_ARREADY;
        else 
            ap_sig_ioackin_gmem_read_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_read_AWREADY_assign_proc : process(gmem_read_AWREADY, ap_reg_ioackin_gmem_read_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_read_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_read_AWREADY <= gmem_read_AWREADY;
        else 
            ap_sig_ioackin_gmem_read_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_read_WREADY_assign_proc : process(gmem_read_WREADY, ap_reg_ioackin_gmem_read_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_read_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_read_WREADY <= gmem_read_WREADY;
        else 
            ap_sig_ioackin_gmem_read_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bound_fu_923_p0 <= bound_fu_923_p00(8 - 1 downto 0);
    bound_fu_923_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(words_reg_1014),24));
    bound_fu_923_p1 <= bound_fu_923_p10(16 - 1 downto 0);
    bound_fu_923_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bytes_read_reg_1024),24));
    bytes_read_fu_662_p2 <= std_logic_vector(unsigned(p_pn_fu_654_p3) - unsigned(stream_tail_1_fu_594_p3));

    data_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter9, tmp_10_fu_725_p1, temp_V_mid2_fu_778_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            data_V_address0 <= temp_V_mid2_fu_778_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            data_V_address0 <= tmp_10_fu_725_p1(9 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_7_reg_1030_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_7_reg_1030_pp0_iter8_reg = ap_const_lv1_1))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_487_p2 <= "1" when (stride_reg_316 = ap_const_lv3_4) else "0";
    exitcond_flatten_fu_745_p2 <= "1" when (indvar_flatten_reg_349 = bound_reg_1060) else "0";
    exitcond_fu_877_p2 <= "1" when (i1_reg_382 = ap_const_lv3_4) else "0";
    fifo_out_0_V_1_ack_in <= fifo_out_0_V_1_state(1);
    fifo_out_0_V_1_ack_out <= fifo_out_0_V_TREADY;

    fifo_out_0_V_1_data_out_assign_proc : process(fifo_out_0_V_1_payload_A, fifo_out_0_V_1_payload_B, fifo_out_0_V_1_sel)
    begin
        if ((fifo_out_0_V_1_sel = ap_const_logic_1)) then 
            fifo_out_0_V_1_data_out <= fifo_out_0_V_1_payload_B;
        else 
            fifo_out_0_V_1_data_out <= fifo_out_0_V_1_payload_A;
        end if; 
    end process;

    fifo_out_0_V_1_load_A <= (fifo_out_0_V_1_state_cmp_full and not(fifo_out_0_V_1_sel_wr));
    fifo_out_0_V_1_load_B <= (fifo_out_0_V_1_state_cmp_full and fifo_out_0_V_1_sel_wr);
    fifo_out_0_V_1_sel <= fifo_out_0_V_1_sel_rd;
    fifo_out_0_V_1_state_cmp_full <= '0' when (fifo_out_0_V_1_state = ap_const_lv2_1) else '1';

    fifo_out_0_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_14_reg_968, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_14_reg_968 = ap_const_lv2_0))) then 
            fifo_out_0_V_1_vld_in <= ap_const_logic_1;
        else 
            fifo_out_0_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    fifo_out_0_V_1_vld_out <= fifo_out_0_V_1_state(0);
    fifo_out_0_V_TDATA <= fifo_out_0_V_1_data_out;

    fifo_out_0_V_TDATA_blk_n_assign_proc : process(fifo_out_0_V_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_14_reg_968, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_14_reg_968 = ap_const_lv2_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_14_reg_968 = ap_const_lv2_0)))) then 
            fifo_out_0_V_TDATA_blk_n <= fifo_out_0_V_1_state(1);
        else 
            fifo_out_0_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_out_0_V_TVALID <= fifo_out_0_V_1_state(0);
    fifo_out_1_V_1_ack_in <= fifo_out_1_V_1_state(1);
    fifo_out_1_V_1_ack_out <= fifo_out_1_V_TREADY;

    fifo_out_1_V_1_data_out_assign_proc : process(fifo_out_1_V_1_payload_A, fifo_out_1_V_1_payload_B, fifo_out_1_V_1_sel)
    begin
        if ((fifo_out_1_V_1_sel = ap_const_logic_1)) then 
            fifo_out_1_V_1_data_out <= fifo_out_1_V_1_payload_B;
        else 
            fifo_out_1_V_1_data_out <= fifo_out_1_V_1_payload_A;
        end if; 
    end process;

    fifo_out_1_V_1_load_A <= (fifo_out_1_V_1_state_cmp_full and not(fifo_out_1_V_1_sel_wr));
    fifo_out_1_V_1_load_B <= (fifo_out_1_V_1_state_cmp_full and fifo_out_1_V_1_sel_wr);
    fifo_out_1_V_1_sel <= fifo_out_1_V_1_sel_rd;
    fifo_out_1_V_1_state_cmp_full <= '0' when (fifo_out_1_V_1_state = ap_const_lv2_1) else '1';

    fifo_out_1_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_14_reg_968, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_14_reg_968 = ap_const_lv2_1))) then 
            fifo_out_1_V_1_vld_in <= ap_const_logic_1;
        else 
            fifo_out_1_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    fifo_out_1_V_1_vld_out <= fifo_out_1_V_1_state(0);
    fifo_out_1_V_TDATA <= fifo_out_1_V_1_data_out;

    fifo_out_1_V_TDATA_blk_n_assign_proc : process(fifo_out_1_V_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_14_reg_968, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_14_reg_968 = ap_const_lv2_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_14_reg_968 = ap_const_lv2_1)))) then 
            fifo_out_1_V_TDATA_blk_n <= fifo_out_1_V_1_state(1);
        else 
            fifo_out_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_out_1_V_TVALID <= fifo_out_1_V_1_state(0);
    fifo_out_2_V_1_ack_in <= fifo_out_2_V_1_state(1);
    fifo_out_2_V_1_ack_out <= fifo_out_2_V_TREADY;

    fifo_out_2_V_1_data_out_assign_proc : process(fifo_out_2_V_1_payload_A, fifo_out_2_V_1_payload_B, fifo_out_2_V_1_sel)
    begin
        if ((fifo_out_2_V_1_sel = ap_const_logic_1)) then 
            fifo_out_2_V_1_data_out <= fifo_out_2_V_1_payload_B;
        else 
            fifo_out_2_V_1_data_out <= fifo_out_2_V_1_payload_A;
        end if; 
    end process;

    fifo_out_2_V_1_load_A <= (fifo_out_2_V_1_state_cmp_full and not(fifo_out_2_V_1_sel_wr));
    fifo_out_2_V_1_load_B <= (fifo_out_2_V_1_state_cmp_full and fifo_out_2_V_1_sel_wr);
    fifo_out_2_V_1_sel <= fifo_out_2_V_1_sel_rd;
    fifo_out_2_V_1_state_cmp_full <= '0' when (fifo_out_2_V_1_state = ap_const_lv2_1) else '1';

    fifo_out_2_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_14_reg_968, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_14_reg_968 = ap_const_lv2_2))) then 
            fifo_out_2_V_1_vld_in <= ap_const_logic_1;
        else 
            fifo_out_2_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    fifo_out_2_V_1_vld_out <= fifo_out_2_V_1_state(0);
    fifo_out_2_V_TDATA <= fifo_out_2_V_1_data_out;

    fifo_out_2_V_TDATA_blk_n_assign_proc : process(fifo_out_2_V_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_14_reg_968, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_14_reg_968 = ap_const_lv2_2)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_14_reg_968 = ap_const_lv2_2)))) then 
            fifo_out_2_V_TDATA_blk_n <= fifo_out_2_V_1_state(1);
        else 
            fifo_out_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_out_2_V_TVALID <= fifo_out_2_V_1_state(0);
    fifo_out_3_V_1_ack_in <= fifo_out_3_V_1_state(1);
    fifo_out_3_V_1_ack_out <= fifo_out_3_V_TREADY;

    fifo_out_3_V_1_data_out_assign_proc : process(fifo_out_3_V_1_payload_A, fifo_out_3_V_1_payload_B, fifo_out_3_V_1_sel)
    begin
        if ((fifo_out_3_V_1_sel = ap_const_logic_1)) then 
            fifo_out_3_V_1_data_out <= fifo_out_3_V_1_payload_B;
        else 
            fifo_out_3_V_1_data_out <= fifo_out_3_V_1_payload_A;
        end if; 
    end process;

    fifo_out_3_V_1_load_A <= (fifo_out_3_V_1_state_cmp_full and not(fifo_out_3_V_1_sel_wr));
    fifo_out_3_V_1_load_B <= (fifo_out_3_V_1_state_cmp_full and fifo_out_3_V_1_sel_wr);
    fifo_out_3_V_1_sel <= fifo_out_3_V_1_sel_rd;
    fifo_out_3_V_1_state_cmp_full <= '0' when (fifo_out_3_V_1_state = ap_const_lv2_1) else '1';

    fifo_out_3_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, tmp_14_reg_968, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_14_reg_968 = ap_const_lv2_3))) then 
            fifo_out_3_V_1_vld_in <= ap_const_logic_1;
        else 
            fifo_out_3_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    fifo_out_3_V_1_vld_out <= fifo_out_3_V_1_state(0);
    fifo_out_3_V_TDATA <= fifo_out_3_V_1_data_out;

    fifo_out_3_V_TDATA_blk_n_assign_proc : process(fifo_out_3_V_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, tmp_14_reg_968, ap_enable_reg_pp1_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (tmp_14_reg_968 = ap_const_lv2_3)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_14_reg_968 = ap_const_lv2_3)))) then 
            fifo_out_3_V_TDATA_blk_n <= fifo_out_3_V_1_state(1);
        else 
            fifo_out_3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fifo_out_3_V_TVALID <= fifo_out_3_V_1_state(0);
    first_load_load_fu_432_p1 <= first;

    gmem_read_ARADDR_assign_proc : process(ap_CS_fsm_state5, input_V2_sum_cast_fu_534_p1, input_V2_sum4_cast_fu_715_p1, ap_reg_ioackin_gmem_read_ARREADY, ap_condition_907)
    begin
        if ((ap_reg_ioackin_gmem_read_ARREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_907)) then 
                gmem_read_ARADDR <= input_V2_sum4_cast_fu_715_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                gmem_read_ARADDR <= input_V2_sum_cast_fu_534_p1(32 - 1 downto 0);
            else 
                gmem_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_read_ARVALID_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_7_reg_1030, ap_reg_ioackin_gmem_read_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_gmem_read_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1)) or ((ap_reg_ioackin_gmem_read_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            gmem_read_ARVALID <= ap_const_logic_1;
        else 
            gmem_read_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_read_AWADDR <= input_V2_sum3_cast_fu_838_p1(32 - 1 downto 0);

    gmem_read_AWVALID_assign_proc : process(ap_CS_fsm_state29, ap_reg_ioackin_gmem_read_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_read_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            gmem_read_AWVALID <= ap_const_logic_1;
        else 
            gmem_read_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_read_BREADY_assign_proc : process(ap_CS_fsm_state35, tmp_8_reg_1020, gmem_read_BVALID)
    begin
        if ((not(((gmem_read_BVALID = ap_const_logic_0) and (tmp_8_reg_1020 = ap_const_lv1_0))) and (ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_8_reg_1020 = ap_const_lv1_0))) then 
            gmem_read_BREADY <= ap_const_logic_1;
        else 
            gmem_read_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_read_RREADY_assign_proc : process(ap_CS_fsm_state12, ap_enable_reg_pp0_iter8, tmp_7_reg_1030_pp0_iter7_reg, gmem_read_RVALID, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_7_reg_1030_pp0_iter7_reg = ap_const_lv1_1)) or ((gmem_read_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            gmem_read_RREADY <= ap_const_logic_1;
        else 
            gmem_read_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    gmem_read_WDATA <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_327),128));

    gmem_read_WVALID_assign_proc : process(ap_CS_fsm_state30, ap_reg_ioackin_gmem_read_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_read_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            gmem_read_WVALID <= ap_const_logic_1;
        else 
            gmem_read_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_read_blk_n_AR_assign_proc : process(m_axi_gmem_read_ARREADY, ap_CS_fsm_state5, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_7_reg_1030)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_7_reg_1030 = ap_const_lv1_1)))) then 
            gmem_read_blk_n_AR <= m_axi_gmem_read_ARREADY;
        else 
            gmem_read_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_AW_assign_proc : process(m_axi_gmem_read_AWREADY, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            gmem_read_blk_n_AW <= m_axi_gmem_read_AWREADY;
        else 
            gmem_read_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_B_assign_proc : process(m_axi_gmem_read_BVALID, ap_CS_fsm_state35, tmp_8_reg_1020)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (tmp_8_reg_1020 = ap_const_lv1_0))) then 
            gmem_read_blk_n_B <= m_axi_gmem_read_BVALID;
        else 
            gmem_read_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_R_assign_proc : process(m_axi_gmem_read_RVALID, ap_CS_fsm_state12, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, tmp_7_reg_1030_pp0_iter7_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_7_reg_1030_pp0_iter7_reg = ap_const_lv1_1)))) then 
            gmem_read_blk_n_R <= m_axi_gmem_read_RVALID;
        else 
            gmem_read_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_W_assign_proc : process(m_axi_gmem_read_WREADY, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            gmem_read_blk_n_W <= m_axi_gmem_read_WREADY;
        else 
            gmem_read_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    h_1_fu_677_p2 <= std_logic_vector(unsigned(ap_phi_mux_h_phi_fu_341_p4) + unsigned(ap_const_lv15_1));
    h_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_h_phi_fu_341_p4),16));
    h_s_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv15_1) + unsigned(ap_phi_mux_h2_phi_fu_364_p4));
    i_1_fu_442_p2 <= std_logic_vector(unsigned(i_reg_292) + unsigned(ap_const_lv3_1));
    i_2_fu_883_p2 <= std_logic_vector(unsigned(i1_reg_382) + unsigned(ap_const_lv3_1));
    idx_cast3_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_reg_976),17));
    idx_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(idx_fu_503_p5),12));
    idx_fu_503_p5 <= (((tmp_14_fu_499_p1 & ap_const_lv6_0) & tmp_14_fu_499_p1) & ap_const_lv1_0);
    indvar_flatten_next_fu_750_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_349) + unsigned(ap_const_lv24_1));
    input_V2_sum3_cast_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V2_sum3_reg_1102),64));
    input_V2_sum3_fu_833_p2 <= std_logic_vector(unsigned(tmp_19_cast_fu_829_p1) + unsigned(tmp_15_cast_reg_929));
    input_V2_sum4_cast_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V2_sum4_reg_1039),64));
    input_V2_sum4_fu_696_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_929) + unsigned(tmp_13_cast_fu_692_p1));
    input_V2_sum_cast_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V2_sum_reg_986),64));
    input_V2_sum_fu_529_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_929) + unsigned(tmp_cast_fu_525_p1));
    op2_assign_fu_792_p5 <= t_V_mid2_reg_1074(2 - 1 downto 0);
    p_pn_fu_654_p3 <= 
        tmp_15_fu_645_p1 when (tmp_3_fu_640_p2(0) = '1') else 
        p_s_fu_648_p2;
    p_s_fu_648_p2 <= std_logic_vector(unsigned(ap_const_lv16_200) + unsigned(tmp_15_fu_645_p1));
    r_V_fu_810_p2 <= std_logic_vector(shift_right(unsigned(data_V_q0),to_integer(unsigned('0' & tmp_20_fu_806_p1(31-1 downto 0)))));
    sel_tmp1_i_fu_568_p3 <= 
        tail_0 when (sel_tmp_i_fu_563_p2(0) = '1') else 
        tail_3;
    sel_tmp2_i_fu_576_p2 <= "1" when (tmp_14_reg_968 = ap_const_lv2_1) else "0";
    sel_tmp3_i_fu_581_p3 <= 
        tail_1 when (sel_tmp2_i_fu_576_p2(0) = '1') else 
        sel_tmp1_i_fu_568_p3;
    sel_tmp4_i_fu_589_p2 <= "1" when (tmp_14_reg_968 = ap_const_lv2_2) else "0";
    sel_tmp_i_fu_563_p2 <= "1" when (tmp_14_reg_968 = ap_const_lv2_0) else "0";
    stream_tail_1_cast_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_tail_fu_705_p2),16));
    stream_tail_1_fu_594_p3 <= 
        tail_2 when (sel_tmp4_i_fu_589_p2(0) = '1') else 
        sel_tmp3_i_fu_581_p3;
    stream_tail_fu_705_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(tmp_16_fu_701_p1));
    stride_1_fu_493_p2 <= std_logic_vector(unsigned(stride_reg_316) + unsigned(ap_const_lv3_1));
    t_V_mid2_fu_756_p3 <= 
        t_V_reg_371 when (tmp_12_fu_740_p2(0) = '1') else 
        ap_const_lv4_0;
    temp_V_mid2_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_V_mid2_v_fu_770_p3),64));
    temp_V_mid2_v_fu_770_p3 <= 
        ap_phi_mux_h2_phi_fu_364_p4 when (tmp_12_fu_740_p2(0) = '1') else 
        h_s_fu_764_p2;
    tmp_10_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_337_pp0_iter8_reg),64));
    tmp_11_fu_687_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_683_p1) + unsigned(idx_cast3_reg_1004));
    tmp_12_fu_740_p2 <= "1" when (unsigned(tmp_23_cast_fu_736_p1) < unsigned(words_reg_1014)) else "0";
    tmp_13_cast_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_687_p2),29));
    tmp_13_fu_889_p1 <= i1_reg_382(2 - 1 downto 0);
    tmp_14_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_val_assign_phi_fu_330_p4),17));
    tmp_14_fu_499_p1 <= stride_reg_316(2 - 1 downto 0);
    tmp_15_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_418_p4),29));
    tmp_15_fu_645_p1 <= stream_head_V_reg_997(16 - 1 downto 0);
    tmp_16_fu_701_p1 <= ap_phi_mux_val_assign_phi_fu_330_p4(9 - 1 downto 0);
    tmp_17_fu_824_p2 <= std_logic_vector(unsigned(idx_cast_reg_981) + unsigned(ap_const_lv12_200));
    tmp_19_cast_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_824_p2),29));
    tmp_1_fu_436_p2 <= "1" when (i_reg_292 = ap_const_lv3_4) else "0";
    tmp_20_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_fu_792_p6),128));
    tmp_21_fu_816_p1 <= r_V_fu_810_p2(64 - 1 downto 0);
    tmp_23_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_371),8));
    tmp_2_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_292),64));
    tmp_3_fu_640_p2 <= "1" when (unsigned(stream_head_V_reg_997) > unsigned(tmp_6_fu_631_p1)) else "0";
    tmp_4_fu_457_p2 <= "1" when (reset = ap_const_lv8_1) else "0";
    tmp_5_fu_453_p1 <= i_reg_292(2 - 1 downto 0);
    tmp_6_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_tail_1_fu_594_p3),128));
    tmp_7_fu_672_p2 <= "1" when (signed(h_cast_fu_668_p1) < signed(bytes_read_reg_1024)) else "0";
    tmp_8_fu_635_p2 <= "1" when (tmp_6_fu_631_p1 = stream_head_V_reg_997) else "0";
    tmp_9_fu_519_p2 <= std_logic_vector(unsigned(ap_const_lv12_201) + unsigned(idx_cast_fu_515_p1));
    tmp_cast_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_519_p2),29));
    tmp_fu_418_p4 <= input_V(31 downto 4);
    useable_words_address0 <= tmp_2_fu_448_p1(2 - 1 downto 0);

    useable_words_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            useable_words_ce0 <= ap_const_logic_1;
        else 
            useable_words_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    word_V_fu_783_p2 <= std_logic_vector(unsigned(t_V_mid2_fu_756_p3) + unsigned(ap_const_lv4_1));
end behav;
