-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity circ_buff_read_128 is
generic (
    C_M_AXI_GMEM_READ_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_READ_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_DATA_WIDTH : INTEGER := 128;
    C_M_AXI_GMEM_READ_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_READ_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_READ_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_READ_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_READ_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_read_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_read_AWREADY : IN STD_LOGIC;
    m_axi_gmem_read_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_read_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_read_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_read_WVALID : OUT STD_LOGIC;
    m_axi_gmem_read_WREADY : IN STD_LOGIC;
    m_axi_gmem_read_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_DATA_WIDTH-1 downto 0);
    m_axi_gmem_read_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_read_WLAST : OUT STD_LOGIC;
    m_axi_gmem_read_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_read_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_read_ARREADY : IN STD_LOGIC;
    m_axi_gmem_read_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_read_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_read_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_read_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_read_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_read_RVALID : IN STD_LOGIC;
    m_axi_gmem_read_RREADY : OUT STD_LOGIC;
    m_axi_gmem_read_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_DATA_WIDTH-1 downto 0);
    m_axi_gmem_read_RLAST : IN STD_LOGIC;
    m_axi_gmem_read_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_read_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_BVALID : IN STD_LOGIC;
    m_axi_gmem_read_BREADY : OUT STD_LOGIC;
    m_axi_gmem_read_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_read_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_ID_WIDTH-1 downto 0);
    m_axi_gmem_read_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_READ_BUSER_WIDTH-1 downto 0);
    stream_out_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    stream_out_V_TVALID : OUT STD_LOGIC;
    stream_out_V_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of circ_buff_read_128 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "circ_buff_read_128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.916000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=1574,HLS_SYN_LUT=1907,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv29_201 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000001";
    constant ap_const_lv16_200 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv29_200 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_V : STD_LOGIC_VECTOR (31 downto 0);
    signal stream_out_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_out_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_out_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal stream_out_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_1_sel : STD_LOGIC;
    signal stream_out_V_1_load_A : STD_LOGIC;
    signal stream_out_V_1_load_B : STD_LOGIC;
    signal stream_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_1_state_cmp_full : STD_LOGIC;
    signal reset : STD_LOGIC_VECTOR (7 downto 0);
    signal stream_tail_V : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal gmem_read_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_read_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_5_reg_590 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal tmp_5_reg_590_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal gmem_read_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal gmem_read_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal tmp_reg_525 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_625_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_AWVALID : STD_LOGIC;
    signal gmem_read_AWREADY : STD_LOGIC;
    signal gmem_read_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_read_WVALID : STD_LOGIC;
    signal gmem_read_WREADY : STD_LOGIC;
    signal gmem_read_ARVALID : STD_LOGIC;
    signal gmem_read_ARREADY : STD_LOGIC;
    signal gmem_read_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_read_RVALID : STD_LOGIC;
    signal gmem_read_RREADY : STD_LOGIC;
    signal gmem_read_RDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal gmem_read_RLAST : STD_LOGIC;
    signal gmem_read_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_read_BVALID : STD_LOGIC;
    signal gmem_read_BREADY : STD_LOGIC;
    signal gmem_read_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_read_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_read_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_206 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_reg_215 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_215_pp0_iter1_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_sig_ioackin_gmem_read_ARREADY : STD_LOGIC;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal h_reg_215_pp0_iter2_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_215_pp0_iter3_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_215_pp0_iter4_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_215_pp0_iter5_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_215_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_215_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal h_reg_215_pp0_iter8_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_227 : STD_LOGIC_VECTOR (16 downto 0);
    signal h1_reg_238 : STD_LOGIC_VECTOR (14 downto 0);
    signal t_V_1_reg_249 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_cast_fu_270_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_10_cast_reg_519 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_tail_V_load_reg_529 : STD_LOGIC_VECTOR (8 downto 0);
    signal extLd_fu_284_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal extLd_reg_536 : STD_LOGIC_VECTOR (127 downto 0);
    signal input_V2_sum_fu_288_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal input_V2_sum_reg_542 : STD_LOGIC_VECTOR (28 downto 0);
    signal stream_head_V_reg_553 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_2_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_318_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_reg_569 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_321_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_574 : STD_LOGIC_VECTOR (15 downto 0);
    signal bytes_read_fu_335_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bytes_read_reg_579 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_15_fu_364_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_15_reg_585 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_5_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_590_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_590_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_590_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_590_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_590_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_590_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_590_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal h_1_fu_377_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal h_1_reg_594 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal input_V2_sum4_fu_387_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal input_V2_sum4_reg_599 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_7_fu_392_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_reg_604 : STD_LOGIC_VECTOR (8 downto 0);
    signal gmem_read_addr_1_rea_reg_615 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_16_fu_419_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_16_reg_620 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal exitcond_flatten_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state23_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state25_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state25_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_431_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal temp_V_mid2_v_fu_457_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_V_mid2_v_reg_634 : STD_LOGIC_VECTOR (14 downto 0);
    signal cond_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cond_reg_644 : STD_LOGIC_VECTOR (0 downto 0);
    signal word_V_fu_476_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_20_fu_496_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V2_sum3_fu_504_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal input_V2_sum3_reg_659 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_sig_ioackin_gmem_read_AWREADY : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state23 : STD_LOGIC;
    signal data_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal data_V_ce0 : STD_LOGIC;
    signal data_V_we0 : STD_LOGIC;
    signal data_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_mux_t_V_phi_fu_209_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_h_phi_fu_219_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_h1_phi_fu_242_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_9_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_V_mid2_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V2_sum_cast_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V2_sum4_cast_fu_404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V2_sum3_cast_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_gmem_read_ARREADY : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_reg_ioackin_gmem_read_AWREADY : STD_LOGIC := '0';
    signal ap_predicate_op146_writeresp_state33 : BOOLEAN;
    signal ap_block_state33 : BOOLEAN;
    signal ap_reg_ioackin_gmem_read_WREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_gmem_read_WREADY : STD_LOGIC;
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_260_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal bytes_read2_v_fu_330_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_347_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_351_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_359_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal h_cast_fu_368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_cast_fu_383_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_17_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_s_fu_451_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal t_V_1_mid2_fu_443_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_18_fu_482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_fu_486_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_613 : BOOLEAN;

    component circ_buff_read_128_data_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component circ_buff_read_128_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        input_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        reset : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component circ_buff_read_128_gmem_read_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    circ_buff_read_128_control_s_axi_U : component circ_buff_read_128_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        input_V => input_V,
        reset => reset);

    circ_buff_read_128_gmem_read_m_axi_U : component circ_buff_read_128_gmem_read_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 128,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_READ_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_READ_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_READ_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_READ_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_READ_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_READ_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_READ_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_READ_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_READ_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_READ_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_READ_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_read_AWVALID,
        AWREADY => m_axi_gmem_read_AWREADY,
        AWADDR => m_axi_gmem_read_AWADDR,
        AWID => m_axi_gmem_read_AWID,
        AWLEN => m_axi_gmem_read_AWLEN,
        AWSIZE => m_axi_gmem_read_AWSIZE,
        AWBURST => m_axi_gmem_read_AWBURST,
        AWLOCK => m_axi_gmem_read_AWLOCK,
        AWCACHE => m_axi_gmem_read_AWCACHE,
        AWPROT => m_axi_gmem_read_AWPROT,
        AWQOS => m_axi_gmem_read_AWQOS,
        AWREGION => m_axi_gmem_read_AWREGION,
        AWUSER => m_axi_gmem_read_AWUSER,
        WVALID => m_axi_gmem_read_WVALID,
        WREADY => m_axi_gmem_read_WREADY,
        WDATA => m_axi_gmem_read_WDATA,
        WSTRB => m_axi_gmem_read_WSTRB,
        WLAST => m_axi_gmem_read_WLAST,
        WID => m_axi_gmem_read_WID,
        WUSER => m_axi_gmem_read_WUSER,
        ARVALID => m_axi_gmem_read_ARVALID,
        ARREADY => m_axi_gmem_read_ARREADY,
        ARADDR => m_axi_gmem_read_ARADDR,
        ARID => m_axi_gmem_read_ARID,
        ARLEN => m_axi_gmem_read_ARLEN,
        ARSIZE => m_axi_gmem_read_ARSIZE,
        ARBURST => m_axi_gmem_read_ARBURST,
        ARLOCK => m_axi_gmem_read_ARLOCK,
        ARCACHE => m_axi_gmem_read_ARCACHE,
        ARPROT => m_axi_gmem_read_ARPROT,
        ARQOS => m_axi_gmem_read_ARQOS,
        ARREGION => m_axi_gmem_read_ARREGION,
        ARUSER => m_axi_gmem_read_ARUSER,
        RVALID => m_axi_gmem_read_RVALID,
        RREADY => m_axi_gmem_read_RREADY,
        RDATA => m_axi_gmem_read_RDATA,
        RLAST => m_axi_gmem_read_RLAST,
        RID => m_axi_gmem_read_RID,
        RUSER => m_axi_gmem_read_RUSER,
        RRESP => m_axi_gmem_read_RRESP,
        BVALID => m_axi_gmem_read_BVALID,
        BREADY => m_axi_gmem_read_BREADY,
        BRESP => m_axi_gmem_read_BRESP,
        BID => m_axi_gmem_read_BID,
        BUSER => m_axi_gmem_read_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_read_ARVALID,
        I_ARREADY => gmem_read_ARREADY,
        I_ARADDR => gmem_read_ARADDR,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_1,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_read_RVALID,
        I_RREADY => gmem_read_RREADY,
        I_RDATA => gmem_read_RDATA,
        I_RID => gmem_read_RID,
        I_RUSER => gmem_read_RUSER,
        I_RRESP => gmem_read_RRESP,
        I_RLAST => gmem_read_RLAST,
        I_AWVALID => gmem_read_AWVALID,
        I_AWREADY => gmem_read_AWREADY,
        I_AWADDR => gmem_read_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_read_WVALID,
        I_WREADY => gmem_read_WREADY,
        I_WDATA => tmp_15_reg_585,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv16_FFFF,
        I_BVALID => gmem_read_BVALID,
        I_BREADY => gmem_read_BREADY,
        I_BRESP => gmem_read_BRESP,
        I_BID => gmem_read_BID,
        I_BUSER => gmem_read_BUSER);

    data_V_U : component circ_buff_read_128_data_V
    generic map (
        DataWidth => 128,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => data_V_address0,
        ce0 => data_V_ce0,
        we0 => data_V_we0,
        d0 => gmem_read_addr_1_rea_reg_615,
        q0 => data_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state12);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_read_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_read_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1)) or ((ap_sig_ioackin_gmem_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_gmem_read_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (gmem_read_ARREADY = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1)) or ((gmem_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
                    ap_reg_ioackin_gmem_read_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_read_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_read_AWREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                    if ((ap_sig_ioackin_gmem_read_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_read_AWREADY <= ap_const_logic_0;
                    elsif ((gmem_read_AWREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_read_AWREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_gmem_read_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_gmem_read_WREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                    if ((ap_sig_ioackin_gmem_read_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_read_WREADY <= ap_const_logic_0;
                    elsif ((gmem_read_WREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_gmem_read_WREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_1_ack_out = ap_const_logic_1) and (stream_out_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_1_sel_rd <= not(stream_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_1_ack_in = ap_const_logic_1) and (stream_out_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_1_sel_wr <= not(stream_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_1_vld_in = ap_const_logic_0) and (stream_out_V_1_state = ap_const_lv2_2)) or ((stream_out_V_1_vld_in = ap_const_logic_0) and (stream_out_V_1_ack_out = ap_const_logic_1) and (stream_out_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_1_ack_out = ap_const_logic_0) and (stream_out_V_1_state = ap_const_lv2_1)) or ((stream_out_V_1_ack_out = ap_const_logic_0) and (stream_out_V_1_vld_in = ap_const_logic_1) and (stream_out_V_1_state = ap_const_lv2_3)))) then 
                    stream_out_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_1_vld_in = ap_const_logic_0) and (stream_out_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_1_ack_out = ap_const_logic_0) and (stream_out_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_1_state = ap_const_lv2_3)) or ((stream_out_V_1_ack_out = ap_const_logic_1) and (stream_out_V_1_state = ap_const_lv2_1)) or ((stream_out_V_1_vld_in = ap_const_logic_1) and (stream_out_V_1_state = ap_const_lv2_2)))) then 
                    stream_out_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    h1_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_625 = ap_const_lv1_0))) then 
                h1_reg_238 <= temp_V_mid2_v_reg_634;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                h1_reg_238 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    h_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1))) then 
                h_reg_215 <= h_1_reg_594;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                h_reg_215 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_426_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_227 <= indvar_flatten_next_fu_431_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                indvar_flatten_reg_227 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    stream_tail_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_fu_372_p2 = ap_const_lv1_1))) then 
                stream_tail_V <= tmp_7_fu_392_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_274_p2 = ap_const_lv1_1))) then 
                stream_tail_V <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_V_1_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_426_p2 = ap_const_lv1_0))) then 
                t_V_1_reg_249 <= word_V_fu_476_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                t_V_1_reg_249 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    t_V_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1))) then 
                t_V_reg_206 <= tmp_7_reg_604;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                t_V_reg_206 <= stream_tail_V_load_reg_529;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                bytes_read_reg_579 <= bytes_read_fu_335_p2;
                    tmp_15_reg_585(8 downto 0) <= tmp_15_fu_364_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_426_p2 = ap_const_lv1_0))) then
                cond_reg_644 <= cond_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                exitcond_flatten_reg_625 <= exitcond_flatten_fu_426_p2;
                exitcond_flatten_reg_625_pp1_iter1_reg <= exitcond_flatten_reg_625;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    extLd_reg_536(8 downto 0) <= extLd_fu_284_p1(8 downto 0);
                stream_tail_V_load_reg_529 <= stream_tail_V;
                    tmp_10_cast_reg_519(27 downto 0) <= tmp_10_cast_fu_270_p1(27 downto 0);
                tmp_reg_525 <= tmp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_590_pp0_iter7_reg = ap_const_lv1_1))) then
                gmem_read_addr_1_rea_reg_615 <= gmem_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                h_1_reg_594 <= h_1_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                h_reg_215_pp0_iter1_reg <= h_reg_215;
                tmp_5_reg_590 <= tmp_5_fu_372_p2;
                tmp_5_reg_590_pp0_iter1_reg <= tmp_5_reg_590;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                h_reg_215_pp0_iter2_reg <= h_reg_215_pp0_iter1_reg;
                h_reg_215_pp0_iter3_reg <= h_reg_215_pp0_iter2_reg;
                h_reg_215_pp0_iter4_reg <= h_reg_215_pp0_iter3_reg;
                h_reg_215_pp0_iter5_reg <= h_reg_215_pp0_iter4_reg;
                h_reg_215_pp0_iter6_reg <= h_reg_215_pp0_iter5_reg;
                h_reg_215_pp0_iter7_reg <= h_reg_215_pp0_iter6_reg;
                h_reg_215_pp0_iter8_reg <= h_reg_215_pp0_iter7_reg;
                tmp_5_reg_590_pp0_iter2_reg <= tmp_5_reg_590_pp0_iter1_reg;
                tmp_5_reg_590_pp0_iter3_reg <= tmp_5_reg_590_pp0_iter2_reg;
                tmp_5_reg_590_pp0_iter4_reg <= tmp_5_reg_590_pp0_iter3_reg;
                tmp_5_reg_590_pp0_iter5_reg <= tmp_5_reg_590_pp0_iter4_reg;
                tmp_5_reg_590_pp0_iter6_reg <= tmp_5_reg_590_pp0_iter5_reg;
                tmp_5_reg_590_pp0_iter7_reg <= tmp_5_reg_590_pp0_iter6_reg;
                tmp_5_reg_590_pp0_iter8_reg <= tmp_5_reg_590_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                input_V2_sum3_reg_659 <= input_V2_sum3_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_fu_372_p2 = ap_const_lv1_1))) then
                input_V2_sum4_reg_599 <= input_V2_sum4_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_274_p2 = ap_const_lv1_0))) then
                input_V2_sum_reg_542 <= input_V2_sum_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((gmem_read_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                stream_head_V_reg_553 <= gmem_read_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_1_payload_A <= tmp_20_fu_496_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_1_payload_B <= tmp_20_fu_496_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_fu_426_p2 = ap_const_lv1_0))) then
                temp_V_mid2_v_reg_634 <= temp_V_mid2_v_fu_457_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                    tmp_16_reg_620(16 downto 1) <= tmp_16_fu_419_p3(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_1_reg_560 <= tmp_1_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_310_p2 = ap_const_lv1_0))) then
                tmp_2_reg_564 <= tmp_2_fu_314_p2;
                tmp_6_reg_569 <= tmp_6_fu_318_p1;
                tmp_8_reg_574 <= tmp_8_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_fu_372_p2 = ap_const_lv1_1))) then
                tmp_7_reg_604 <= tmp_7_fu_392_p2;
            end if;
        end if;
    end process;
    tmp_10_cast_reg_519(28) <= '0';
    extLd_reg_536(127 downto 9) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_15_reg_585(127 downto 9) <= "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_16_reg_620(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_out_V_1_ack_in, stream_out_V_1_state, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state33, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, gmem_read_RVALID, gmem_read_BVALID, ap_sig_ioackin_gmem_read_ARREADY, tmp_fu_274_p2, tmp_1_fu_310_p2, ap_CS_fsm_state10, tmp_5_fu_372_p2, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_426_p2, ap_enable_reg_pp1_iter0, ap_sig_ioackin_gmem_read_AWREADY, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter9, ap_block_pp1_stage0_subdone, ap_predicate_op146_writeresp_state33, ap_sig_ioackin_gmem_read_WREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_274_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_274_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_sig_ioackin_gmem_read_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((gmem_read_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_1_fu_310_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_5_fu_372_p2 = ap_const_lv1_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_5_fu_372_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_426_p2 = ap_const_lv1_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_426_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_sig_ioackin_gmem_read_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_sig_ioackin_gmem_read_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if ((not(((stream_out_V_1_ack_in = ap_const_logic_0) or ((ap_predicate_op146_writeresp_state33 = ap_const_boolean_1) and (gmem_read_BVALID = ap_const_logic_0)))) and (stream_out_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(12);
    ap_CS_fsm_state26 <= ap_CS_fsm(14);
    ap_CS_fsm_state27 <= ap_CS_fsm(15);
    ap_CS_fsm_state28 <= ap_CS_fsm(16);
    ap_CS_fsm_state33 <= ap_CS_fsm(21);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter8, tmp_5_reg_590_pp0_iter7_reg, gmem_read_RVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((gmem_read_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_5_reg_590_pp0_iter7_reg = ap_const_lv1_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, tmp_5_reg_590_pp0_iter7_reg, gmem_read_RVALID, ap_block_state13_io)
    begin
                ap_block_pp0_stage0_11001 <= (((gmem_read_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_5_reg_590_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, tmp_5_reg_590_pp0_iter7_reg, gmem_read_RVALID, ap_block_state13_io)
    begin
                ap_block_pp0_stage0_subdone <= (((gmem_read_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_5_reg_590_pp0_iter7_reg = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state13_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state24_io, ap_block_state25_io)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_block_state24_io, ap_block_state25_io)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state25_io) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state24_io) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(tmp_5_reg_590, ap_sig_ioackin_gmem_read_ARREADY)
    begin
                ap_block_state13_io <= ((ap_sig_ioackin_gmem_read_ARREADY = ap_const_logic_0) and (tmp_5_reg_590 = ap_const_lv1_1));
    end process;

        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage0_iter8_assign_proc : process(tmp_5_reg_590_pp0_iter7_reg, gmem_read_RVALID)
    begin
                ap_block_state20_pp0_stage0_iter8 <= ((gmem_read_RVALID = ap_const_logic_0) and (tmp_5_reg_590_pp0_iter7_reg = ap_const_lv1_1));
    end process;

        ap_block_state21_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(stream_out_V_1_ack_in, exitcond_flatten_reg_625)
    begin
                ap_block_state24_io <= ((stream_out_V_1_ack_in = ap_const_logic_0) and (exitcond_flatten_reg_625 = ap_const_lv1_0));
    end process;

        ap_block_state24_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state25_io_assign_proc : process(stream_out_V_1_ack_in, exitcond_flatten_reg_625_pp1_iter1_reg)
    begin
                ap_block_state25_io <= ((stream_out_V_1_ack_in = ap_const_logic_0) and (exitcond_flatten_reg_625_pp1_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state25_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state33_assign_proc : process(stream_out_V_1_ack_in, gmem_read_BVALID, ap_predicate_op146_writeresp_state33)
    begin
                ap_block_state33 <= ((stream_out_V_1_ack_in = ap_const_logic_0) or ((ap_predicate_op146_writeresp_state33 = ap_const_boolean_1) and (gmem_read_BVALID = ap_const_logic_0)));
    end process;


    ap_condition_613_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_590, ap_block_pp0_stage0_01001)
    begin
                ap_condition_613 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state12_assign_proc : process(tmp_5_fu_372_p2)
    begin
        if ((tmp_5_fu_372_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state23_assign_proc : process(exitcond_flatten_fu_426_p2)
    begin
        if ((exitcond_flatten_fu_426_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(stream_out_V_1_ack_in, stream_out_V_1_state, ap_CS_fsm_state33, gmem_read_BVALID, ap_predicate_op146_writeresp_state33)
    begin
        if ((not(((stream_out_V_1_ack_in = ap_const_logic_0) or ((ap_predicate_op146_writeresp_state33 = ap_const_boolean_1) and (gmem_read_BVALID = ap_const_logic_0)))) and (stream_out_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_h1_phi_fu_242_p4_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten_reg_625, h1_reg_238, temp_V_mid2_v_reg_634)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_625 = ap_const_lv1_0))) then 
            ap_phi_mux_h1_phi_fu_242_p4 <= temp_V_mid2_v_reg_634;
        else 
            ap_phi_mux_h1_phi_fu_242_p4 <= h1_reg_238;
        end if; 
    end process;


    ap_phi_mux_h_phi_fu_219_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_5_reg_590, h_reg_215, h_1_reg_594)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1))) then 
            ap_phi_mux_h_phi_fu_219_p4 <= h_1_reg_594;
        else 
            ap_phi_mux_h_phi_fu_219_p4 <= h_reg_215;
        end if; 
    end process;


    ap_phi_mux_t_V_phi_fu_209_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_5_reg_590, t_V_reg_206, tmp_7_reg_604)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1))) then 
            ap_phi_mux_t_V_phi_fu_209_p4 <= tmp_7_reg_604;
        else 
            ap_phi_mux_t_V_phi_fu_209_p4 <= t_V_reg_206;
        end if; 
    end process;


    ap_predicate_op146_writeresp_state33_assign_proc : process(tmp_reg_525, tmp_1_reg_560)
    begin
                ap_predicate_op146_writeresp_state33 <= ((tmp_1_reg_560 = ap_const_lv1_0) and (tmp_reg_525 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(stream_out_V_1_ack_in, stream_out_V_1_state, ap_CS_fsm_state33, gmem_read_BVALID, ap_predicate_op146_writeresp_state33)
    begin
        if ((not(((stream_out_V_1_ack_in = ap_const_logic_0) or ((ap_predicate_op146_writeresp_state33 = ap_const_boolean_1) and (gmem_read_BVALID = ap_const_logic_0)))) and (stream_out_V_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_gmem_read_ARREADY_assign_proc : process(gmem_read_ARREADY, ap_reg_ioackin_gmem_read_ARREADY)
    begin
        if ((ap_reg_ioackin_gmem_read_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_read_ARREADY <= gmem_read_ARREADY;
        else 
            ap_sig_ioackin_gmem_read_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_read_AWREADY_assign_proc : process(gmem_read_AWREADY, ap_reg_ioackin_gmem_read_AWREADY)
    begin
        if ((ap_reg_ioackin_gmem_read_AWREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_read_AWREADY <= gmem_read_AWREADY;
        else 
            ap_sig_ioackin_gmem_read_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    ap_sig_ioackin_gmem_read_WREADY_assign_proc : process(gmem_read_WREADY, ap_reg_ioackin_gmem_read_WREADY)
    begin
        if ((ap_reg_ioackin_gmem_read_WREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_gmem_read_WREADY <= gmem_read_WREADY;
        else 
            ap_sig_ioackin_gmem_read_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    bytes_read2_v_fu_330_p3 <= 
        tmp_6_reg_569 when (tmp_2_reg_564(0) = '1') else 
        tmp_8_reg_574;
    bytes_read_fu_335_p2 <= std_logic_vector(unsigned(bytes_read2_v_fu_330_p3) - unsigned(tmp_4_fu_327_p1));
    cond_fu_470_p2 <= "1" when (t_V_1_mid2_fu_443_p3 = ap_const_lv2_0) else "0";

    data_V_address0_assign_proc : process(ap_block_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter9, tmp_9_fu_414_p1, temp_V_mid2_fu_465_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            data_V_address0 <= temp_V_mid2_fu_465_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_V_address0 <= tmp_9_fu_414_p1(9 - 1 downto 0);
        else 
            data_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    data_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp0_stage0_11001, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_enable_reg_pp0_iter9)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    data_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_5_reg_590_pp0_iter8_reg, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (tmp_5_reg_590_pp0_iter8_reg = ap_const_lv1_1))) then 
            data_V_we0 <= ap_const_logic_1;
        else 
            data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_426_p2 <= "1" when (indvar_flatten_reg_227 = tmp_16_reg_620) else "0";
    extLd_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_tail_V),128));

    gmem_read_ARADDR_assign_proc : process(ap_CS_fsm_state2, input_V2_sum_cast_fu_300_p1, input_V2_sum4_cast_fu_404_p1, ap_reg_ioackin_gmem_read_ARREADY, ap_condition_613)
    begin
        if ((ap_reg_ioackin_gmem_read_ARREADY = ap_const_logic_0)) then
            if ((ap_const_boolean_1 = ap_condition_613)) then 
                gmem_read_ARADDR <= input_V2_sum4_cast_fu_404_p1(32 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                gmem_read_ARADDR <= input_V2_sum_cast_fu_300_p1(32 - 1 downto 0);
            else 
                gmem_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            gmem_read_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_read_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_5_reg_590, ap_reg_ioackin_gmem_read_ARREADY, ap_block_pp0_stage0_01001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_reg_ioackin_gmem_read_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1)) or ((ap_reg_ioackin_gmem_read_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            gmem_read_ARVALID <= ap_const_logic_1;
        else 
            gmem_read_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    gmem_read_AWADDR <= input_V2_sum3_cast_fu_509_p1(32 - 1 downto 0);

    gmem_read_AWVALID_assign_proc : process(ap_CS_fsm_state27, ap_reg_ioackin_gmem_read_AWREADY)
    begin
        if (((ap_reg_ioackin_gmem_read_AWREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            gmem_read_AWVALID <= ap_const_logic_1;
        else 
            gmem_read_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_read_BREADY_assign_proc : process(stream_out_V_1_ack_in, ap_CS_fsm_state33, gmem_read_BVALID, ap_predicate_op146_writeresp_state33)
    begin
        if ((not(((stream_out_V_1_ack_in = ap_const_logic_0) or ((ap_predicate_op146_writeresp_state33 = ap_const_boolean_1) and (gmem_read_BVALID = ap_const_logic_0)))) and (ap_predicate_op146_writeresp_state33 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            gmem_read_BREADY <= ap_const_logic_1;
        else 
            gmem_read_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_read_RREADY_assign_proc : process(ap_CS_fsm_state9, ap_enable_reg_pp0_iter8, tmp_5_reg_590_pp0_iter7_reg, gmem_read_RVALID, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (tmp_5_reg_590_pp0_iter7_reg = ap_const_lv1_1)) or ((gmem_read_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            gmem_read_RREADY <= ap_const_logic_1;
        else 
            gmem_read_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_read_WVALID_assign_proc : process(ap_CS_fsm_state28, ap_reg_ioackin_gmem_read_WREADY)
    begin
        if (((ap_reg_ioackin_gmem_read_WREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            gmem_read_WVALID <= ap_const_logic_1;
        else 
            gmem_read_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_read_blk_n_AR_assign_proc : process(m_axi_gmem_read_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_5_reg_590)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_590 = ap_const_lv1_1)))) then 
            gmem_read_blk_n_AR <= m_axi_gmem_read_ARREADY;
        else 
            gmem_read_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_AW_assign_proc : process(m_axi_gmem_read_AWREADY, ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            gmem_read_blk_n_AW <= m_axi_gmem_read_AWREADY;
        else 
            gmem_read_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_B_assign_proc : process(m_axi_gmem_read_BVALID, ap_CS_fsm_state33, tmp_reg_525, tmp_1_reg_560)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) and (tmp_1_reg_560 = ap_const_lv1_0) and (tmp_reg_525 = ap_const_lv1_0))) then 
            gmem_read_blk_n_B <= m_axi_gmem_read_BVALID;
        else 
            gmem_read_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_R_assign_proc : process(m_axi_gmem_read_RVALID, ap_CS_fsm_state9, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, tmp_5_reg_590_pp0_iter7_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_590_pp0_iter7_reg = ap_const_lv1_1)))) then 
            gmem_read_blk_n_R <= m_axi_gmem_read_RVALID;
        else 
            gmem_read_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_read_blk_n_W_assign_proc : process(m_axi_gmem_read_WREADY, ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            gmem_read_blk_n_W <= m_axi_gmem_read_WREADY;
        else 
            gmem_read_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    h_1_fu_377_p2 <= std_logic_vector(unsigned(ap_phi_mux_h_phi_fu_219_p4) + unsigned(ap_const_lv15_1));
    h_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_h_phi_fu_219_p4),16));
    h_s_fu_451_p2 <= std_logic_vector(unsigned(ap_const_lv15_1) + unsigned(ap_phi_mux_h1_phi_fu_242_p4));
    indvar_flatten_next_fu_431_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_227) + unsigned(ap_const_lv17_1));
    input_V2_sum3_cast_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V2_sum3_reg_659),64));
    input_V2_sum3_fu_504_p2 <= std_logic_vector(unsigned(tmp_10_cast_reg_519) + unsigned(ap_const_lv29_200));
    input_V2_sum4_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V2_sum4_reg_599),64));
    input_V2_sum4_fu_387_p2 <= std_logic_vector(unsigned(tmp_6_cast_fu_383_p1) + unsigned(tmp_10_cast_reg_519));
    input_V2_sum_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_V2_sum_reg_542),64));
    input_V2_sum_fu_288_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_270_p1) + unsigned(ap_const_lv29_201));
    stream_out_V_1_ack_in <= stream_out_V_1_state(1);
    stream_out_V_1_ack_out <= stream_out_V_TREADY;

    stream_out_V_1_data_out_assign_proc : process(stream_out_V_1_payload_A, stream_out_V_1_payload_B, stream_out_V_1_sel)
    begin
        if ((stream_out_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_1_data_out <= stream_out_V_1_payload_B;
        else 
            stream_out_V_1_data_out <= stream_out_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_1_load_A <= (stream_out_V_1_state_cmp_full and not(stream_out_V_1_sel_wr));
    stream_out_V_1_load_B <= (stream_out_V_1_state_cmp_full and stream_out_V_1_sel_wr);
    stream_out_V_1_sel <= stream_out_V_1_sel_rd;
    stream_out_V_1_state_cmp_full <= '0' when (stream_out_V_1_state = ap_const_lv2_1) else '1';

    stream_out_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, exitcond_flatten_reg_625, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_625 = ap_const_lv1_0))) then 
            stream_out_V_1_vld_in <= ap_const_logic_1;
        else 
            stream_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    stream_out_V_1_vld_out <= stream_out_V_1_state(0);
    stream_out_V_TDATA <= stream_out_V_1_data_out;

    stream_out_V_TDATA_blk_n_assign_proc : process(stream_out_V_1_state, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, exitcond_flatten_reg_625, ap_enable_reg_pp1_iter2, exitcond_flatten_reg_625_pp1_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (exitcond_flatten_reg_625_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (exitcond_flatten_reg_625 = ap_const_lv1_0)))) then 
            stream_out_V_TDATA_blk_n <= stream_out_V_1_state(1);
        else 
            stream_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_V_TVALID <= stream_out_V_1_state(0);
    t_V_1_mid2_fu_443_p3 <= 
        ap_const_lv2_0 when (tmp_17_fu_437_p2(0) = '1') else 
        t_V_1_reg_249;
    temp_V_mid2_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_V_mid2_v_fu_457_p3),64));
    temp_V_mid2_v_fu_457_p3 <= 
        h_s_fu_451_p2 when (tmp_17_fu_437_p2(0) = '1') else 
        ap_phi_mux_h1_phi_fu_242_p4;
    tmp_10_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_260_p4),29));
    tmp_10_fu_341_p2 <= "1" when (signed(bytes_read_fu_335_p2) > signed(ap_const_lv16_0)) else "0";
    tmp_11_fu_347_p1 <= bytes_read_fu_335_p2(9 - 1 downto 0);
    tmp_12_fu_351_p3 <= 
        tmp_11_fu_347_p1 when (tmp_10_fu_341_p2(0) = '1') else 
        ap_const_lv9_0;
    tmp_13_fu_359_p2 <= std_logic_vector(unsigned(tmp_12_fu_351_p3) + unsigned(stream_tail_V_load_reg_529));
    tmp_15_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_359_p2),128));
    tmp_16_fu_419_p3 <= (bytes_read_reg_579 & ap_const_lv1_0);
    tmp_17_fu_437_p2 <= "1" when (t_V_1_reg_249 = ap_const_lv2_2) else "0";
    tmp_18_fu_482_p1 <= data_V_q0(64 - 1 downto 0);
    tmp_19_fu_486_p4 <= data_V_q0(95 downto 32);
    tmp_1_fu_310_p2 <= "1" when (extLd_reg_536 = stream_head_V_reg_553) else "0";
    tmp_20_fu_496_p3 <= 
        tmp_18_fu_482_p1 when (cond_reg_644(0) = '1') else 
        tmp_19_fu_486_p4;
    tmp_2_fu_314_p2 <= "1" when (unsigned(stream_head_V_reg_553) > unsigned(extLd_reg_536)) else "0";
    tmp_3_fu_260_p4 <= input_V(31 downto 4);
    tmp_4_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stream_tail_V_load_reg_529),16));
    tmp_5_fu_372_p2 <= "1" when (signed(h_cast_fu_368_p1) < signed(bytes_read_reg_579)) else "0";
    tmp_6_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_t_V_phi_fu_209_p4),29));
    tmp_6_fu_318_p1 <= stream_head_V_reg_553(16 - 1 downto 0);
    tmp_7_fu_392_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_phi_fu_209_p4) + unsigned(ap_const_lv9_1));
    tmp_8_fu_321_p2 <= std_logic_vector(unsigned(ap_const_lv16_200) + unsigned(tmp_6_fu_318_p1));
    tmp_9_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_reg_215_pp0_iter8_reg),64));
    tmp_fu_274_p2 <= "1" when (reset = ap_const_lv8_1) else "0";
    word_V_fu_476_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(t_V_1_mid2_fu_443_p3));
end behav;
