// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="circ_buff_read_128,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.916000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=1574,HLS_SYN_LUT=1907,HLS_VERSION=2018_3}" *)

module circ_buff_read_128 (
        ap_clk,
        ap_rst_n,
        m_axi_gmem_read_AWVALID,
        m_axi_gmem_read_AWREADY,
        m_axi_gmem_read_AWADDR,
        m_axi_gmem_read_AWID,
        m_axi_gmem_read_AWLEN,
        m_axi_gmem_read_AWSIZE,
        m_axi_gmem_read_AWBURST,
        m_axi_gmem_read_AWLOCK,
        m_axi_gmem_read_AWCACHE,
        m_axi_gmem_read_AWPROT,
        m_axi_gmem_read_AWQOS,
        m_axi_gmem_read_AWREGION,
        m_axi_gmem_read_AWUSER,
        m_axi_gmem_read_WVALID,
        m_axi_gmem_read_WREADY,
        m_axi_gmem_read_WDATA,
        m_axi_gmem_read_WSTRB,
        m_axi_gmem_read_WLAST,
        m_axi_gmem_read_WID,
        m_axi_gmem_read_WUSER,
        m_axi_gmem_read_ARVALID,
        m_axi_gmem_read_ARREADY,
        m_axi_gmem_read_ARADDR,
        m_axi_gmem_read_ARID,
        m_axi_gmem_read_ARLEN,
        m_axi_gmem_read_ARSIZE,
        m_axi_gmem_read_ARBURST,
        m_axi_gmem_read_ARLOCK,
        m_axi_gmem_read_ARCACHE,
        m_axi_gmem_read_ARPROT,
        m_axi_gmem_read_ARQOS,
        m_axi_gmem_read_ARREGION,
        m_axi_gmem_read_ARUSER,
        m_axi_gmem_read_RVALID,
        m_axi_gmem_read_RREADY,
        m_axi_gmem_read_RDATA,
        m_axi_gmem_read_RLAST,
        m_axi_gmem_read_RID,
        m_axi_gmem_read_RUSER,
        m_axi_gmem_read_RRESP,
        m_axi_gmem_read_BVALID,
        m_axi_gmem_read_BREADY,
        m_axi_gmem_read_BRESP,
        m_axi_gmem_read_BID,
        m_axi_gmem_read_BUSER,
        stream_out_V_TDATA,
        stream_out_V_TVALID,
        stream_out_V_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_pp0_stage0 = 22'd2048;
parameter    ap_ST_fsm_state22 = 22'd4096;
parameter    ap_ST_fsm_pp1_stage0 = 22'd8192;
parameter    ap_ST_fsm_state26 = 22'd16384;
parameter    ap_ST_fsm_state27 = 22'd32768;
parameter    ap_ST_fsm_state28 = 22'd65536;
parameter    ap_ST_fsm_state29 = 22'd131072;
parameter    ap_ST_fsm_state30 = 22'd262144;
parameter    ap_ST_fsm_state31 = 22'd524288;
parameter    ap_ST_fsm_state32 = 22'd1048576;
parameter    ap_ST_fsm_state33 = 22'd2097152;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_READ_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_ADDR_WIDTH = 32;
parameter    C_M_AXI_GMEM_READ_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM_READ_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_READ_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_READ_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_READ_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_READ_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_gmem_read_AWVALID;
input   m_axi_gmem_read_AWREADY;
output  [C_M_AXI_GMEM_READ_ADDR_WIDTH - 1:0] m_axi_gmem_read_AWADDR;
output  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_AWID;
output  [7:0] m_axi_gmem_read_AWLEN;
output  [2:0] m_axi_gmem_read_AWSIZE;
output  [1:0] m_axi_gmem_read_AWBURST;
output  [1:0] m_axi_gmem_read_AWLOCK;
output  [3:0] m_axi_gmem_read_AWCACHE;
output  [2:0] m_axi_gmem_read_AWPROT;
output  [3:0] m_axi_gmem_read_AWQOS;
output  [3:0] m_axi_gmem_read_AWREGION;
output  [C_M_AXI_GMEM_READ_AWUSER_WIDTH - 1:0] m_axi_gmem_read_AWUSER;
output   m_axi_gmem_read_WVALID;
input   m_axi_gmem_read_WREADY;
output  [C_M_AXI_GMEM_READ_DATA_WIDTH - 1:0] m_axi_gmem_read_WDATA;
output  [C_M_AXI_GMEM_READ_WSTRB_WIDTH - 1:0] m_axi_gmem_read_WSTRB;
output   m_axi_gmem_read_WLAST;
output  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_WID;
output  [C_M_AXI_GMEM_READ_WUSER_WIDTH - 1:0] m_axi_gmem_read_WUSER;
output   m_axi_gmem_read_ARVALID;
input   m_axi_gmem_read_ARREADY;
output  [C_M_AXI_GMEM_READ_ADDR_WIDTH - 1:0] m_axi_gmem_read_ARADDR;
output  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_ARID;
output  [7:0] m_axi_gmem_read_ARLEN;
output  [2:0] m_axi_gmem_read_ARSIZE;
output  [1:0] m_axi_gmem_read_ARBURST;
output  [1:0] m_axi_gmem_read_ARLOCK;
output  [3:0] m_axi_gmem_read_ARCACHE;
output  [2:0] m_axi_gmem_read_ARPROT;
output  [3:0] m_axi_gmem_read_ARQOS;
output  [3:0] m_axi_gmem_read_ARREGION;
output  [C_M_AXI_GMEM_READ_ARUSER_WIDTH - 1:0] m_axi_gmem_read_ARUSER;
input   m_axi_gmem_read_RVALID;
output   m_axi_gmem_read_RREADY;
input  [C_M_AXI_GMEM_READ_DATA_WIDTH - 1:0] m_axi_gmem_read_RDATA;
input   m_axi_gmem_read_RLAST;
input  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_RID;
input  [C_M_AXI_GMEM_READ_RUSER_WIDTH - 1:0] m_axi_gmem_read_RUSER;
input  [1:0] m_axi_gmem_read_RRESP;
input   m_axi_gmem_read_BVALID;
output   m_axi_gmem_read_BREADY;
input  [1:0] m_axi_gmem_read_BRESP;
input  [C_M_AXI_GMEM_READ_ID_WIDTH - 1:0] m_axi_gmem_read_BID;
input  [C_M_AXI_GMEM_READ_BUSER_WIDTH - 1:0] m_axi_gmem_read_BUSER;
output  [63:0] stream_out_V_TDATA;
output   stream_out_V_TVALID;
input   stream_out_V_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_V;
reg   [63:0] stream_out_V_1_data_out;
reg    stream_out_V_1_vld_in;
wire    stream_out_V_1_vld_out;
wire    stream_out_V_1_ack_in;
wire    stream_out_V_1_ack_out;
reg   [63:0] stream_out_V_1_payload_A;
reg   [63:0] stream_out_V_1_payload_B;
reg    stream_out_V_1_sel_rd;
reg    stream_out_V_1_sel_wr;
wire    stream_out_V_1_sel;
wire    stream_out_V_1_load_A;
wire    stream_out_V_1_load_B;
reg   [1:0] stream_out_V_1_state;
wire    stream_out_V_1_state_cmp_full;
wire   [7:0] reset;
reg   [8:0] stream_tail_V;
reg    gmem_read_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem_read_blk_n_R;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_5_reg_590;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] tmp_5_reg_590_pp0_iter7_reg;
reg    gmem_read_blk_n_AW;
wire    ap_CS_fsm_state27;
reg    gmem_read_blk_n_W;
wire    ap_CS_fsm_state28;
reg    gmem_read_blk_n_B;
wire    ap_CS_fsm_state33;
reg   [0:0] tmp_reg_525;
reg   [0:0] tmp_1_reg_560;
reg    stream_out_V_TDATA_blk_n;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] exitcond_flatten_reg_625;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] exitcond_flatten_reg_625_pp1_iter1_reg;
reg    gmem_read_AWVALID;
wire    gmem_read_AWREADY;
wire   [31:0] gmem_read_AWADDR;
reg    gmem_read_WVALID;
wire    gmem_read_WREADY;
reg    gmem_read_ARVALID;
wire    gmem_read_ARREADY;
reg   [31:0] gmem_read_ARADDR;
wire    gmem_read_RVALID;
reg    gmem_read_RREADY;
wire   [127:0] gmem_read_RDATA;
wire    gmem_read_RLAST;
wire   [0:0] gmem_read_RID;
wire   [0:0] gmem_read_RUSER;
wire   [1:0] gmem_read_RRESP;
wire    gmem_read_BVALID;
reg    gmem_read_BREADY;
wire   [1:0] gmem_read_BRESP;
wire   [0:0] gmem_read_BID;
wire   [0:0] gmem_read_BUSER;
reg   [8:0] t_V_reg_206;
reg   [14:0] h_reg_215;
reg   [14:0] h_reg_215_pp0_iter1_reg;
wire    ap_block_state12_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
reg    ap_sig_ioackin_gmem_read_ARREADY;
reg    ap_block_state13_io;
wire    ap_block_state14_pp0_stage0_iter2;
wire    ap_block_state15_pp0_stage0_iter3;
wire    ap_block_state16_pp0_stage0_iter4;
wire    ap_block_state17_pp0_stage0_iter5;
wire    ap_block_state18_pp0_stage0_iter6;
wire    ap_block_state19_pp0_stage0_iter7;
reg    ap_block_state20_pp0_stage0_iter8;
wire    ap_block_state21_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg   [14:0] h_reg_215_pp0_iter2_reg;
reg   [14:0] h_reg_215_pp0_iter3_reg;
reg   [14:0] h_reg_215_pp0_iter4_reg;
reg   [14:0] h_reg_215_pp0_iter5_reg;
reg   [14:0] h_reg_215_pp0_iter6_reg;
reg   [14:0] h_reg_215_pp0_iter7_reg;
reg   [14:0] h_reg_215_pp0_iter8_reg;
reg   [16:0] indvar_flatten_reg_227;
reg   [14:0] h1_reg_238;
reg   [1:0] t_V_1_reg_249;
wire   [28:0] tmp_10_cast_fu_270_p1;
reg   [28:0] tmp_10_cast_reg_519;
wire   [0:0] tmp_fu_274_p2;
reg   [8:0] stream_tail_V_load_reg_529;
wire   [127:0] extLd_fu_284_p1;
reg   [127:0] extLd_reg_536;
wire   [28:0] input_V2_sum_fu_288_p2;
reg   [28:0] input_V2_sum_reg_542;
reg   [127:0] stream_head_V_reg_553;
wire   [0:0] tmp_1_fu_310_p2;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_2_fu_314_p2;
reg   [0:0] tmp_2_reg_564;
wire   [15:0] tmp_6_fu_318_p1;
reg   [15:0] tmp_6_reg_569;
wire   [15:0] tmp_8_fu_321_p2;
reg   [15:0] tmp_8_reg_574;
wire   [15:0] bytes_read_fu_335_p2;
reg   [15:0] bytes_read_reg_579;
wire    ap_CS_fsm_state11;
wire   [127:0] tmp_15_fu_364_p1;
reg   [127:0] tmp_15_reg_585;
wire   [0:0] tmp_5_fu_372_p2;
reg   [0:0] tmp_5_reg_590_pp0_iter1_reg;
reg   [0:0] tmp_5_reg_590_pp0_iter2_reg;
reg   [0:0] tmp_5_reg_590_pp0_iter3_reg;
reg   [0:0] tmp_5_reg_590_pp0_iter4_reg;
reg   [0:0] tmp_5_reg_590_pp0_iter5_reg;
reg   [0:0] tmp_5_reg_590_pp0_iter6_reg;
reg   [0:0] tmp_5_reg_590_pp0_iter8_reg;
wire   [14:0] h_1_fu_377_p2;
reg   [14:0] h_1_reg_594;
reg    ap_enable_reg_pp0_iter0;
wire   [28:0] input_V2_sum4_fu_387_p2;
reg   [28:0] input_V2_sum4_reg_599;
wire   [8:0] tmp_7_fu_392_p2;
reg   [8:0] tmp_7_reg_604;
reg   [127:0] gmem_read_addr_1_rea_reg_615;
wire   [16:0] tmp_16_fu_419_p3;
reg   [16:0] tmp_16_reg_620;
wire    ap_CS_fsm_state22;
wire   [0:0] exitcond_flatten_fu_426_p2;
wire    ap_block_state23_pp1_stage0_iter0;
wire    ap_block_state24_pp1_stage0_iter1;
reg    ap_block_state24_io;
wire    ap_block_state25_pp1_stage0_iter2;
reg    ap_block_state25_io;
reg    ap_block_pp1_stage0_11001;
wire   [16:0] indvar_flatten_next_fu_431_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [14:0] temp_V_mid2_v_fu_457_p3;
reg   [14:0] temp_V_mid2_v_reg_634;
wire   [0:0] cond_fu_470_p2;
reg   [0:0] cond_reg_644;
wire   [1:0] word_V_fu_476_p2;
wire   [63:0] tmp_20_fu_496_p3;
wire   [28:0] input_V2_sum3_fu_504_p2;
reg   [28:0] input_V2_sum3_reg_659;
wire    ap_CS_fsm_state26;
reg    ap_sig_ioackin_gmem_read_AWREADY;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state12;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter9;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state23;
reg   [8:0] data_V_address0;
reg    data_V_ce0;
reg    data_V_we0;
wire   [127:0] data_V_q0;
reg   [8:0] ap_phi_mux_t_V_phi_fu_209_p4;
reg   [14:0] ap_phi_mux_h_phi_fu_219_p4;
reg   [14:0] ap_phi_mux_h1_phi_fu_242_p4;
wire   [63:0] tmp_9_fu_414_p1;
wire   [63:0] temp_V_mid2_fu_465_p1;
wire   [63:0] input_V2_sum_cast_fu_300_p1;
wire   [63:0] input_V2_sum4_cast_fu_404_p1;
wire   [63:0] input_V2_sum3_cast_fu_509_p1;
reg    ap_reg_ioackin_gmem_read_ARREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_gmem_read_AWREADY;
reg    ap_predicate_op146_writeresp_state33;
reg    ap_block_state33;
reg    ap_reg_ioackin_gmem_read_WREADY;
reg    ap_sig_ioackin_gmem_read_WREADY;
wire    ap_block_pp1_stage0_01001;
wire   [27:0] tmp_3_fu_260_p4;
wire   [15:0] bytes_read2_v_fu_330_p3;
wire   [15:0] tmp_4_fu_327_p1;
wire   [0:0] tmp_10_fu_341_p2;
wire   [8:0] tmp_11_fu_347_p1;
wire   [8:0] tmp_12_fu_351_p3;
wire   [8:0] tmp_13_fu_359_p2;
wire   [15:0] h_cast_fu_368_p1;
wire   [28:0] tmp_6_cast_fu_383_p1;
wire   [0:0] tmp_17_fu_437_p2;
wire   [14:0] h_s_fu_451_p2;
wire   [1:0] t_V_1_mid2_fu_443_p3;
wire   [63:0] tmp_18_fu_482_p1;
wire   [63:0] tmp_19_fu_486_p4;
reg   [21:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_613;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
#0 stream_out_V_1_sel_rd = 1'b0;
#0 stream_out_V_1_sel_wr = 1'b0;
#0 stream_out_V_1_state = 2'd0;
#0 stream_tail_V = 9'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_reg_ioackin_gmem_read_ARREADY = 1'b0;
#0 ap_reg_ioackin_gmem_read_AWREADY = 1'b0;
#0 ap_reg_ioackin_gmem_read_WREADY = 1'b0;
end

circ_buff_read_128_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
circ_buff_read_128_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_V(input_V),
    .reset(reset)
);

circ_buff_read_128_gmem_read_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 128 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_READ_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_READ_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_READ_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_READ_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_READ_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_READ_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_READ_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_READ_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_READ_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_READ_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_READ_CACHE_VALUE ))
circ_buff_read_128_gmem_read_m_axi_U(
    .AWVALID(m_axi_gmem_read_AWVALID),
    .AWREADY(m_axi_gmem_read_AWREADY),
    .AWADDR(m_axi_gmem_read_AWADDR),
    .AWID(m_axi_gmem_read_AWID),
    .AWLEN(m_axi_gmem_read_AWLEN),
    .AWSIZE(m_axi_gmem_read_AWSIZE),
    .AWBURST(m_axi_gmem_read_AWBURST),
    .AWLOCK(m_axi_gmem_read_AWLOCK),
    .AWCACHE(m_axi_gmem_read_AWCACHE),
    .AWPROT(m_axi_gmem_read_AWPROT),
    .AWQOS(m_axi_gmem_read_AWQOS),
    .AWREGION(m_axi_gmem_read_AWREGION),
    .AWUSER(m_axi_gmem_read_AWUSER),
    .WVALID(m_axi_gmem_read_WVALID),
    .WREADY(m_axi_gmem_read_WREADY),
    .WDATA(m_axi_gmem_read_WDATA),
    .WSTRB(m_axi_gmem_read_WSTRB),
    .WLAST(m_axi_gmem_read_WLAST),
    .WID(m_axi_gmem_read_WID),
    .WUSER(m_axi_gmem_read_WUSER),
    .ARVALID(m_axi_gmem_read_ARVALID),
    .ARREADY(m_axi_gmem_read_ARREADY),
    .ARADDR(m_axi_gmem_read_ARADDR),
    .ARID(m_axi_gmem_read_ARID),
    .ARLEN(m_axi_gmem_read_ARLEN),
    .ARSIZE(m_axi_gmem_read_ARSIZE),
    .ARBURST(m_axi_gmem_read_ARBURST),
    .ARLOCK(m_axi_gmem_read_ARLOCK),
    .ARCACHE(m_axi_gmem_read_ARCACHE),
    .ARPROT(m_axi_gmem_read_ARPROT),
    .ARQOS(m_axi_gmem_read_ARQOS),
    .ARREGION(m_axi_gmem_read_ARREGION),
    .ARUSER(m_axi_gmem_read_ARUSER),
    .RVALID(m_axi_gmem_read_RVALID),
    .RREADY(m_axi_gmem_read_RREADY),
    .RDATA(m_axi_gmem_read_RDATA),
    .RLAST(m_axi_gmem_read_RLAST),
    .RID(m_axi_gmem_read_RID),
    .RUSER(m_axi_gmem_read_RUSER),
    .RRESP(m_axi_gmem_read_RRESP),
    .BVALID(m_axi_gmem_read_BVALID),
    .BREADY(m_axi_gmem_read_BREADY),
    .BRESP(m_axi_gmem_read_BRESP),
    .BID(m_axi_gmem_read_BID),
    .BUSER(m_axi_gmem_read_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(gmem_read_ARVALID),
    .I_ARREADY(gmem_read_ARREADY),
    .I_ARADDR(gmem_read_ARADDR),
    .I_ARID(1'd0),
    .I_ARLEN(32'd1),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_read_RVALID),
    .I_RREADY(gmem_read_RREADY),
    .I_RDATA(gmem_read_RDATA),
    .I_RID(gmem_read_RID),
    .I_RUSER(gmem_read_RUSER),
    .I_RRESP(gmem_read_RRESP),
    .I_RLAST(gmem_read_RLAST),
    .I_AWVALID(gmem_read_AWVALID),
    .I_AWREADY(gmem_read_AWREADY),
    .I_AWADDR(gmem_read_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_read_WVALID),
    .I_WREADY(gmem_read_WREADY),
    .I_WDATA(tmp_15_reg_585),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(16'd65535),
    .I_BVALID(gmem_read_BVALID),
    .I_BREADY(gmem_read_BREADY),
    .I_BRESP(gmem_read_BRESP),
    .I_BID(gmem_read_BID),
    .I_BUSER(gmem_read_BUSER)
);

circ_buff_read_128_data_V #(
    .DataWidth( 128 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(data_V_address0),
    .ce0(data_V_ce0),
    .we0(data_V_we0),
    .d0(gmem_read_addr_1_rea_reg_615),
    .q0(data_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state12) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state12)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state12);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state23)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_read_ARREADY <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_590 == 1'd1)) | ((ap_sig_ioackin_gmem_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_gmem_read_ARREADY <= 1'b0;
        end else if ((((1'b0 == ap_block_pp0_stage0_01001) & (gmem_read_ARREADY == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_590 == 1'd1)) | ((gmem_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
            ap_reg_ioackin_gmem_read_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_read_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            if ((ap_sig_ioackin_gmem_read_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_read_AWREADY <= 1'b0;
            end else if ((gmem_read_AWREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_read_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_gmem_read_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state28)) begin
            if ((ap_sig_ioackin_gmem_read_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_read_WREADY <= 1'b0;
            end else if ((gmem_read_WREADY == 1'b1)) begin
                ap_reg_ioackin_gmem_read_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_1_ack_out == 1'b1) & (stream_out_V_1_vld_out == 1'b1))) begin
            stream_out_V_1_sel_rd <= ~stream_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_1_ack_in == 1'b1) & (stream_out_V_1_vld_in == 1'b1))) begin
            stream_out_V_1_sel_wr <= ~stream_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_1_vld_in == 1'b0) & (stream_out_V_1_state == 2'd2)) | ((stream_out_V_1_vld_in == 1'b0) & (stream_out_V_1_ack_out == 1'b1) & (stream_out_V_1_state == 2'd3)))) begin
            stream_out_V_1_state <= 2'd2;
        end else if ((((stream_out_V_1_ack_out == 1'b0) & (stream_out_V_1_state == 2'd1)) | ((stream_out_V_1_ack_out == 1'b0) & (stream_out_V_1_vld_in == 1'b1) & (stream_out_V_1_state == 2'd3)))) begin
            stream_out_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_1_vld_in == 1'b0) & (stream_out_V_1_ack_out == 1'b1)) & ~((stream_out_V_1_ack_out == 1'b0) & (stream_out_V_1_vld_in == 1'b1)) & (stream_out_V_1_state == 2'd3)) | ((stream_out_V_1_ack_out == 1'b1) & (stream_out_V_1_state == 2'd1)) | ((stream_out_V_1_vld_in == 1'b1) & (stream_out_V_1_state == 2'd2)))) begin
            stream_out_V_1_state <= 2'd3;
        end else begin
            stream_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_625 == 1'd0))) begin
        h1_reg_238 <= temp_V_mid2_v_reg_634;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        h1_reg_238 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_590 == 1'd1))) begin
        h_reg_215 <= h_1_reg_594;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        h_reg_215 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_426_p2 == 1'd0))) begin
        indvar_flatten_reg_227 <= indvar_flatten_next_fu_431_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        indvar_flatten_reg_227 <= 17'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_fu_372_p2 == 1'd1))) begin
        stream_tail_V <= tmp_7_fu_392_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_274_p2 == 1'd1))) begin
        stream_tail_V <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_426_p2 == 1'd0))) begin
        t_V_1_reg_249 <= word_V_fu_476_p2;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        t_V_1_reg_249 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_590 == 1'd1))) begin
        t_V_reg_206 <= tmp_7_reg_604;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        t_V_reg_206 <= stream_tail_V_load_reg_529;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        bytes_read_reg_579 <= bytes_read_fu_335_p2;
        tmp_15_reg_585[8 : 0] <= tmp_15_fu_364_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_426_p2 == 1'd0))) begin
        cond_reg_644 <= cond_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_flatten_reg_625 <= exitcond_flatten_fu_426_p2;
        exitcond_flatten_reg_625_pp1_iter1_reg <= exitcond_flatten_reg_625;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        extLd_reg_536[8 : 0] <= extLd_fu_284_p1[8 : 0];
        stream_tail_V_load_reg_529 <= stream_tail_V;
        tmp_10_cast_reg_519[27 : 0] <= tmp_10_cast_fu_270_p1[27 : 0];
        tmp_reg_525 <= tmp_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_590_pp0_iter7_reg == 1'd1))) begin
        gmem_read_addr_1_rea_reg_615 <= gmem_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_1_reg_594 <= h_1_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        h_reg_215_pp0_iter1_reg <= h_reg_215;
        tmp_5_reg_590 <= tmp_5_fu_372_p2;
        tmp_5_reg_590_pp0_iter1_reg <= tmp_5_reg_590;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        h_reg_215_pp0_iter2_reg <= h_reg_215_pp0_iter1_reg;
        h_reg_215_pp0_iter3_reg <= h_reg_215_pp0_iter2_reg;
        h_reg_215_pp0_iter4_reg <= h_reg_215_pp0_iter3_reg;
        h_reg_215_pp0_iter5_reg <= h_reg_215_pp0_iter4_reg;
        h_reg_215_pp0_iter6_reg <= h_reg_215_pp0_iter5_reg;
        h_reg_215_pp0_iter7_reg <= h_reg_215_pp0_iter6_reg;
        h_reg_215_pp0_iter8_reg <= h_reg_215_pp0_iter7_reg;
        tmp_5_reg_590_pp0_iter2_reg <= tmp_5_reg_590_pp0_iter1_reg;
        tmp_5_reg_590_pp0_iter3_reg <= tmp_5_reg_590_pp0_iter2_reg;
        tmp_5_reg_590_pp0_iter4_reg <= tmp_5_reg_590_pp0_iter3_reg;
        tmp_5_reg_590_pp0_iter5_reg <= tmp_5_reg_590_pp0_iter4_reg;
        tmp_5_reg_590_pp0_iter6_reg <= tmp_5_reg_590_pp0_iter5_reg;
        tmp_5_reg_590_pp0_iter7_reg <= tmp_5_reg_590_pp0_iter6_reg;
        tmp_5_reg_590_pp0_iter8_reg <= tmp_5_reg_590_pp0_iter7_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        input_V2_sum3_reg_659 <= input_V2_sum3_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_fu_372_p2 == 1'd1))) begin
        input_V2_sum4_reg_599 <= input_V2_sum4_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_274_p2 == 1'd0))) begin
        input_V2_sum_reg_542 <= input_V2_sum_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((gmem_read_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        stream_head_V_reg_553 <= gmem_read_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_1_load_A == 1'b1)) begin
        stream_out_V_1_payload_A <= tmp_20_fu_496_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_1_load_B == 1'b1)) begin
        stream_out_V_1_payload_B <= tmp_20_fu_496_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_fu_426_p2 == 1'd0))) begin
        temp_V_mid2_v_reg_634 <= temp_V_mid2_v_fu_457_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_16_reg_620[16 : 1] <= tmp_16_fu_419_p3[16 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_1_reg_560 <= tmp_1_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_310_p2 == 1'd0))) begin
        tmp_2_reg_564 <= tmp_2_fu_314_p2;
        tmp_6_reg_569 <= tmp_6_fu_318_p1;
        tmp_8_reg_574 <= tmp_8_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_fu_372_p2 == 1'd1))) begin
        tmp_7_reg_604 <= tmp_7_fu_392_p2;
    end
end

always @ (*) begin
    if ((tmp_5_fu_372_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state12 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state12 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_426_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_1_ack_in == 1'b0) | ((ap_predicate_op146_writeresp_state33 == 1'b1) & (gmem_read_BVALID == 1'b0))) & (stream_out_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_625 == 1'd0))) begin
        ap_phi_mux_h1_phi_fu_242_p4 = temp_V_mid2_v_reg_634;
    end else begin
        ap_phi_mux_h1_phi_fu_242_p4 = h1_reg_238;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_590 == 1'd1))) begin
        ap_phi_mux_h_phi_fu_219_p4 = h_1_reg_594;
    end else begin
        ap_phi_mux_h_phi_fu_219_p4 = h_reg_215;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_590 == 1'd1))) begin
        ap_phi_mux_t_V_phi_fu_209_p4 = tmp_7_reg_604;
    end else begin
        ap_phi_mux_t_V_phi_fu_209_p4 = t_V_reg_206;
    end
end

always @ (*) begin
    if ((~((stream_out_V_1_ack_in == 1'b0) | ((ap_predicate_op146_writeresp_state33 == 1'b1) & (gmem_read_BVALID == 1'b0))) & (stream_out_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_read_ARREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_read_ARREADY = gmem_read_ARREADY;
    end else begin
        ap_sig_ioackin_gmem_read_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_read_AWREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_read_AWREADY = gmem_read_AWREADY;
    end else begin
        ap_sig_ioackin_gmem_read_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_read_WREADY == 1'b0)) begin
        ap_sig_ioackin_gmem_read_WREADY = gmem_read_WREADY;
    end else begin
        ap_sig_ioackin_gmem_read_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        data_V_address0 = temp_V_mid2_fu_465_p1;
    end else if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data_V_address0 = tmp_9_fu_414_p1;
    end else begin
        data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (tmp_5_reg_590_pp0_iter8_reg == 1'd1))) begin
        data_V_we0 = 1'b1;
    end else begin
        data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_gmem_read_ARREADY == 1'b0)) begin
        if ((1'b1 == ap_condition_613)) begin
            gmem_read_ARADDR = input_V2_sum4_cast_fu_404_p1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            gmem_read_ARADDR = input_V2_sum_cast_fu_300_p1;
        end else begin
            gmem_read_ARADDR = 'bx;
        end
    end else begin
        gmem_read_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_gmem_read_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_590 == 1'd1)) | ((ap_reg_ioackin_gmem_read_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2)))) begin
        gmem_read_ARVALID = 1'b1;
    end else begin
        gmem_read_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_read_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state27))) begin
        gmem_read_AWVALID = 1'b1;
    end else begin
        gmem_read_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_1_ack_in == 1'b0) | ((ap_predicate_op146_writeresp_state33 == 1'b1) & (gmem_read_BVALID == 1'b0))) & (ap_predicate_op146_writeresp_state33 == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        gmem_read_BREADY = 1'b1;
    end else begin
        gmem_read_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_5_reg_590_pp0_iter7_reg == 1'd1)) | ((gmem_read_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9)))) begin
        gmem_read_RREADY = 1'b1;
    end else begin
        gmem_read_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_gmem_read_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state28))) begin
        gmem_read_WVALID = 1'b1;
    end else begin
        gmem_read_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_590 == 1'd1)))) begin
        gmem_read_blk_n_AR = m_axi_gmem_read_ARREADY;
    end else begin
        gmem_read_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        gmem_read_blk_n_AW = m_axi_gmem_read_AWREADY;
    end else begin
        gmem_read_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) & (tmp_1_reg_560 == 1'd0) & (tmp_reg_525 == 1'd0))) begin
        gmem_read_blk_n_B = m_axi_gmem_read_BVALID;
    end else begin
        gmem_read_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_590_pp0_iter7_reg == 1'd1)))) begin
        gmem_read_blk_n_R = m_axi_gmem_read_RVALID;
    end else begin
        gmem_read_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        gmem_read_blk_n_W = m_axi_gmem_read_WREADY;
    end else begin
        gmem_read_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((stream_out_V_1_sel == 1'b1)) begin
        stream_out_V_1_data_out = stream_out_V_1_payload_B;
    end else begin
        stream_out_V_1_data_out = stream_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_625 == 1'd0))) begin
        stream_out_V_1_vld_in = 1'b1;
    end else begin
        stream_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (exitcond_flatten_reg_625_pp1_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_flatten_reg_625 == 1'd0)))) begin
        stream_out_V_TDATA_blk_n = stream_out_V_1_state[1'd1];
    end else begin
        stream_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_274_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (tmp_fu_274_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((ap_sig_ioackin_gmem_read_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((gmem_read_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_1_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_5_fu_372_p2 == 1'd0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_5_fu_372_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_fu_426_p2 == 1'd1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_flatten_fu_426_p2 == 1'd1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((ap_sig_ioackin_gmem_read_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((ap_sig_ioackin_gmem_read_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if ((~((stream_out_V_1_ack_in == 1'b0) | ((ap_predicate_op146_writeresp_state33 == 1'b1) & (gmem_read_BVALID == 1'b0))) & (stream_out_V_1_state[1'd0] == 1'b0) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((gmem_read_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_5_reg_590_pp0_iter7_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_read_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_5_reg_590_pp0_iter7_reg == 1'd1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_read_RVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (tmp_5_reg_590_pp0_iter7_reg == 1'd1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state25_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state25_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state24_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_state12_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((ap_sig_ioackin_gmem_read_ARREADY == 1'b0) & (tmp_5_reg_590 == 1'd1));
end

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_pp0_stage0_iter8 = ((gmem_read_RVALID == 1'b0) & (tmp_5_reg_590_pp0_iter7_reg == 1'd1));
end

assign ap_block_state21_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((stream_out_V_1_ack_in == 1'b0) & (exitcond_flatten_reg_625 == 1'd0));
end

assign ap_block_state24_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state25_io = ((stream_out_V_1_ack_in == 1'b0) & (exitcond_flatten_reg_625_pp1_iter1_reg == 1'd0));
end

assign ap_block_state25_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state33 = ((stream_out_V_1_ack_in == 1'b0) | ((ap_predicate_op146_writeresp_state33 == 1'b1) & (gmem_read_BVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_613 = ((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_5_reg_590 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

always @ (*) begin
    ap_predicate_op146_writeresp_state33 = ((tmp_1_reg_560 == 1'd0) & (tmp_reg_525 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bytes_read2_v_fu_330_p3 = ((tmp_2_reg_564[0:0] === 1'b1) ? tmp_6_reg_569 : tmp_8_reg_574);

assign bytes_read_fu_335_p2 = (bytes_read2_v_fu_330_p3 - tmp_4_fu_327_p1);

assign cond_fu_470_p2 = ((t_V_1_mid2_fu_443_p3 == 2'd0) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_426_p2 = ((indvar_flatten_reg_227 == tmp_16_reg_620) ? 1'b1 : 1'b0);

assign extLd_fu_284_p1 = stream_tail_V;

assign gmem_read_AWADDR = input_V2_sum3_cast_fu_509_p1;

assign h_1_fu_377_p2 = (ap_phi_mux_h_phi_fu_219_p4 + 15'd1);

assign h_cast_fu_368_p1 = ap_phi_mux_h_phi_fu_219_p4;

assign h_s_fu_451_p2 = (15'd1 + ap_phi_mux_h1_phi_fu_242_p4);

assign indvar_flatten_next_fu_431_p2 = (indvar_flatten_reg_227 + 17'd1);

assign input_V2_sum3_cast_fu_509_p1 = input_V2_sum3_reg_659;

assign input_V2_sum3_fu_504_p2 = (tmp_10_cast_reg_519 + 29'd512);

assign input_V2_sum4_cast_fu_404_p1 = input_V2_sum4_reg_599;

assign input_V2_sum4_fu_387_p2 = (tmp_6_cast_fu_383_p1 + tmp_10_cast_reg_519);

assign input_V2_sum_cast_fu_300_p1 = input_V2_sum_reg_542;

assign input_V2_sum_fu_288_p2 = (tmp_10_cast_fu_270_p1 + 29'd513);

assign stream_out_V_1_ack_in = stream_out_V_1_state[1'd1];

assign stream_out_V_1_ack_out = stream_out_V_TREADY;

assign stream_out_V_1_load_A = (stream_out_V_1_state_cmp_full & ~stream_out_V_1_sel_wr);

assign stream_out_V_1_load_B = (stream_out_V_1_state_cmp_full & stream_out_V_1_sel_wr);

assign stream_out_V_1_sel = stream_out_V_1_sel_rd;

assign stream_out_V_1_state_cmp_full = ((stream_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_1_vld_out = stream_out_V_1_state[1'd0];

assign stream_out_V_TDATA = stream_out_V_1_data_out;

assign stream_out_V_TVALID = stream_out_V_1_state[1'd0];

assign t_V_1_mid2_fu_443_p3 = ((tmp_17_fu_437_p2[0:0] === 1'b1) ? 2'd0 : t_V_1_reg_249);

assign temp_V_mid2_fu_465_p1 = temp_V_mid2_v_fu_457_p3;

assign temp_V_mid2_v_fu_457_p3 = ((tmp_17_fu_437_p2[0:0] === 1'b1) ? h_s_fu_451_p2 : ap_phi_mux_h1_phi_fu_242_p4);

assign tmp_10_cast_fu_270_p1 = tmp_3_fu_260_p4;

assign tmp_10_fu_341_p2 = (($signed(bytes_read_fu_335_p2) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign tmp_11_fu_347_p1 = bytes_read_fu_335_p2[8:0];

assign tmp_12_fu_351_p3 = ((tmp_10_fu_341_p2[0:0] === 1'b1) ? tmp_11_fu_347_p1 : 9'd0);

assign tmp_13_fu_359_p2 = (tmp_12_fu_351_p3 + stream_tail_V_load_reg_529);

assign tmp_15_fu_364_p1 = tmp_13_fu_359_p2;

assign tmp_16_fu_419_p3 = {{bytes_read_reg_579}, {1'd0}};

assign tmp_17_fu_437_p2 = ((t_V_1_reg_249 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_18_fu_482_p1 = data_V_q0[63:0];

assign tmp_19_fu_486_p4 = {{data_V_q0[95:32]}};

assign tmp_1_fu_310_p2 = ((extLd_reg_536 == stream_head_V_reg_553) ? 1'b1 : 1'b0);

assign tmp_20_fu_496_p3 = ((cond_reg_644[0:0] === 1'b1) ? tmp_18_fu_482_p1 : tmp_19_fu_486_p4);

assign tmp_2_fu_314_p2 = ((stream_head_V_reg_553 > extLd_reg_536) ? 1'b1 : 1'b0);

assign tmp_3_fu_260_p4 = {{input_V[31:4]}};

assign tmp_4_fu_327_p1 = stream_tail_V_load_reg_529;

assign tmp_5_fu_372_p2 = (($signed(h_cast_fu_368_p1) < $signed(bytes_read_reg_579)) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_383_p1 = ap_phi_mux_t_V_phi_fu_209_p4;

assign tmp_6_fu_318_p1 = stream_head_V_reg_553[15:0];

assign tmp_7_fu_392_p2 = (ap_phi_mux_t_V_phi_fu_209_p4 + 9'd1);

assign tmp_8_fu_321_p2 = (16'd512 + tmp_6_fu_318_p1);

assign tmp_9_fu_414_p1 = h_reg_215_pp0_iter8_reg;

assign tmp_fu_274_p2 = ((reset == 8'd1) ? 1'b1 : 1'b0);

assign word_V_fu_476_p2 = (2'd1 + t_V_1_mid2_fu_443_p3);

always @ (posedge ap_clk) begin
    tmp_10_cast_reg_519[28] <= 1'b0;
    extLd_reg_536[127:9] <= 119'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    tmp_15_reg_585[127:9] <= 119'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    tmp_16_reg_620[0] <= 1'b0;
end

endmodule //circ_buff_read_128
